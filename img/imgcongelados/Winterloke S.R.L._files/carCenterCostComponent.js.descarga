"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// eslint-disable-next-line
var carCenterCostComponent = function (_Component) {
    _inherits(carCenterCostComponent, _Component);

    function carCenterCostComponent() {
        _classCallCheck(this, carCenterCostComponent);

        return _possibleConstructorReturn(this, (carCenterCostComponent.__proto__ || Object.getPrototypeOf(carCenterCostComponent)).apply(this, arguments));
    }

    _createClass(carCenterCostComponent, [{
        key: "getData",
        value: function getData() {
            return this.data;
        }
    }, {
        key: "data",
        value: function data() {
            return {
                selectedCode: null,
                centerCostList: [],
                showList: [],
                filterable: ["Code", "Name"],
                columns: ['Code', 'Name'],
                options: {
                    filterable: ["Code", "Name"],
                    translateFunction: this.tr,
                    perPage: 10,
                    pagination: {
                        chunk: 10
                    },
                    headings: {
                        'Code': this.tr('Code'),
                        'Name': this.tr('Name')
                    },
                    texts: {
                        filter: this.tr('Search') + ':',
                        limit: '',
                        filterPlaceholder: this.tr('Write a value'),
                        noResults: this.tr('No data were found'),
                        loading: this.tr('Loading') + '...'
                    }
                },
                uniqueKey: "Code",
                selectedNode: null
            };
        }
    }, {
        key: "mounted",
        value: function mounted() {
            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var self;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                self = this;
                                // eslint-disable-next-line

                                axios.get("/ecommerce/api/getCenterCost").then(function (response) {
                                    self.centerCostList = response.data.centerCost;
                                    self.$store.dispatch('centerCostRequire', self.centerCostList.length > 1);
                                    if (self.centerCostList.length == 1) {
                                        self.selectEvent(self.centerCostList[0]);
                                    } else {
                                        if (self.$store.getters.getIsLogin) {
                                            var _iteratorNormalCompletion = true;
                                            var _didIteratorError = false;
                                            var _iteratorError = undefined;

                                            try {
                                                for (var _iterator = self.centerCostList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                                    var cc = _step.value;

                                                    if (cc.Code == self.$store.state.session.fields.DefaultCenterCost) self.selectEvent(cc);
                                                }
                                            } catch (err) {
                                                _didIteratorError = true;
                                                _iteratorError = err;
                                            } finally {
                                                try {
                                                    if (!_iteratorNormalCompletion && _iterator.return) {
                                                        _iterator.return();
                                                    }
                                                } finally {
                                                    if (_didIteratorError) {
                                                        throw _iteratorError;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                });

                            case 2:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "getMethods",
        value: function getMethods() {
            return {
                isSelected: this.isSelected,
                selectEvent: this.selectEvent,
                changeData: this.changeData
            };
        }
    }, {
        key: "isSelected",
        value: function isSelected(code) {
            return this.selectedCode == code;
        }
    }, {
        key: "selectEvent",
        value: function selectEvent(ccObjc) {
            this.selectedCode = ccObjc.Code;
            this.$store.dispatch('updateOrderCenterCost', ccObjc);
            this.emitEvent('selectcentercost', ccObjc);
        }
    }, {
        key: "changeData",
        value: function changeData(obj) {
            this.selectEvent(obj.row);
            var rowHtmlNode = obj.event.path[1];
            if (rowHtmlNode.getAttribute('class') == "selected") {
                rowHtmlNode.className = "";
                this.selectedNode = null;
            }
            if (!rowHtmlNode.getAttribute('class')) {
                if (this.selectedNode) {
                    this.selectedNode.className = "";
                }
                this.selectedNode = rowHtmlNode;
                rowHtmlNode.className = "selected";
            }
            this.$store.dispatch('showNotificacion', { title: '', message: this.tr("Cost Center") + " " + obj.row.Code, type: 'success' });
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return "<div class=\"col-12 car-center-cost-list\" v-if=\"centerCostList.length > 0\" >\n                <div class=\"col-12\">\n                    <div class=\"bordered mb-0 mt-3\">\n                        <div class=\"row m-0 align-items-center\">\n                            <h6 class=\"col-12\">\n                                <i class=\"fas fa-address-book fa-2x mr-3\"></i>\n                                {{tr('Select a Customer Cost Center')}}\n                            </h6>\n                        </div>\n                        <v-client-table class=\"custom-vue-table\" @row-click=\"changeData\"  :columns=columns :data=\"centerCostList\" :options=\"options\"></v-client-table>\n                    </div>\n                </div>\n            </div>";
        }
    }], [{
        key: "name",
        value: function name() {
            return "carCenterCostList";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "carCenterCostList";
        }
    }]);

    return carCenterCostComponent;
}(Component);

carCenterCostComponent.registerComponent();
//# sourceMappingURL=carCenterCostComponent.js.map
