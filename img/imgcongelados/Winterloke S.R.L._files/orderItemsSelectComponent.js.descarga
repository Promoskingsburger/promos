"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var orderItemsSelectComponent = function (_Component) {
    _inherits(orderItemsSelectComponent, _Component);

    function orderItemsSelectComponent() {
        _classCallCheck(this, orderItemsSelectComponent);

        return _possibleConstructorReturn(this, (orderItemsSelectComponent.__proto__ || Object.getPrototypeOf(orderItemsSelectComponent)).apply(this, arguments));
    }

    _createClass(orderItemsSelectComponent, [{
        key: "data",
        value: function data() {
            return {
                orderSelected: null
            };
        }
    }, {
        key: "getComputed",
        value: function getComputed() {
            return {
                currentSelected: function currentSelected() {
                    if (!this.orderSelected) this.orderSelected = this.$store.getters.getOrderSelected;
                    return this.$store.getters.getOrderSelected;
                },
                options: function options() {
                    return this.$store.getters.getSettingItemOrdered;
                }
            };
        }
    }, {
        key: "getMethods",
        value: function getMethods() {
            return {
                emitEvent: this.emitEvent
            };
        }
    }, {
        key: "emitEvent",
        value: function emitEvent() {
            this.$store.dispatch('reorderItems', this.orderSelected);
            this.$emit('reorder');
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return "<div class=\"form-inline\">\n                   <label class=\"mr-1\">{{tr('Order by')}} :</label>\n                    <select id=\"soflow\" v-model=\"orderSelected\" class=\"form-control custom-select\" @change=\"emitEvent\">\n                        <template  v-if=\"$store.getters.getSetting!=null\" v-for=\"orderField of options\">\n                            <template v-if=\"orderField.fields.internalId==currentSelected\">\n                                <option :value=\"orderField.fields.internalId\" selected=\"selected\" >\n                                    <p>\n                                        {{tr(orderField.fields.ItemField)}} ({{orderField.fields.OrderDirection}})\n                                        <template v-if=\"orderField.fields.OrderDirection=='asc'\">\n                                           <h5> &uarr;</h5>\n                                        </template>\n                                        <template v-else>\n                                           <h5> &darr;</h5>\n                                        </template>\n                                    </p>\n                                </option>\n                             </template>\n                             <template v-else>\n                                <option :value=\"orderField.fields.internalId\">\n                                    <p>{{tr(orderField.fields.ItemField)}} ({{orderField.fields.OrderDirection}})\n                                        <template v-if=\"orderField.fields.OrderDirection=='asc'\">\n                                           <h5> &uarr;</h5>\n                                        </template>\n                                        <template v-else>\n                                           <h5> &darr;</h5>\n                                        </template>\n                                    </p>\n                                </option>\n                             </template>\n                        </template>\n                    </select>\n                </div>";
        }
    }], [{
        key: "name",
        value: function name() {
            return "orderItemsSelect";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "orderItemsSelect";
        }
    }]);

    return orderItemsSelectComponent;
}(Component);

orderItemsSelectComponent.registerComponent();
//# sourceMappingURL=orderItemsSelectComponent.js.map
