"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FAQsPage = function (_Component) {
    _inherits(FAQsPage, _Component);

    function FAQsPage() {
        _classCallCheck(this, FAQsPage);

        return _possibleConstructorReturn(this, (FAQsPage.__proto__ || Object.getPrototypeOf(FAQsPage)).apply(this, arguments));
    }

    _createClass(FAQsPage, [{
        key: "data",
        value: function data() {
            return {
                activeLink: 'zone'
            };
        }
    }, {
        key: "getMethods",
        value: function getMethods() {
            return {
                scrollMeTo: this.scrollMeTo
            };
        }
    }, {
        key: "scrollMeTo",
        value: function scrollMeTo(refName) {
            this.activeLink = refName;
            var element = this.$refs[refName];
            window.scrollTo({
                top: element.offsetTop,
                behavior: 'smooth'
            });
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return "<div>\n                    <headerSectionComponent></headerSectionComponent>\n                    <div :class=\"classContainer\" class=\"static-page px-4 px-md-5\">\n                        <div class=\"row justify-content-end\">\n                            <h5 class=\"col-12 p-3 mb-4 title underlined-title\">{{tr('Frequent asked questions')}}</h5>\n                            <nav class=\"faq-nav nav flex-column col-12 col-md-4 col-lg-3 mb-5 fixed-top\">\n                                <a class=\"nav-link\" :class=\"{'active': activeLink == 'zone'}\" @click=\"scrollMeTo('zone')\"></a>\n                            </nav>\n                            <div class=\"col-12 col-md-8 col-lg-9\">\n                                <div ref=\"zone\" class=\"card mb-4 shadow rounded border-0 ml-auto ml-lg-0\">\n                                    <div class=\"card-body\">\n                                        <div class=\"row\">\n                                            <div class=\"col-12 col-lg-6\">\n                                                <p class=\"subtitle\"><strong></strong></p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <footerSectionComponent></footerSectionComponent>\n                </div>";
        }
    }], [{
        key: "name",
        value: function name() {
            return "FAQsPage";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "FAQsPage";
        }
    }]);

    return FAQsPage;
}(Component);

FAQsPage.registerComponent();
//# sourceMappingURL=FAQsPage.js.map
