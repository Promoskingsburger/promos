"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* global Component, _ */
var orderActionsComponentB2C = function (_Component) {
    _inherits(orderActionsComponentB2C, _Component);

    function orderActionsComponentB2C() {
        _classCallCheck(this, orderActionsComponentB2C);

        return _possibleConstructorReturn(this, (orderActionsComponentB2C.__proto__ || Object.getPrototypeOf(orderActionsComponentB2C)).apply(this, arguments));
    }

    _createClass(orderActionsComponentB2C, [{
        key: "getProps",
        value: function getProps() {
            return ['data', 'index', 'column'];
        }
    }, {
        key: "data",
        value: function data() {
            return {
                FavouritesOrders: []
            };
        }
    }, {
        key: "getComputed",
        value: function getComputed() {
            return {
                orderSerNr: function orderSerNr() {
                    return window.btoa(this.data.SerNr);
                },
                viewFilter: function viewFilter() {
                    return this.$store.getters.getOrderView;
                },
                FavouritesOrdersSerNrs: function FavouritesOrdersSerNrs() {
                    return _.map([].concat(_toConsumableArray(this.FavouritesOrders)), function (x) {
                        return x[2];
                    });
                },
                canByCopy: function canByCopy() {
                    if (this.isUserOnlyModifier()) return false;
                    return true;
                },
                canByLiberate: function canByLiberate() {
                    //console.log('Order Action',this.viewFilter,this.isUserOnlyModifier(this.data.MainContact),this.isUserLiberator());
                    if (this.viewFilter !== 'awaiting') return false;else {
                        if (this.isUserOnlyModifier()) return false;
                        if (this.data.OrderStatus !== this.$store.getters.getSetting.PreAutorizationStatus) return false;
                        return this.isUserLiberator();
                    }
                }
            };
        }
    }, {
        key: "getMethods",
        value: function getMethods() {

            return {
                isUserLiberator: function isUserLiberator() {
                    if (this.$store.getters.getIsLogin) return this.$store.state.liberatorCodes.indexOf(this.data.Contact) !== -1 || this.$store.state.CenterLiberators.indexOf(this.data.CenterCost) !== -1;
                    return false;
                },
                isUserOnlyModifier: function isUserOnlyModifier() {
                    if (this.$store.getters.getIsLogin) return this.$store.state.onlyModifiedCodes.indexOf(this.data.Contact) !== -1 || this.$store.state.CenterOnlyModifiedCodes.indexOf(this.data.CenterCost) !== -1;
                    return false;
                },
                orderAction: function orderAction(action) {
                    this.$store.dispatch('orderAction', { action: action, sernr: this.data.SerNr, date: this.data.TransDate });
                },
                orderPay: function orderPay() {
                    var _this2 = this;

                    if (this.data.Closed !== 1) return this.$store.getters.getSetting.PayTermRow.filter(function (x) {
                        return x.fields.RequireOnlinePayment && x.fields.PayTermCode === _this2.data.PayTerm;
                    }).length > 0;
                    return false;
                },
                orderPayed: function orderPayed() {
                    var needPay = false;
                    if (this.data.PaymentStatus && this.data.PaymentStatusCode) {
                        var payStatus = this.data.PaymentStatus.split(",");
                        var payStatusCode = this.data.PaymentStatusCode.split(",");
                        if (payStatus.indexOf("1") !== -1 && payStatusCode.indexOf("approved") !== -1) needPay = true;
                        if (payStatus.indexOf("4") !== -1 && payStatusCode.indexOf("in_process") !== -1) needPay = true;
                        //console.log(needPay,payStatus,payStatusCode);
                    }
                    return needPay;
                },
                copyOrder: function copyOrder() {
                    //console.log('custom-actions: ', this.data, this.index, this.column);
                    var self = this;
                    this.$store.dispatch('toogleLockScreen', this.tr('Load Items to Shopping Car'));
                    this.$store.dispatch('copyOrder', { orderId: this.data.SerNr }).then(function () {
                        self.$store.dispatch('toogleLockScreen', "").then(function () {
                            self.$router.push("/badges");
                        });
                    });
                },

                viewOrder: function viewOrder() {
                    this.emitEvent('viewOrderDetail', this.data);
                },
                OpenModalFavoriteOrders: function () {
                    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                        return regeneratorRuntime.wrap(function _callee$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        _context.next = 2;
                                        return this.$store.dispatch('orderDetail', this.data.SerNr);

                                    case 2:
                                    case "end":
                                        return _context.stop();
                                }
                            }
                        }, _callee, this);
                    }));

                    function OpenModalFavoriteOrders() {
                        return _ref.apply(this, arguments);
                    }

                    return OpenModalFavoriteOrders;
                }(),
                downloadDocument: function downloadDocument() {
                    var params = this.encode("RecordName=SalesOrder&InternalId=" + this.data.internalId);
                    //console.log('custom-actions: ', this.data);
                    window.open('../oo/api/get_pdfdocument?' + params, "_blank");
                },
                toggleFavouriteOrder: function toggleFavouriteOrder() {
                    this.$store.dispatch('toggleFavouriteOrder', this.FavouriteOrder(this.data.SerNr));
                },
                isFavouriteOrder: function isFavouriteOrder() {
                    return !!this.FavouritesOrdersSerNrs.includes(this.data.SerNr.toString());
                },
                FavouriteOrder: function FavouriteOrder(SerNr) {
                    var FV = this.FavouritesOrders.find(function (x) {
                        return x[2] === SerNr;
                    });
                    return {
                        name: FV[0],
                        items: FV[1],
                        OrderSerNr: FV[2],
                        from: 'so-items'
                    };
                },
                updatefavouritesOrders: function updatefavouritesOrders() {
                    this.FavouritesOrders = this.$store.getters.getAllFavouritesOrders;
                }
            };
        }
    }, {
        key: "getWatch",
        value: function getWatch() {
            return {
                '$store.state.favouritesOrders': 'updatefavouritesOrders'
            };
        }
    }, {
        key: "created",
        value: function created() {
            return function () {
                this.FavouritesOrders = this.$store.getters.getAllFavouritesOrders;
            };
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return "<div :key=\"'actions-'+data.SerNr\" class=\"btn-group custom-actions\" role=\"group\" aria-label=\"Button group with nested dropdown\">\n                  <div class=\"btn-group\" role=\"group\">\n                     <a  class=\"btn\" :key=\"'actions-RemoveFromFavorite-'+data.SerNr\" v-show=\"isFavouriteOrder()\" :title=\"tr('Remove from Favorite')\" @click=\"toggleFavouriteOrder()\">\n                        <i class=\"is-favorite fas fa-star\"></i>\n                      </a>\n                      <template v-if=\"orderPay()\">\n                          <router-link :to=\"'/payment/'+orderSerNr\" class=\"btn\" :key=\"'actions-Payment-'+data.SerNr\" v-show=\"!orderPayed()\" :title=\"tr('Pay Now')\" >\n                              <i class=\"far fa-credit-card\"></i> \n                          </router-link>\n                          <a class=\"dropdown-item\" :key=\"'actions-reject-'+data.SerNr\"  v-show=\"!orderPayed()\"  @click.stop=\"orderAction('invalidate')\" :title=\"tr('Invalidate')\" >\n                              <i class=\"fa fa-minus\"></i>\n                          </a>\n                      </template>\n                      <a class=\"btn\"  :key=\"'actions-addToFavorite-'+data.SerNr\" v-show=\"!isFavouriteOrder()\" :title=\"tr('Add To Favorite')\" data-toggle=\"modal\" data-target=\"#addSOFavModal\" @click=\"OpenModalFavoriteOrders()\">\n                        <i class=\"far fa-star\"></i>\n                      </a>\n                      <a class=\"dropdown-item\"  :key=\"'actions-copy-'+data.SerNr\"  :title=\"tr('Copy')\" @click.stop=\"copyOrder()\" v-if=\"canByCopy\">\n                        <i class=\"fa fa-copy\"></i>\n                      </a>\n                      <a class=\"dropdown-item\" :key=\"'actions-edit-'+data.SerNr\" :title=\"tr('View')+'/'+tr('Edit')\" @click=\"viewOrder()\" >\n                        <i class=\"fa fa-edit\"></i>\n                      </a>\n                      <a class=\"dropdown-item\"  :key=\"'actions-download-'+data.SerNr\"  target=\"_blank\" :title=\"tr('Download')\"  @click=\"downloadDocument()\"  v-if=\"viewFilter!='awaiting'\">\n                        <i class=\"fa fa-download\"></i>\n                      </a>\n                      <a class=\"dropdown-item\" :key=\"'actions-liberate-'+data.SerNr\"  :title=\"tr('Confirm')\" @click.stop=\"orderAction('liberate')\" v-if=\"canByLiberate\">\n                        <i class=\"fa fa-check\"></i>\n                      </a>\n                      <a class=\"dropdown-item\" :key=\"'actions-reject-'+data.SerNr\"  :title=\"tr('Reject')\" @click.stop=\"orderAction('reject')\" v-if=\"canByLiberate\">\n                        <i class=\"fa fa-minus\"></i>\n                      </a>\n                    </div>\n                </div>";
        }
    }], [{
        key: "name",
        value: function name() {
            return "orderActionsComponent";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "orderActionsComponent";
        }
    }]);

    return orderActionsComponentB2C;
}(Component);

orderActionsComponentB2C.registerComponent();
//# sourceMappingURL=orderActionsComponent.js.map
