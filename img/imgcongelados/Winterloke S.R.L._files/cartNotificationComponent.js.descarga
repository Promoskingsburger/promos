"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cartNotificationComponent = function (_Component) {
    _inherits(cartNotificationComponent, _Component);

    function cartNotificationComponent() {
        _classCallCheck(this, cartNotificationComponent);

        return _possibleConstructorReturn(this, (cartNotificationComponent.__proto__ || Object.getPrototypeOf(cartNotificationComponent)).apply(this, arguments));
    }

    _createClass(cartNotificationComponent, [{
        key: "data",
        value: function data() {
            return {
                visible: false,
                qty: 0,
                item: null
            };
        }
    }, {
        key: "mounted",
        value: function mounted() {
            return function () {
                var _this2 = this;

                window.$Event.$on('addItemToCart', function (item) {
                    _this2.visible = true;
                    _this2.qty = item.carCant;
                    _this2.item = item.Name;
                    setTimeout(function () {
                        return _this2.visible = false;
                    }, 1500);
                });
            };
        }
    }, {
        key: "getMethods",
        value: function getMethods() {
            return {
                setQtyText: this.setQtyText
            };
        }
    }, {
        key: "setQtyText",
        value: function setQtyText(qty) {
            if (qty > 1) {
                return "Agregaste " + qty + " artículos a tu carrito";
            } else {
                return "Agregaste " + qty + " artículo a tu carrito";
            }
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return " <transition name=\"slide-fade\" v-if=\"visible\">\n                    <div class=\"cart-notification\">\n                        <i class=\"success icon fas fa-check-circle\"></i>\n                        <span class=\"success\">{{setQtyText(qty)}}</span>\n                        <p class=\"item-name\">{{item}}</p>\n                    </div>\n                </transition>";
        }
    }], [{
        key: "name",
        value: function name() {
            return "cartNotificationComponent";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "cartNotificationComponent";
        }
    }]);

    return cartNotificationComponent;
}(Component);

cartNotificationComponent.registerComponent();
//# sourceMappingURL=cartNotificationComponent.js.map
