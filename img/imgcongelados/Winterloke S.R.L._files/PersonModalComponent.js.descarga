"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PersonModalComponent = function (_Component) {
    _inherits(PersonModalComponent, _Component);

    function PersonModalComponent() {
        _classCallCheck(this, PersonModalComponent);

        return _possibleConstructorReturn(this, (PersonModalComponent.__proto__ || Object.getPrototypeOf(PersonModalComponent)).apply(this, arguments));
    }

    _createClass(PersonModalComponent, [{
        key: "data",
        value: function data() {
            return {
                response: null,
                alertError: null,
                personName: '',
                personLastName: '',
                personCountry: '',
                personCity: '',
                personJobPosition: '',
                personLastName2: '',
                personEnabled: false,
                personWebUser: '',
                personWebPassword: '',
                personWebAccessGroup: '',
                personEmail: ''
            };
        }
    }, {
        key: "mounted",
        value: function mounted() {
            return function () {
                //this.clearForm();
                this.$store.dispatch('updateSelectLinkto', { table: "modalPerson_Country", value: this.$store.getters.getOurSettingsCountry });
                this.personCountry = this.$store.getters.getOurSettingsCountry;
                //console.log('UMounted PER MODAL',this.personCountry,this.$store.getters.getOurSettingsCountry)
            };
        }
    }, {
        key: "getMethods",
        value: function getMethods() {
            return {
                clearForm: this.clearForm,
                updateSelectValues: this.updateSelectValues,
                registerNewPerson: this.registerNewPerson,
                closeModal: this.closeModal
            };
        }
    }, {
        key: "clearForm",
        value: function clearForm() {
            this.personName = '';
            this.personLastName = '';
            this.personLastName2 = '';
            this.personEnabled = false;
            this.personWebUser = '';
            this.personWebPassword = '';
            this.personEmail = '';
            this.$store.dispatch('clearSelectsLinkto', 'modalPerson');
            this.alertError = null;
            this.updateSelectValues();
        }
    }, {
        key: "updateSelectValues",
        value: function updateSelectValues(event) {
            //console.log('Modal Person',event)
            this.personJobPosition = this.$store.getters.getSelectLinkToValue('modalPerson_JobPosition');
            this.personWebAccessGroup = this.$store.getters.getSelectLinkToValue('modalPerson_WebAccessGroup');
            this.personCountry = this.$store.getters.getSelectLinkToValue('modalPerson_Country');
            this.personCity = this.$store.getters.getSelectLinkToValue('modalPerson_City');
        }
    }, {
        key: "registerNewPerson",
        value: function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var data, Person, errors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _error;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.alertError = null;
                                //console.log('New PER MODAL',this.personCountry,this.$store.getters.getOurSettingsCountry);
                                if (!this.personName) this.alertError = 'Please fill the field Name';else if (!this.personLastName) this.alertError = 'Please fill the field Last Name';else if (!this.personCountry) this.personCountry = this.$store.getters.getOurSettingsCountry;else if (!this.personWebUser) this.alertError = 'Please fill the field User Web';else if (!this.personWebPassword) this.alertError = 'Please enter a password';else if (!this.personWebAccessGroup) this.alertError = 'Please indicate a Web Access Group';

                                if (this.alertError) {
                                    _context.next = 37;
                                    break;
                                }

                                data = {
                                    personName: this.personName,
                                    personLastName: this.personLastName,
                                    personLastName2: this.personLastName2,
                                    personCountry: this.personCountry,
                                    personCity: this.personCity,
                                    personEnabled: this.personEnabled,
                                    personJobPosition: this.personJobPosition,
                                    personWebUser: this.personWebUser,
                                    personWebPassword: this.personWebPassword,
                                    personWebAccessGroup: this.personWebAccessGroup,
                                    personEmail: this.personEmail,
                                    createCustomer: false
                                };
                                _context.next = 6;
                                return axios.post('/ecommerce/api/newPerson', data);

                            case 6:
                                this.response = _context.sent;

                                if (!this.response.data.success) {
                                    _context.next = 15;
                                    break;
                                }

                                Person = {
                                    Code: this.response.data.personCode,
                                    Name: this.personName,
                                    LastName: this.personLastName,
                                    LastName2: this.personLastName2,
                                    Country: this.personCountry,
                                    City: this.personCity,
                                    WebUserFlag: this.personEnabled,
                                    JobPosition: this.personJobPosition,
                                    WebUser: this.personWebUser,
                                    WebPassword: this.personWebPassword,
                                    WebAccessGroup: this.personWebAccessGroup,
                                    Email: this.personEmail
                                };
                                //console.log(Person,'Person to add al state');

                                this.$store.dispatch('AddCustomerPerson', Person);
                                this.clearForm();
                                this.closeModal();
                                this.$store.dispatch('showNotificacion', { title: 'Crear Persona', message: 'Nueva persona creada satisfactoriamente', type: 'success' });
                                _context.next = 37;
                                break;

                            case 15:
                                errors = [];

                                if (!this.response.data.errors) {
                                    _context.next = 36;
                                    break;
                                }

                                _iteratorNormalCompletion = true;
                                _didIteratorError = false;
                                _iteratorError = undefined;
                                _context.prev = 20;

                                for (_iterator = this.response.data.errors[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                    _error = _step.value;

                                    if (_error.code == "INVALID VALUE") errors.push("Value not valid for field Email");else if (_error.code) errors.push(_error.code);else errors.push(_error);
                                }_context.next = 28;
                                break;

                            case 24:
                                _context.prev = 24;
                                _context.t0 = _context["catch"](20);
                                _didIteratorError = true;
                                _iteratorError = _context.t0;

                            case 28:
                                _context.prev = 28;
                                _context.prev = 29;

                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }

                            case 31:
                                _context.prev = 31;

                                if (!_didIteratorError) {
                                    _context.next = 34;
                                    break;
                                }

                                throw _iteratorError;

                            case 34:
                                return _context.finish(31);

                            case 35:
                                return _context.finish(28);

                            case 36:
                                this.alertError = errors;

                            case 37:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[20, 24, 28, 36], [29,, 31, 35]]);
            }));

            function registerNewPerson() {
                return _ref.apply(this, arguments);
            }

            return registerNewPerson;
        }()
    }, {
        key: "closeModal",
        value: function closeModal() {
            $("#PersonModal").modal('toggle');
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return "<div key=\"PersonModal\" class=\"modal fade item-detail-modal\" id=\"PersonModal\" tabindex=\"-1\" role=\"dialog\">\n                  <div class=\"modal-dialog modal-lg\" role=\"document\">\n                      <div class=\"modal-content\">\n                          <div class=\"modal-header\">\n                              <h5 class=\"modal-title\">{{tr(\"Personal Details\")}}</h5>\n                              <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                  <span aria-hidden=\"true\">&times;</span>\n                              </button>\n                          </div>\n                          <div class=\"modal-body\">\n                                <div class=\"col-sm-12\">\n                                  <div ref='errorRegisterFrom' class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\" v-if=\"alertError\">\n                                       <strong>{{tr(alertError)}}!</strong>\n                                       <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" @click=\"alertError = null\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                        </button>\n                                   </div>\n                                </div>                        \n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"form-group\"> \n                                            <input autocomplete=\"none\" name=\"hidden\" type=\"text\" style=\"display:none;\">   \n                                            <label for=\"firstname\" class=\"form-label\">{{tr('Name')}}</label>\n                                            <input id=\"asjdlakhdlkashd\" v-model=\"personName\" type=\"text\" class=\"form-control\" autocomplete=\"off\">\n                                            <label for=\"lastname\" class=\"form-label\">{{tr('Last Name')}}</label>\n                                            <input id=\"personLastName\" v-model=\"personLastName\" type=\"text\" class=\"form-control\" autocomplete=\"off\">\n                                            <label for=\"personCountry\" class=\"form-label\">{{tr('Country')}}</label>\n                                            <selectLinkToComponent recordKey=\"modalPerson\" :table =\"'Country'\" :paste =\"'Code'\" :showField =\"'Name'\" :selected=\"personCountry\" @update-value=\"updateSelectValues\"> </selectLinkToComponent>\n                                            <label for=\"personMail\" class=\"form-label\">{{tr('Mail')}}</label>\n                                            <input id=\"personMail\" v-model=\"personEmail\" type=\"text\" class=\"form-control\"> \n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"form-group\">\n                                           <form autocomplete=\"off\" > \n                                               <input autocomplete=\"none\" name=\"hidden\" type=\"text\" style=\"display:none;\">\n                                               <label class=\"form-label\">{{tr('User Activation')}}</label>\n                                               <div class=\"custom-control custom-checkbox mb-3\">\n                                                  <input id=\"EnableCheck\" class=\"custom-control-input\" type=\"checkbox\" v-model=\"personEnabled\">\n                                                  <label for=\"EnableCheck\" class=\"custom-control-label\">{{tr('Enabled')}}</label>\n                                               </div>  \n                                               <label for=\"WebUser\" class=\"form-label\">{{tr('User Web')}}</label>\n                                               <input id=\"ajsdlasldkaljksd\" v-model=\"personWebUser\" type=\"text\" class=\"form-control\" autocomplete=\"off\">\n                                               <label for=\"WebPassword\" class=\"form-label\">{{tr('Password')}}</label>\n                                               <input id=\"aldapdlaslkdalskdd\" v-model=\"personWebPassword\" type=\"password\" class=\"form-control\" autocomplete=\"off\" >\n                                               <label for=\"WebPassword\" class=\"form-label\">{{tr('Web Access Group')}}</label>\n                                               <selectLinkToComponent recordKey=\"modalPerson\" :table=\"'WebAccessGroup'\" :paste=\"'Code'\" showField=\"Code\" :filters=\"{'IFNULL(Closed,0)__eq':'0'}\" :selected=\"personWebAccessGroup\" @update-value-full=\"updateSelectValues\"> </selectLinkToComponent>\n                                            </form> \n                                       </div>\n                                    </div>\n                                </div>     \n                          </div>\n                          <div class=\"modal-footer\">\n                                <button class=\"btn secondary-btn\" @click=\"registerNewPerson\">{{tr('Save')}}</button>                              \n                                <button class=\"btn secondary-btn\" @click=\"clearForm\">{{tr('Clear')}}</button>\n                          </div>\n                      </div>\n                  </div>\n              </div>";
        }
    }], [{
        key: "name",
        value: function name() {
            return "PersonModalComponent";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "PersonModalComponent";
        }
    }]);

    return PersonModalComponent;
}(Component);

PersonModalComponent.registerComponent();
//# sourceMappingURL=PersonModalComponent.js.map
