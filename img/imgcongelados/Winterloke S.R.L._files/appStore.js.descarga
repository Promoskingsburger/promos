"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/* global axios, __lodash__, _, moment, store, io, gapi, gapi, gapi, FB, globalRouter */
/* eslint-disable no-console */
//eslint-disable-next-line no-unused-vars
function replaceSpecialChars(str) {
    str = str.replace(/[ÀÁÂÃÄÅ]/, "A");
    str = str.replace(/[àáâãäå]/, "a");
    str = str.replace(/[ÈÉÊË]/, "E");
    str = str.replace(/[èéêë]/, "e");
    str = str.replace(/[ÌÍÎÏ]/, "I");
    str = str.replace(/[ìíîï]/, "i");
    str = str.replace(/[ÒÓÔÕÖ]/, "O");
    str = str.replace(/[òóôõö]/, "o");
    str = str.replace(/[ÙÚÛÜ]/, "U");
    str = str.replace(/[ùúûü]/, "u");
    return str;
}

// eslint-disable-next-line no-unused-vars
function score(target, query, fuzzyFactor) {
    var separator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : " ";

    //console.log("Custom Ofidirect");
    // If the string is equal to the word, perfect match.
    if (query === '') return 0;
    if (target === query) return 1;

    var runningScore = 0;
    var targetLower = replaceSpecialChars(target.toLowerCase().trim());
    var targetLen = target.length;
    var queryLower = replaceSpecialChars(query.toLowerCase().trim());
    var queryLen = query.length;
    var startAt = 0;
    var fuzzies = 1;
    var queryWords = queryLower.split(" ");
    var haveSubWords = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = queryWords[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var queryWord = _step.value;

            if (targetLower.indexOf(queryWord) !== -1) haveSubWords += 1;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    if (haveSubWords !== queryWords.length) return 0;
    // Calculate fuzzy factor
    fuzzyFactor = fuzzyFactor ? 1 - fuzzyFactor : 0;

    // Walk through query and add up scores.
    // Code duplication occurs to prevent checking fuzziness inside for loop
    for (var i = 0; i < queryLen; i += 1) {
        // Find next first case-insensitive match of a character.
        var idxOf = targetLower.indexOf(queryLower[i], startAt);

        if (idxOf === -1) {
            if (fuzzyFactor) {
                fuzzies += fuzzyFactor;
            } else {
                return 0;
            }
        } else {
            var charScore = 0;
            if (startAt === idxOf) {
                // Consecutive letter & start-of-string Bonus
                charScore = 0.7;
            } else {
                charScore = 0.1;

                // Acronym Bonus
                // Weighing Logic: Typing the first character of an acronym is as if you
                // preceded it with two perfect character matches.
                if (target[idxOf - 1] === ' ') {
                    charScore += 0.8;
                }
            }

            // Same case bonus.
            if (target[idxOf] === query[i]) {
                charScore += 0.1;
            }

            // Update scores and startAt position for next round of indexOf
            runningScore += charScore;
            startAt = idxOf + 1;
        }
    }

    // Reduce penalty for longer strings.
    var finalScore = 0.5 * (runningScore / targetLen + runningScore / queryLen) / fuzzies;

    if (queryLower[0] === targetLower[0] && finalScore < 0.85) {
        finalScore += 0.15;
    }

    if (queryLower[0] === targetLower[0] && finalScore < 0.85) {
        finalScore += 0.15;
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = queryWords[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _queryWord = _step2.value;

            if (targetLower.startsWith(queryLower + separator) || targetLower.endsWith(separator + queryLower)) {
                finalScore += 0.6;
            } else if (targetLower.startsWith(_queryWord)) finalScore += 0.3;else if (targetLower.indexOf(separator + _queryWord + separator) !== -1) finalScore += 0.6;else if (targetLower.indexOf(_queryWord + separator) !== -1 || targetLower.indexOf(separator + _queryWord) !== -1) finalScore += 0.3;else if (targetLower.indexOf(_queryWord) !== -1) finalScore += 0.25;
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    return finalScore;
}

//eslint-disable-next-line no-unused-vars
var uuidv4 = function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0,
            v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
    });
};

//eslint-disable-next-line no-unused-vars
function initWebSocket() {
    var socket = io.connect();
    socket.on("newSettings", function (event) {
        console.log("newSettings event", event);
        if (event.fields) store.commit('updateSetting', event.fields);
    });
    socket.on("stockChange", function (event) {
        console.log("Client Stock", event);
        if (event.record && event.record.fields) {
            var storeItem = store.getters.getItemByCode(event.record.fields.ArtCode);
            console.log(storeItem.Qty);
            if (storeItem) {
                storeItem.Qty = event.record.fields.Qty;
                if (event.record.fields.Reserved) storeItem.Qty -= event.record.fields.Reserved;
            }
            console.log(storeItem.Qty);
            store.state.items_store.set(event.record.fields.ArtCode, storeItem);
            window.$Event.$emit("stockChange", storeItem.Code);
        }
    });

    socket.on("serverOnline", function (msg) {
        store.commit('updateSocketReady', msg.success);
    });
    socket.on("itemInsert", function (msg) {
        console.log('Hello', JSON.parse(msg));
        store.dispatch('eventIOItem', { action: 'updateStore', value: JSON.parse(msg) });
    });
    socket.on("itemUpdate", function (msg) {
        console.log('Hello', JSON.parse(msg));
        store.dispatch('eventIOItem', { action: 'updateStore', value: JSON.parse(msg) });
    });
    socket.on("itemDelete", function (msg) {
        console.log('Hello Delete');
        store.dispatch('eventIOItem', { action: 'deleteFromStore', value: msg });
    });
}

//eslint-disable-next-line no-unused-vars
var ArrayToMap = function ArrayToMap(arrayObject, Key) {
    var keyMap = new Map();
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
        for (var _iterator3 = arrayObject[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var item = _step3.value;

            keyMap.set(item[Key], item);
        }
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }

    return keyMap;
};

// eslint-disable-next-line no-unused-vars
var GetSubCategoryPath = function GetSubCategoryPath(catCode, tail, Path) {
    var isSubCat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    if (catCode === tail.code) {
        var temp = Object.assign({}, tail);
        delete temp.children;
        Path.push(temp);
        isSubCat = true;
    }
    if (isSubCat) {
        if (tail.children) {
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = tail.children[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var children = _step4.value;

                    GetSubCategoryPath(catCode, children, Path, true);
                    var _temp = Object.assign({}, children);
                    delete _temp.children;
                    Path.push(_temp);
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        }
    } else {
        if (tail.children) {
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = tail.children[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _children = _step5.value;

                    GetSubCategoryPath(catCode, _children, Path, false);
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }
        }
    }
};

var GetCategoryPath = function GetCategoryPath(catCode, tail, Path) {
    if (!tail) return false;
    if (catCode === tail.code) {
        var temp = Object.assign({}, tail);
        delete temp.children;
        Path.push(temp);
        return true;
    } else {
        if (tail.children) {
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = tail.children[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var children = _step6.value;

                    var isPath = GetCategoryPath(catCode, children, Path);
                    if (isPath) {
                        var _temp2 = Object.assign({}, children);
                        delete _temp2.children;
                        if (_temp2.code !== catCode) Path.push(_temp2);
                        return true;
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }
        }
    }
    return false;
};

var ProcessItems = function ProcessItems(responseItems, state) {
    var skipVisility = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (!responseItems || responseItems.length === 0) return [];
    var fields = Object.keys(responseItems[0]);
    return window.__lodash__.map(responseItems, function (x) {
        var store_item = state.items_store.get(x.Code);
        x.carQty = 1;
        x.fieldToSearch = "";
        x.SearchScore = 0;
        x.BasePrice = x.Price;
        x.HiddenFilters = 0;
        x.SpecialPrice = store_item ? store_item.SpecialPrice : false;
        x.RowNet = null;
        x.RowTotal = null;
        x.VATPrice = null;
        x.isCalculate = false;
        x.visible = skipVisility;
        if (x.Qty < 0) x.Qty = 0;
        if (store_item) {
            x.isCalculate = store_item.isCalculate;
            x.Price = store_item.Price;
            if (store_item.RowNet) x.RowNet = store_item.RowNet;
            if (store_item.RowTotal) x.RowTotal = store_item.RowTotal;
            if (store_item.VATPrice) x.VATPrice = store_item.VATPrice;
        }
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
            for (var _iterator7 = fields[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var field = _step7.value;

                if (x[field]) x.fieldToSearch += x[field].toString().toLowerCase() + " *|* ";
            }
        } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion7 && _iterator7.return) {
                    _iterator7.return();
                }
            } finally {
                if (_didIteratorError7) {
                    throw _iteratorError7;
                }
            }
        }

        return x;
    });
};

var nativeSaveCarSession = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(state, from, items) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        return _context.abrupt("return", new Promise(function (resolve, reject) {
                            axios.post('/ecommerce/api/saveCarSession', { state: state, from: from, items: items }).then(function (response) {
                                resolve(response);
                            }).catch(function (error) {
                                reject(error);
                            });
                        }));

                    case 1:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee, undefined);
    }));

    return function nativeSaveCarSession(_x4, _x5, _x6) {
        return _ref.apply(this, arguments);
    };
}();

var saveCarSession = nativeSaveCarSession;
//const saveCarSession = _.debounce(nativeSaveCarSession, 500, { 'trailing': true });

var nativeGetTempSalerOrder = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(tempItems, payload) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.next = 2;
                        return axios.post('/ecommerce/api/getTempSalesOrder', {
                            items: tempItems,
                            extras: payload
                        });

                    case 2:
                        return _context2.abrupt("return", _context2.sent);

                    case 3:
                    case "end":
                        return _context2.stop();
                }
            }
        }, _callee2, undefined);
    }));

    return function nativeGetTempSalerOrder(_x7, _x8) {
        return _ref2.apply(this, arguments);
    };
}();

var getTempSalerOrder = nativeGetTempSalerOrder;
//const getTempSalerOrder = _.debounce(async (tempItems, payload)=> await nativeGetTempSalerOrder(tempItems, payload), 1000, { 'trailing': true });

// eslint-disable-next-line no-undef
axios.defaults.withCredentials = true;
var defaultState = {
    lastOrderAddress: null,
    varietiesCache: {},
    addressSetting: null,
    useVariations: true,
    logoutCountDownMinutes: 45,
    showWelcomeMessage: false,
    useAllGenders: false,
    customerMapFields: null,
    customerTaxReg: [],
    customerIdtypes: [],
    maxItemInCar: 100000000,
    phonePattern: "(?:(?:00)?(?:\\+)?549?)?0?(?:11|[2368]\\d)(?:(?=\\d{0,2}15)\\d{2}(?:00))??\\d{8}$",
    scoringAceptation: 0.55,
    screenState: false,
    screenMsg: "",
    socketReady: false,
    appState: 'loading',
    redirectAfterLogin: null,
    pageOffset: 0,
    orderSelected: null,
    orderBy: 'Price',
    orderDirection: 'asc',
    language: 'es',
    defaultItemSize: "module",
    afterLoginPath: 'profile',
    isLoggin: false,
    mustUpdateInfo: false,
    translateDict: {},
    synonyms: [],
    itemsPerPage: 36,
    session: null,
    customer: null,
    customerGifts: [],
    suggestionList: [],
    salesman: null,
    orderTemplate: null,
    classifications: [],
    show_CarModal: false,
    setting: null,
    filters: [],
    filtersObjects: new Map(),
    carPreserveInfo: false,
    cartStatus: 'view',
    carOrderTemplate: null,
    itemUpdate: 0,
    itemTimeFlag: 0,
    itemsFullLoader: false,
    useFacebook: true,
    useTwitter: true,
    useInstragram: false,
    homeSections: [{ PostionOrder: 0, SectionType: 'slider' }, { PostionOrder: 1, Title: 'Ofertas', SectionType: 'itemList' }, { PostionOrder: 2, Title: 'Más Vendidos', SectionType: 'itemList' }, { PostionOrder: 3, Title: "Nuevos Lanzamientos", SectionType: 'itemList' }],
    payTermList: [],
    paytermSuperchargeItemCode: null,
    discountItemCode: null,
    shipItemCode: null,
    shipModes: [],
    shipModeFlag: null,
    itemInHome: new Map(),
    items_in_map: new Map(),
    items_in_car: [],
    total_in_car: 0,
    items_store: new Map(),
    items: [],
    items_visible: [],
    priceDeal: null,
    DiscountDeal: null,
    favorites: [],
    favouritesOrders: [],
    carFlag: 0,
    cat_selected: null,
    cat_history: [],
    cat_history_temp: [],
    cat_list: [],
    cat_by_name: new Map(),
    cat_by_code: new Map(),
    open_categories: [],
    open_car_modal: false,
    orderView: "all",
    order_list: [],
    requireCenterCost: false,
    order_editable_states: [],
    order_Campaign: null,
    order_can_liberate: false,
    order_DelAddress: null,
    order_DelCity: null,
    order_DelProvinceCode: null,
    order_DelCountry: null,
    order_DelLocalityCode: null,
    order_DeliveryDate: moment().format('YYYY-MM-DD'),
    order_ShipMode: null,
    order_DelZipCode: null,
    order_Comment: null,
    order_PayTerm: null,
    order_DelDay: null,
    order_DelHour: null,
    order_Office: null,
    order_CenterCost: null,
    order_ReceptionManagerCode: null,
    order_CustPurchaseOrder: null,
    isAdmin: false,
    liberatorCodes: [],
    onlyModifiedCodes: [],
    CenterLiberators: [],
    CenterOnlyModifiedCodes: [],
    currentOrder: null,
    currentFavOrder: null,
    actionStack: [],
    mutationStack: [],
    vatCodeMap: new Map(),
    CustomerPersons: [],
    currentCustomerPerson: null,
    CustomerAddresses: [],
    selectLinkToOptions: {},
    OurSettingsCountry: null,
    daysByZone: {
        Monday: 0,
        Tuesday: 0,
        Wednesday: 0,
        Thursday: 0,
        Friday: 0,
        Saturday: 0,
        Sunday: 0
    },
    deliveryAddressConfirm: null,
    Avatar: null,
    autoLogout: null,
    giftCardItem: null,
    giftCardApplied: null,
    campaignApplied: null
};

// eslint-disable-next-line no-unused-vars
var defaultGetters = {
    getCategorySelectedPath: function getCategorySelectedPath(state) {
        return function (catCode) {
            var categoryPath = [];
            GetCategoryPath(catCode, state.cat_list[0], categoryPath);
            return categoryPath;
        };
    },
    getPayTermSurchargeItemCode: function getPayTermSurchargeItemCode(state) {
        if (state.payTermList.length > 0 && state.carOrderTemplate !== null && _.has(state.carOrderTemplate, ['fields', 'PayTerm'])) {
            var payTermInOrder = state.payTermList.find(function (x) {
                return x.Code === state.carOrderTemplate.fields.PayTerm;
            });
            if (payTermInOrder && payTermInOrder.SurchargeArtCode) {
                return payTermInOrder.SurchargeArtCode;
            }
        }
        return '';
    },
    getVairetiesFromCache: function getVairetiesFromCache(state) {
        return function (itemCode) {
            return state.varietiesCache[itemCode];
        };
    },
    getMaxStockByCode: function getMaxStockByCode(state) {
        return function (itemCode) {
            var giftCardItem = state.giftCardItem;
            if (giftCardItem && giftCardItem.fields.Code == itemCode) return -1;
            if (state.setting.ControlStockForSales) {
                var itemInStore = state.items_store.get(itemCode);
                if (itemInStore) {
                    if (itemInStore.Reserved) return itemInStore.Qty - itemInStore.Reserved;
                    return itemInStore.Qty;
                }
            }
            if (state.setting && state.setting.MaxItemsInCar) return state.setting.MaxItemsInCar;
            return state.maxItemInCar;
        };
    },
    getItemAmountInCar: function getItemAmountInCar(state) {
        return function (itemCode) {
            var itemInCar = state.items_in_car.filter(function (x) {
                return x.id === itemCode;
            });
            if (itemInCar.length == 1) return itemInCar[0].cant;
            return 0;
        };
    },
    showItemImageInDetail: function showItemImageInDetail(state) {
        if (state.setting) return state.setting.ShowItemImageInDetail;
        return false;
    },
    getGlobalCategories: function getGlobalCategories(state) {
        if (state.setting) return state.setting.HomeCategories.filter(function (x) {
            return x.fields.isShowShopMenu;
        }).map(function (y) {
            return y.fields.CatCode;
        });
        return [];
    },
    showCountryAddress: function showCountryAddress(state) {
        if (state.setting) return state.setting.UseMultipleCountries;
        return false;
    },
    AddressRequiredInRegister: function AddressRequiredInRegister(state) {
        if (state.setting) return state.setting.AddressRequiredInRegister;
        return false;
    },
    showSubTotalInOrderDetail: function showSubTotalInOrderDetail(state) {
        if (state.setting) return state.setting.ShowSubTotalInOrderDetail && state.setting.ShowPriceWithIVA;
        return false;
    },
    showPayTermSurchargeInOrder: function showPayTermSurchargeInOrder(state) {
        if (state.setting) return state.setting.ShowPayTermSurchargeInOrderDetail;
        return false;
    },
    showIVAInOrder: function showIVAInOrder(state) {
        if (state.setting) return state.setting.ShowIVAInOrderDetail;
        return false;
    },
    showTaxInOrder: function showTaxInOrder(state) {
        if (state.setting) return state.setting.ShowTaxInOrderDetail;
        return false;
    },
    getWelcomeMessage: function getWelcomeMessage(state) {
        if (state.setting && state.setting.WelcomePage) return state.showWelcomeMessage !== false && state.setting.WelcomePage;
        return false;
    },
    getCustomerExtraFields: function getCustomerExtraFields(state) {
        return function (customerType) {
            if (state.customerMapFields) return state.customerMapFields[customerType];
            return null;
        };
    },
    useShipCost: function useShipCost(state) {
        if (state.setting) return state.setting.CalculateDeliveryCost;
        return false;
    },
    useDiscountCoupon: function useDiscountCoupon(state) {
        if (state.setting) return state.setting.UseDiscountCoupon;
        return false;
    },
    getDiscountItemCode: function getDiscountItemCode(state) {
        return state.discountItemCode;
    },
    getShipItemCode: function getShipItemCode(state) {
        return state.shipItemCode;
    },
    getShipModes: function getShipModes(state) {
        return state.shipModes;
    },
    getAvatar: function getAvatar(state) {
        return state.Avatar;
    },
    getAddressConfirmation: function getAddressConfirmation(state) {
        return state.deliveryAddressConfirm;
    },
    getCustomerTaxReg: function getCustomerTaxReg(state) {
        return state.customerTaxReg;
    },
    getCustomerIdtypes: function getCustomerIdtypes(state) {
        return state.customerIdtypes;
    },
    useComplaintForm: function useComplaintForm(state) {
        if (state.setting) return state.setting.ComplaintFormAction;
        return false;
    },
    getPhoneMaskPattern: function getPhoneMaskPattern(state) {
        if (state.setting && state.setting.PhoneMaskValidator) return state.setting.PhoneMaskValidator;
        return state.phonePattern;
    },
    getMaxQtyItem: function getMaxQtyItem(state) {
        if (state.setting && state.setting.MaxItemsInCar) return state.setting.MaxItemsInCar;
        return state.maxItemInCar;
    },
    getItemQtyCar: function getItemQtyCar(state) {
        return function (itemCode) {
            var carQty = 0;
            if (state.carOrderTemplate && _.has(state.carOrderTemplate, ['fields', 'Items'])) {
                var _iteratorNormalCompletion8 = true;
                var _didIteratorError8 = false;
                var _iteratorError8 = undefined;

                try {
                    for (var _iterator8 = state.carOrderTemplate.fields.Items[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                        var item = _step8.value;

                        if (item.fields.ArtCode === itemCode) carQty += item.fields.Qty;
                    }
                } catch (err) {
                    _didIteratorError8 = true;
                    _iteratorError8 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion8 && _iterator8.return) {
                            _iterator8.return();
                        }
                    } finally {
                        if (_didIteratorError8) {
                            throw _iteratorError8;
                        }
                    }
                }
            } else if (state.items_in_car.length > 0) {
                var _iteratorNormalCompletion9 = true;
                var _didIteratorError9 = false;
                var _iteratorError9 = undefined;

                try {
                    for (var _iterator9 = state.items_in_car[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                        var _item = _step9.value;

                        if (_item.id === itemCode) carQty += _item.cant;
                    }
                } catch (err) {
                    _didIteratorError9 = true;
                    _iteratorError9 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion9 && _iterator9.return) {
                            _iterator9.return();
                        }
                    } finally {
                        if (_didIteratorError9) {
                            throw _iteratorError9;
                        }
                    }
                }
            }
            return carQty;
        };
    },
    showZeroPrice: function showZeroPrice(state) {
        if (state.setting) return !state.setting.ShowZeroPrice;
        return false;
    },
    getDaysByZone: function getDaysByZone(state) {
        return state.daysByZone;
    },
    ScreenState: function ScreenState(state) {
        return state.screenState;
    },
    getPayTerms: function getPayTerms(state) {
        if (state.setting) return state.setting.PayTermRow.map(function (x) {
            return x.fields.PayTermCode;
        });
        return [];
    },
    getOnlinePayTerms: function getOnlinePayTerms(state) {
        if (state.setting) return state.setting.PayTermRow.filter(function (x) {
            return x.fields.RequireOnlinePayment;
        }).map(function (x) {
            return x.fields.PayTermCode;
        });
        return [];
    },
    getHomeSections: function getHomeSections(state) {
        return state.homeSections;
    },
    showCategoryTree: function showCategoryTree(state) {
        if (state.setting != null) {
            return state.setting.ShowCategoryTree;
        } else return true;
    },
    getItemsFullLoader: function getItemsFullLoader(state) {
        return state.itemsFullLoader;
    },
    getOrderView: function getOrderView(state) {
        return state.orderView;
    },
    getOrderComment: function getOrderComment(state) {
        return state.order_Comment;
    },
    getDelZipCode: function getDelZipCode(state) {
        return state.order_DelZipCode;
    },
    getShipMode: function getShipMode(state) {
        return state.order_ShipMode;
    },
    getDelCity: function getDelCity(state) {
        return state.order_DelCity;
    },
    getDeliveryDate: function getDeliveryDate(state) {
        return state.order_DeliveryDate;
    },
    getDelProvince: function getDelProvince(state) {
        return state.order_DelProvinceCode;
    },
    getDelCountry: function getDelCountry(state) {
        return state.order_DelAddress;
    },
    getDelLocality: function getDelLocality(state) {
        return state.order_DelLocality;
    },
    getDelLocalityCode: function getDelLocalityCode(state) {
        return state.order_DelLocalityCode;
    },
    getDelAddress: function getDelAddress(state) {
        return state.order_DelAddress;
    },
    getOrderSelected: function getOrderSelected(state) {
        return state.orderSelected;
    },
    getMainColor: function getMainColor(state) {
        if (state.setting && state.setting.MainColor) {
            return state.setting.MainColor;
        } else return '#293a56';
    },
    getControlStock: function getControlStock(state) {
        if (state.setting) {
            return state.setting.ControlStockForSales;
        } else return false;
    },
    getSecundColor: function getSecundColor(state) {
        if (state.setting && state.setting.SecondColor) {
            return state.setting.SecondColor;
        } else return '#d85c81';
    },
    menuTitle: function menuTitle(state) {
        if (state.setting && state.setting.MenuTitle) {
            return state.setting.MenuTitle;
        } else return "öppen";
    },
    menuSubTitle: function menuSubTitle(state) {
        if (state.setting && state.setting.MenuSubTitle) {
            return state.setting.MenuSubTitle;
        } else return "ecommerce";
    },
    settingsIsLoaded: function settingsIsLoaded(state) {
        return !!state.setting;
    },
    showStock: function showStock(state) {
        if (state.setting) return state.setting.ShowStock;
        return false;
    },
    getIsLogin: function getIsLogin(state) {
        return state.isLoggin;
    },
    getReports: function getReports(state) {
        if (state.setting) return state.setting.ReportsRow.filter(function (x) {
            return !x.fields.isKPI;
        });
        return [];
    },
    getIndicators: function getIndicators(state) {
        if (state.setting) return state.setting.ReportsRow.filter(function (x) {
            return x.fields.isKPI;
        });
        return [];
    },
    getReportParameters: function getReportParameters(state) {
        return function (reportName) {
            var _iteratorNormalCompletion10 = true;
            var _didIteratorError10 = false;
            var _iteratorError10 = undefined;

            try {
                for (var _iterator10 = state.setting.ReportsRow.filter(function (x) {
                    return !x.fields.isKPI;
                })[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                    var report = _step10.value;

                    if (report.fields.ReportName === reportName) return report.fields.reportSpec ? report.fields.reportSpec : null;
                }
            } catch (err) {
                _didIteratorError10 = true;
                _iteratorError10 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion10 && _iterator10.return) {
                        _iterator10.return();
                    }
                } finally {
                    if (_didIteratorError10) {
                        throw _iteratorError10;
                    }
                }
            }

            return null;
        };
    },
    getIndicatorParameters: function getIndicatorParameters(state) {
        return function (reportName) {
            var _iteratorNormalCompletion11 = true;
            var _didIteratorError11 = false;
            var _iteratorError11 = undefined;

            try {
                for (var _iterator11 = state.setting.ReportsRow.filter(function (x) {
                    return x.fields.isKPI;
                })[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                    var report = _step11.value;

                    if (report.fields.ReportName === reportName) return report.fields.reportSpec ? report.fields.reportSpec : null;
                }
            } catch (err) {
                _didIteratorError11 = true;
                _iteratorError11 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion11 && _iterator11.return) {
                        _iterator11.return();
                    }
                } finally {
                    if (_didIteratorError11) {
                        throw _iteratorError11;
                    }
                }
            }

            return null;
        };
    },
    getReportTitle: function getReportTitle(state) {
        return function (reportName) {
            var _iteratorNormalCompletion12 = true;
            var _didIteratorError12 = false;
            var _iteratorError12 = undefined;

            try {
                for (var _iterator12 = state.setting.ReportsRow[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                    var report = _step12.value;

                    if (report.fields.ReportName === reportName) return report.fields.ReportTitle;
                }
            } catch (err) {
                _didIteratorError12 = true;
                _iteratorError12 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion12 && _iterator12.return) {
                        _iterator12.return();
                    }
                } finally {
                    if (_didIteratorError12) {
                        throw _iteratorError12;
                    }
                }
            }

            return 'Unknown Report';
        };
    },
    getOrderBy: function getOrderBy(state) {
        return state.orderBy;
    },
    getOrderDirection: function getOrderDirection(state) {
        return state.orderDirection;
    },
    getFilters: function getFilters(state) {
        return state.filters;
    },
    getOffset: function getOffset(state) {
        return state.pageOffset;
    },
    getItemPerPage: function getItemPerPage(state) {
        return state.itemsPerPage;
    },
    getClassications: function getClassications(state) {
        return state.classifications;
    },
    getCurrentOrder: function getCurrentOrder(state) {
        return state.currentOrder;
    },
    getCurrentFavOrder: function getCurrentFavOrder(state) {
        return state.currentFavOrder;
    },
    getCurrentCustomerPerson: function getCurrentCustomerPerson(state) {
        return state.currentCustomerPerson;
    },
    getOrderList: function getOrderList(state) {
        return state.order_list;
    },
    getOrderEditableStates: function getOrderEditableStates(state) {
        return state.order_editable_states;
    },
    getAppState: function getAppState(state) {
        return state.appState;
    },
    getCustomerPersons: function getCustomerPersons(state) {
        return state.CustomerPersons;
    },
    getCustomerAddresses: function getCustomerAddresses(state) {
        return state.CustomerAddresses;
    },
    getItemFilters: function getItemFilters(state) {
        if (state.setting && state.setting.ItemFilters) return state.setting.ItemFilters;else return [];
    },
    getHomeCategories: function getHomeCategories(state) {
        if (state.setting) return state.setting.HomeCategories;else return [];
    },
    getHomeItems: function getHomeItems(state) {
        //console.log('Getters',state.setting && state.setting.HomeItems)
        if (state.setting && state.setting.HomeItems) return state.setting.HomeItems;else return [];
    },
    showItemPrice: function showItemPrice(state) {
        return function (item) {
            var itemCode = void 0;
            if (item.id) itemCode = item.id;else itemCode = item.Code;
            var storeItem = state.items_store.get(itemCode);
            //let price = 0;
            //console.log(storeItem);
            if (storeItem) {
                var price = storeItem.Price;
                if (state.setting.ShowPriceWithIVA) if (storeItem.RowTotal) price = storeItem.RowTotal;else {
                    if (storeItem.RowNet) price = storeItem.RowNet;
                }
                //console.log('Price Detail', price, storeItem.Price, storeItem.RowNet, storeItem.RowTotal);
                return parseFloat(Math.round(price * 100) / 100).toFixed(2);
            }
            return null;
        };
    },
    getPriceToShow: function getPriceToShow(state) {
        if (state.setting) return state.setting.ShowPriceWithIVA;else return false;
    },
    trSynonyms: function trSynonyms(state) {
        return function (value) {
            if (state.synonyms.length > 0) {
                var _iteratorNormalCompletion13 = true;
                var _didIteratorError13 = false;
                var _iteratorError13 = undefined;

                try {
                    for (var _iterator13 = state.synonyms[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                        var _synon = _step13.value;

                        if (value.toLowerCase() === _synon.Keys.toLowerCase()) return _synon.ReplaceSet.toLowerCase();
                    }
                } catch (err) {
                    _didIteratorError13 = true;
                    _iteratorError13 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion13 && _iterator13.return) {
                            _iterator13.return();
                        }
                    } finally {
                        if (_didIteratorError13) {
                            throw _iteratorError13;
                        }
                    }
                }
            }return null;
        };
    },
    trWithParrams: function trWithParrams(state) {
        return function (value) {
            var trApply = state.translateDict[value[0]];
            //console.log('Translate Params',params);
            if (!trApply) {
                trApply = value[0];
            }

            for (var i = 1; i <= value.length; i++) {
                var subApplay = state.translateDict[value[i]] ? state.translateDict[value[i]] : value[i];
                trApply = trApply.replace("{{$" + i + "}}", subApplay);
            }
            return trApply;
        };
    },
    tr: function tr(state, getters) {
        return function (value) {
            if (Array.isArray(value)) return getters.trWithParrams(value);
            var trApply = state.translateDict[value];
            //console.log('Store Translate',value,trApply,state.translateDict);
            if (trApply) return trApply;
            return value;
        };
    },
    getCategoryDataByName: function getCategoryDataByName(state) {
        return function (name) {
            return state.cat_by_name.get(name);
        };
    },
    getCategoryDataByCode: function getCategoryDataByCode(state) {
        return function (code) {
            return state.cat_by_code.get(code);
        };
    },
    getopen_categories: function getopen_categories(state) {
        return state.open_categories;
    },
    getCarModal: function getCarModal(state) {
        return state.show_CarModal;
    },
    getCarStatus: function getCarStatus(state) {
        return state.cartStatus;
    },
    getSetting: function getSetting(state) {
        return state.setting;
    },
    getSettingItemOrdered: function getSettingItemOrdered(state) {
        if (state.setting) return state.setting.ItemOrdered;else return [];
    },
    getCarAmount: function getCarAmount(state) {
        if (state.carOrderTemplate && state.carOrderTemplate.fields) {
            if (state.setting.ShowPriceWithIVA) return state.carOrderTemplate.fields.Total;
            return state.carOrderTemplate.fields.SubTotal;
        }
        var amount = 0;
        //console.log(state.items_in_car,state.items_in_car.length);
        if (state.items_in_car.length > 0) {
            var _iteratorNormalCompletion14 = true;
            var _didIteratorError14 = false;
            var _iteratorError14 = undefined;

            try {
                for (var _iterator14 = state.items_in_car[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                    var item = _step14.value;

                    if (state.items_store.has(item.id)) {
                        amount += Math.abs(item.cant) * parseInt(state.items_store.get(item.id).Price);
                    }
                }
            } catch (err) {
                _didIteratorError14 = true;
                _iteratorError14 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion14 && _iterator14.return) {
                        _iterator14.return();
                    }
                } finally {
                    if (_didIteratorError14) {
                        throw _iteratorError14;
                    }
                }
            }
        }
        //console.log("total amount un card",amount);
        return amount;
    },
    getSession: function getSession(state) {
        return state.session;
    },
    getSalesMan: function getSalesMan(state) {
        return state.salesman;
    },
    getCustomer: function getCustomer(state) {
        return state.customer;
    },
    getCustomerGifts: function getCustomerGifts(state) {
        //return state.customerGifts
        return __lodash__.orderBy(state.customerGifts, state.orderBy, state.orderDirection);
    },
    getSuggestions: function getSuggestions(state) {
        //return state.suggestionList;
        return __lodash__.orderBy(state.suggestionList, state.orderBy, state.orderDirection);
    },
    getOrderTemplate: function getOrderTemplate(state) {
        return state.orderTemplate;
    },
    getUserOnlyModifier: function getUserOnlyModifier(state) {
        console.log('OJO OnlyModified ', state);
        return state.isOnlyModified;
        /*if (state.session)
             //return state.session.fields.OnlyModify === true;
        return false*/
    },
    getUserIsAdmin: function getUserIsAdmin(state) {
        return state.isAdmin;
    },
    orderCanLiberate: function orderCanLiberate(state) {
        return state.order_can_liberate;
    },
    getItems: function getItems(state) {
        return __lodash__.orderBy(state.items, state.orderBy, state.orderDirection);
    },
    getItemByCode: function getItemByCode(state) {
        return function (code) {
            return state.items_store.get(code);
        };
    },
    getItemsVisibles: function getItemsVisibles(state) {
        return __lodash__.orderBy(state.items_visible, state.orderBy, state.orderDirection);
    },
    /* No deberia estar permitido acceder
     getItemsStore:(state) => {
     return Array.from(state.items_store.values());
     },
     */
    getCategories: function getCategories(state) {
        return state.cat_list;
    },
    getCategoriesMap: function getCategoriesMap(state) {
        return state.cat_map;
    },
    getCategorySelected: function getCategorySelected(state) {
        return state.cat_selected;
    },
    getCategoriesHistory: function getCategoriesHistory(state) {
        return state.cat_history;
    },
    getFavorites: function getFavorites(state) {
        return state.favorites;
    },
    getFavoritesItems: function getFavoritesItems(state) {
        return state.favorites;
        /*let itemList = [];
        for ( let itemCode of state.favorites )
            itemList.push( state.items_store.get( itemCode ) );
        return itemList;*/
    },
    getItemCar: function getItemCar(state) {
        //console.log('items in Car',state.items_in_car)
        return state.items_in_car;
    },
    getItemCarCount: function getItemCarCount(state) {
        return state.items_in_car.length;
    },
    getItemCarAmount: function getItemCarAmount(state) {
        var carAmount = 0;
        state.items_in_car.map(function (item) {
            return carAmount += item.cant * item.item.Price;
        });
        return carAmount;
    },
    translate: function translate(state) {
        return function (text) {
            return state.translateDict[text] || text;
        };
    },
    getAllFavouritesOrders: function getAllFavouritesOrders(state) {
        return state.favouritesOrders;
    },
    getFavouriteOrderByName: function getFavouriteOrderByName(state) {
        return function (name) {
            return state.favouritesOrders.filter(function (x) {
                return x[0] === name;
            })[0];
        };
    },
    getSelectLinkToArray: function getSelectLinkToArray(state) {
        return state.selectLinkToOptions;
    },
    getOurSettingsCountry: function getOurSettingsCountry(state) {
        return state.OurSettingsCountry;
    },
    getSelectLinkToValue: function getSelectLinkToValue(state) {
        return function (name) {
            //console.log('StoreSelectLinkTo',state.selectLinkToOptions,name);
            if (Object.prototype.hasOwnProperty.call(state.selectLinkToOptions, name)) {
                return state.selectLinkToOptions[name];
            } else return "";
        };
    },
    getCurrency: function getCurrency(state) {
        if (state.setting) {
            if (state.setting.ShowCurrency) {
                if (state.setting.Currency) return state.setting.Currency;else {
                    if (state.priceDeal.priceDeal) return state.priceDeal.priceDeal.fields.Currency;else return false;
                }
            }
        }
        return false;
    },
    getGiftCardItem: function getGiftCardItem(state) {
        return state.giftCardItem;
    },
    getGiftCardApplied: function getGiftCardApplied(state) {
        return state.giftCardApplied;
    },
    getCampaignApplied: function getCampaignApplied(state) {
        return state.campaignApplied;
    },
    useGiftcard: function useGiftcard(state) {
        return state.setting.UseGiftCard;
    }
};

// eslint-disable-next-line no-unused-vars
var defaultActions = {
    editOrderRow: function editOrderRow(_ref3, updatedRow) {
        var state = _ref3.state,
            commit = _ref3.commit;

        var currentOrder = __lodash__.cloneDeep(state.currentOrder);
        var totalWithIVA = 0;
        var totalWithOutIVA = 0;
        var _iteratorNormalCompletion15 = true;
        var _didIteratorError15 = false;
        var _iteratorError15 = undefined;

        try {
            for (var _iterator15 = currentOrder.fields.Items[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                var item = _step15.value;

                if (item.fields.internalId === updatedRow.fields.internalId) {
                    item.fields.Qty = updatedRow.fields.Qty;
                }
                item.fields.RowNet = item.fields.Price * item.fields.Qty;
                item.fields.RowTotal = item.fields.VATPrice * item.fields.Qty;
                totalWithIVA += item.fields.RowTotal;
                totalWithOutIVA += item.fields.RowNet;
            }
        } catch (err) {
            _didIteratorError15 = true;
            _iteratorError15 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion15 && _iterator15.return) {
                    _iterator15.return();
                }
            } finally {
                if (_didIteratorError15) {
                    throw _iteratorError15;
                }
            }
        }

        currentOrder.fields.SubTotal = totalWithOutIVA;
        currentOrder.fields.Total = totalWithIVA;
        commit('updateCurrentOrder', currentOrder);
    },
    addVarietyToCar: function addVarietyToCar(_ref4, item) {
        var commit = _ref4.commit,
            state = _ref4.state,
            dispatch = _ref4.dispatch;

        dispatch('showNotificacion', { title: "Agregaste " + item.carQty + " art\xEDculos a tu carrito", message: "" + item.Name, type: 'info' });
        commit('updateItemToCar', item);
        dispatch('loadOrderTotals', {});
    },
    loadVarieties: function loadVarieties(_ref5, itemCode) {
        var commit = _ref5.commit,
            dispatch = _ref5.dispatch,
            getters = _ref5.getters,
            state = _ref5.state;

        return new Promise(function (resolve, reject) {
            if (!state.varietiesCache[itemCode]) axios.get("/ecommerce/api/getItemVarieties/" + encodeURI(itemCode)).then(function (response) {
                state.varietiesCache[itemCode] = response.data;
                resolve(response.data);
            });else return state.varietiesCache[itemCode];
        });
    },
    loadPromotionInfo: function loadPromotionInfo(_ref6, filters) {
        var commit = _ref6.commit,
            dispatch = _ref6.dispatch,
            getters = _ref6.getters,
            state = _ref6.state;

        return new Promise(function (resolve, reject) {
            axios.post('/ecommerce/api/loadPromotionData', filters).then(function (response) {
                if (response.data.error) {
                    dispatch('showNotificacion', { title: "Promotion", message: [response.data.error, "Promotion"], type: 'warning' });
                    resolve(response.data.images);
                } else {
                    var itemsInStorage = [];
                    var _iteratorNormalCompletion16 = true;
                    var _didIteratorError16 = false;
                    var _iteratorError16 = undefined;

                    try {
                        for (var _iterator16 = response.data.items[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                            var item = _step16.value;

                            if (state.items_store.has(item.Code)) itemsInStorage.push(state.items_store.get(item.Code));
                        }
                    } catch (err) {
                        _didIteratorError16 = true;
                        _iteratorError16 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion16 && _iterator16.return) {
                                _iterator16.return();
                            }
                        } finally {
                            if (_didIteratorError16) {
                                throw _iteratorError16;
                            }
                        }
                    }

                    if (itemsInStorage.length) {
                        dispatch('updatePrices', itemsInStorage).then(function () {
                            commit('updatesItemsList', itemsInStorage);
                            resolve(response.data.images);
                        });
                    } else {
                        resolve(response.data.images);
                    }
                }
            }).catch(function (error) {
                console.log('Error response in Load PaymentData', error);
                reject(error);
            });
        });
    },
    changeCustomerTaxReg: function changeCustomerTaxReg(_ref7, customerTaxReg) {
        var commit = _ref7.commit;

        commit('setCustomerTaxReg', customerTaxReg);
    },
    changeCustomerIdtypes: function changeCustomerIdtypes(_ref8, customerIdtypes) {
        var commit = _ref8.commit;

        commit('setCustomerIdtypes', customerIdtypes);
    },
    loadPaymentData: function loadPaymentData(_ref9, filters) {
        var state = _ref9.state;

        return new Promise(function (resolve, reject) {
            axios.post('/ecommerce/api/loadPaymentData', filters).then(function (response) {
                resolve(response.data);
            }).catch(function (error) {
                console.log('Error response in Load PaymentData', error);
                reject(error);
            });
        });
    },
    centerCostRequire: function centerCostRequire(_ref10, requireCenterCost) {
        var state = _ref10.state,
            commit = _ref10.commit;

        commit('changeCenterCostRequire', requireCenterCost);
    },
    toogleLockScreen: function toogleLockScreen(_ref11, lockMsg) {
        var state = _ref11.state,
            commit = _ref11.commit;

        commit('updateLockScreen', { visible: !state.screenState, msg: lockMsg });
    },

    eventIOItem: function eventIOItem(_ref12, event) {
        var state = _ref12.state,
            commit = _ref12.commit,
            dispatch = _ref12.dispatch;

        if (Number.isInteger(Number.parseInt(event.value))) dispatch('showNotificacion', { title: "Updating  Item", message: "Item Number " + event.value, type: 'info' });else {
            dispatch('showNotificacion', { title: "Updating  Item", message: "Item Number " + event.value.Code, type: 'info' });
        }
        commit('eventIOItem', event);
    },
    updatePricesBackGroup: function () {
        var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref14, itemList) {
            var commit = _ref14.commit,
                state = _ref14.state,
                getters = _ref14.getters,
                dispatch = _ref14.dispatch;

            var transformPrice, codes, _iteratorNormalCompletion17, _didIteratorError17, _iteratorError17, _iterator17, _step17, item, _x11, PersonCode, CustomerCode, sendCodes, url, _step18, sendCodesCounter, itemByRequest, itemToCommits, initStep, endStep, sendInRequest, response, responseParsed, _iteratorNormalCompletion18, _didIteratorError18, _iteratorError18, _iterator18, _step19, newX, x;

            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            if (!(state.setting && !state.setting.UpdatePriceInBackground || !state.setting)) {
                                _context3.next = 2;
                                break;
                            }

                            return _context3.abrupt("return");

                        case 2:
                            transformPrice = function transformPrice(item) {
                                var price = item.Price;
                                if (store.getters.getPriceToShow) price = item.RowTotal;else {
                                    if (item.RowNet) price = item.RowNet;
                                }
                                item.Price = parseFloat(Math.round((price + 0.00001) * 100) / 100);
                            };

                            codes = [];
                            //let orderItems =  __lodash__.orderBy( itemList, state.orderBy,state.orderDirection );

                            _iteratorNormalCompletion17 = true;
                            _didIteratorError17 = false;
                            _iteratorError17 = undefined;
                            _context3.prev = 7;
                            for (_iterator17 = itemList[Symbol.iterator](); !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                                item = _step17.value;
                                _x11 = state.items_store.get(item.Code);

                                if (_x11 && _x11["isCalculate"] === false) codes.push(_x11.Code);
                            }

                            _context3.next = 15;
                            break;

                        case 11:
                            _context3.prev = 11;
                            _context3.t0 = _context3["catch"](7);
                            _didIteratorError17 = true;
                            _iteratorError17 = _context3.t0;

                        case 15:
                            _context3.prev = 15;
                            _context3.prev = 16;

                            if (!_iteratorNormalCompletion17 && _iterator17.return) {
                                _iterator17.return();
                            }

                        case 18:
                            _context3.prev = 18;

                            if (!_didIteratorError17) {
                                _context3.next = 21;
                                break;
                            }

                            throw _iteratorError17;

                        case 21:
                            return _context3.finish(18);

                        case 22:
                            return _context3.finish(15);

                        case 23:
                            PersonCode = state.session ? state.session.Code : null;
                            CustomerCode = state.customer ? state.customer.Code : null;
                            sendCodes = codes;

                            if (!(sendCodes.length > 0)) {
                                _context3.next = 64;
                                break;
                            }

                            url = '/ecommerce/api/getPrices';
                            _step18 = 0;
                            sendCodesCounter = 0;
                            itemByRequest = 100;
                            itemToCommits = [];

                            //let profilingTest = +uuidv4();

                        case 32:
                            if (!(sendCodesCounter < sendCodes.length)) {
                                _context3.next = 63;
                                break;
                            }

                            initStep = itemByRequest * _step18;
                            endStep = initStep + itemByRequest;
                            sendInRequest = sendCodes.slice(initStep, endStep);
                            _context3.next = 38;
                            return axios.post(url, { artCodes: sendInRequest, personCode: PersonCode, customerCode: CustomerCode });

                        case 38:
                            response = _context3.sent;
                            responseParsed = response.data;
                            _iteratorNormalCompletion18 = true;
                            _didIteratorError18 = false;
                            _iteratorError18 = undefined;
                            _context3.prev = 43;

                            for (_iterator18 = sendInRequest[Symbol.iterator](); !(_iteratorNormalCompletion18 = (_step19 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
                                newX = _step19.value;
                                x = void 0;

                                if (newX instanceof Object && newX.Code) x = state.items_store.get(newX.Code);else x = state.items_store.get(newX);
                                if (x) {
                                    x.isCalculate = true;
                                    if (responseParsed[x.Code]) {
                                        x.Price = responseParsed[x.Code].Price;
                                        x.VATPrice = responseParsed[x.Code].VATPrice;
                                        x.RowNet = responseParsed[x.Code].RowNet;
                                        x.RowTotal = responseParsed[x.Code].RowTotal;
                                        x.VATPrice = responseParsed[x.Code].VATPrice;
                                        x.visible = true;
                                        transformPrice(x);
                                    }
                                    //state.items_store.set(x.Code, x);
                                    //commit('updateSingleItemStore',x);
                                    itemToCommits.push(x);
                                } else {
                                    dispatch('changeCartQty', { itemCode: newX, action: 'delete' });
                                    console.log('Item sin precios investigar', newX.Code, newX);
                                }
                            }
                            _context3.next = 51;
                            break;

                        case 47:
                            _context3.prev = 47;
                            _context3.t1 = _context3["catch"](43);
                            _didIteratorError18 = true;
                            _iteratorError18 = _context3.t1;

                        case 51:
                            _context3.prev = 51;
                            _context3.prev = 52;

                            if (!_iteratorNormalCompletion18 && _iterator18.return) {
                                _iterator18.return();
                            }

                        case 54:
                            _context3.prev = 54;

                            if (!_didIteratorError18) {
                                _context3.next = 57;
                                break;
                            }

                            throw _iteratorError18;

                        case 57:
                            return _context3.finish(54);

                        case 58:
                            return _context3.finish(51);

                        case 59:
                            _step18 = _step18 + 1;
                            sendCodesCounter = sendCodesCounter + itemByRequest;
                            _context3.next = 32;
                            break;

                        case 63:
                            dispatch('updateItemsInStore', itemToCommits);

                        case 64:
                        case "end":
                            return _context3.stop();
                    }
                }
            }, _callee3, this, [[7, 11, 15, 23], [16,, 18, 22], [43, 47, 51, 59], [52,, 54, 58]]);
        }));

        function updatePricesBackGroup(_x9, _x10) {
            return _ref13.apply(this, arguments);
        }

        return updatePricesBackGroup;
    }(),
    updatePrices: function () {
        var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref16, itemList) {
            var commit = _ref16.commit,
                state = _ref16.state,
                getters = _ref16.getters,
                dispatch = _ref16.dispatch;

            var transformPrice, codes, _iteratorNormalCompletion19, _didIteratorError19, _iteratorError19, _iterator19, _step20, item, _x15, PersonCode, CustomerCode, sendCodes, url, _step21, sendCodesCounter, itemByRequest, firstPriceCommit, itemToCommits, fastCharge, _iteratorNormalCompletion20, _didIteratorError20, _iteratorError20, _iterator20, _step22, itemCode, x, initStep, endStep, sendInRequest, response, responseParsed, _iteratorNormalCompletion21, _didIteratorError21, _iteratorError21, _iterator21, _step23, newX, _x14;

            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            transformPrice = function transformPrice(item) {
                                var price = item.Price;
                                if (store.getters.getPriceToShow) price = item.RowTotal;else {
                                    if (item.RowNet) price = item.RowNet;
                                }
                                item.Price = parseFloat(Math.round((price + 0.00001) * 100) / 100);
                            };

                            codes = [];
                            //let orderItems =  __lodash__.orderBy( itemList, state.orderBy,state.orderDirection );

                            _iteratorNormalCompletion19 = true;
                            _didIteratorError19 = false;
                            _iteratorError19 = undefined;
                            _context4.prev = 5;
                            for (_iterator19 = itemList[Symbol.iterator](); !(_iteratorNormalCompletion19 = (_step20 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
                                item = _step20.value;
                                _x15 = state.items_store.get(item.Code);
                                //console.log('Items in State',x)

                                if (_x15 && _x15["isCalculate"] === false) codes.push(_x15.Code);
                            }

                            _context4.next = 13;
                            break;

                        case 9:
                            _context4.prev = 9;
                            _context4.t0 = _context4["catch"](5);
                            _didIteratorError19 = true;
                            _iteratorError19 = _context4.t0;

                        case 13:
                            _context4.prev = 13;
                            _context4.prev = 14;

                            if (!_iteratorNormalCompletion19 && _iterator19.return) {
                                _iterator19.return();
                            }

                        case 16:
                            _context4.prev = 16;

                            if (!_didIteratorError19) {
                                _context4.next = 19;
                                break;
                            }

                            throw _iteratorError19;

                        case 19:
                            return _context4.finish(16);

                        case 20:
                            return _context4.finish(13);

                        case 21:
                            PersonCode = state.session ? state.session.Code : null;
                            CustomerCode = state.customer ? state.customer.Code : null;
                            //let send = 0;

                            sendCodes = codes;
                            //let maxItems = 5000;
                            //let minLength = Math.min( sendCodes.length,maxItems );
                            //console.log('Items to Update in BackGroup',sendCodes);

                            commit('updateAppState', 'loading');

                            if (!(sendCodes.length > 0)) {
                                _context4.next = 93;
                                break;
                            }

                            url = '/ecommerce/api/getPrices';
                            _step21 = 0;
                            sendCodesCounter = 0;
                            itemByRequest = state.items_store.size / 2;
                            firstPriceCommit = true;
                            itemToCommits = [];

                            if (!(state.orderBy !== "Price")) {
                                _context4.next = 54;
                                break;
                            }

                            fastCharge = [];
                            _iteratorNormalCompletion20 = true;
                            _didIteratorError20 = false;
                            _iteratorError20 = undefined;
                            _context4.prev = 37;

                            for (_iterator20 = sendCodes[Symbol.iterator](); !(_iteratorNormalCompletion20 = (_step22 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
                                itemCode = _step22.value;
                                x = state.items_store.get(itemCode);

                                if (x) {
                                    x.isCalculate = true;
                                    x.visible = true;
                                    //commit('updateSingleItemStore',x);
                                    fastCharge.push(x);
                                }
                            }
                            _context4.next = 45;
                            break;

                        case 41:
                            _context4.prev = 41;
                            _context4.t1 = _context4["catch"](37);
                            _didIteratorError20 = true;
                            _iteratorError20 = _context4.t1;

                        case 45:
                            _context4.prev = 45;
                            _context4.prev = 46;

                            if (!_iteratorNormalCompletion20 && _iterator20.return) {
                                _iterator20.return();
                            }

                        case 48:
                            _context4.prev = 48;

                            if (!_didIteratorError20) {
                                _context4.next = 51;
                                break;
                            }

                            throw _iteratorError20;

                        case 51:
                            return _context4.finish(48);

                        case 52:
                            return _context4.finish(45);

                        case 53:
                            dispatch('updateItemsInStore', fastCharge);

                        case 54:
                            if (!(sendCodesCounter < sendCodes.length)) {
                                _context4.next = 92;
                                break;
                            }

                            initStep = itemByRequest * _step21 < sendCodes.length ? itemByRequest * _step21 : sendCodes.length;
                            endStep = initStep + itemByRequest;
                            sendInRequest = sendCodes.slice(initStep, endStep);
                            _context4.next = 60;
                            return axios.post(url, { artCodes: sendInRequest, personCode: PersonCode, customerCode: CustomerCode });

                        case 60:
                            response = _context4.sent;
                            responseParsed = response.data;
                            _iteratorNormalCompletion21 = true;
                            _didIteratorError21 = false;
                            _iteratorError21 = undefined;
                            _context4.prev = 65;

                            for (_iterator21 = sendInRequest[Symbol.iterator](); !(_iteratorNormalCompletion21 = (_step23 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
                                newX = _step23.value;
                                _x14 = void 0;

                                if (newX instanceof Object && newX.Code) _x14 = state.items_store.get(newX.Code);else _x14 = state.items_store.get(newX);
                                if (_x14) {
                                    _x14.isCalculate = true;
                                    if (responseParsed[_x14.Code]) {
                                        _x14.Price = responseParsed[_x14.Code].Price;
                                        _x14.VATPrice = responseParsed[_x14.Code].VATPrice;
                                        _x14.RowNet = responseParsed[_x14.Code].RowNet;
                                        _x14.RowTotal = responseParsed[_x14.Code].RowTotal;
                                        _x14.VATPrice = responseParsed[_x14.Code].VATPrice;
                                        transformPrice(_x14);
                                        _x14.visible = !((!_x14.Price || _x14.Price === 0) && state.setting.ShowZeroPrice);
                                    }
                                    //state.items_store.set(x.Code, x);
                                    //commit('updateSingleItemStore',x);
                                    itemToCommits.push(_x14);
                                } else {
                                    console.log('Item sin precios investigar', newX.Code, newX);
                                }
                            }
                            _context4.next = 73;
                            break;

                        case 69:
                            _context4.prev = 69;
                            _context4.t2 = _context4["catch"](65);
                            _didIteratorError21 = true;
                            _iteratorError21 = _context4.t2;

                        case 73:
                            _context4.prev = 73;
                            _context4.prev = 74;

                            if (!_iteratorNormalCompletion21 && _iterator21.return) {
                                _iterator21.return();
                            }

                        case 76:
                            _context4.prev = 76;

                            if (!_didIteratorError21) {
                                _context4.next = 79;
                                break;
                            }

                            throw _iteratorError21;

                        case 79:
                            return _context4.finish(76);

                        case 80:
                            return _context4.finish(73);

                        case 81:
                            if (!(state.orderBy !== "Price" && firstPriceCommit)) {
                                _context4.next = 88;
                                break;
                            }

                            _context4.next = 84;
                            return dispatch('updateItemsInStore', itemToCommits);

                        case 84:
                            commit('updateItemFlag');
                            commit('updateAppState', 'fast-ready');
                            itemToCommits = [];
                            firstPriceCommit = false;

                        case 88:
                            //console.timeEnd('BackGround Load Prices'+step);
                            /*console.time('BackGround Sleep Prices'+step)
                            //await sleep(3000);
                            console.timeEnd('BackGround Sleep Prices'+step)*/
                            _step21 = _step21 + 1;
                            sendCodesCounter = sendCodesCounter + itemByRequest;
                            _context4.next = 54;
                            break;

                        case 92:
                            dispatch('updateItemsInStore', itemToCommits);
                            //console.timeEnd(`CalculatingPrice-${profilingTest}`);

                        case 93:
                            commit('updateItemFlag');
                            commit('updateAppState', 'ready');
                            commit('updateCarAmount', getters);

                        case 96:
                        case "end":
                            return _context4.stop();
                    }
                }
            }, _callee4, this, [[5, 9, 13, 21], [14,, 16, 20], [37, 41, 45, 53], [46,, 48, 52], [65, 69, 73, 81], [74,, 76, 80]]);
        }));

        function updatePrices(_x12, _x13) {
            return _ref15.apply(this, arguments);
        }

        return updatePrices;
    }(),
    updatePricesold: function updatePricesold(_ref17, newItems) {
        var commit = _ref17.commit,
            state = _ref17.state,
            getters = _ref17.getters,
            dispatch = _ref17.dispatch;

        var transformPrice = function transformPrice(item) {
            var price = item.Price;
            if (store.getters.getPriceToShow) price = item.RowTotal;else {
                if (item.RowNet) price = item.RowNet;
            }
            item.Price = parseFloat(Math.round((price + 0.00001) * 100) / 100);
        };
        var codes = [];
        var _iteratorNormalCompletion22 = true;
        var _didIteratorError22 = false;
        var _iteratorError22 = undefined;

        try {
            for (var _iterator22 = newItems[Symbol.iterator](), _step24; !(_iteratorNormalCompletion22 = (_step24 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
                var x = _step24.value;

                if (x && x["isCalculate"] === false && x['Code']) {
                    codes.push(x.Code);
                }
                /*else{
                    if(!x['Code'])
                        console.log('item with erro',x);
                }*/
            }
        } catch (err) {
            _didIteratorError22 = true;
            _iteratorError22 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion22 && _iterator22.return) {
                    _iterator22.return();
                }
            } finally {
                if (_didIteratorError22) {
                    throw _iteratorError22;
                }
            }
        }

        var PersonCode = state.session ? state.session.Code : null;
        var CustomerCode = state.customer ? state.customer.Code : null;
        //let send = 0;
        var sendCodes = codes;
        //console.log('Send codes', sendCodes)
        //let maxItems = 1000;
        //let minLength = Math.min( sendCodes.length, maxItems );
        if (sendCodes.length > 0) {
            var url = '/ecommerce/api/getPrices';
            var params = { artCodes: sendCodes, personCode: PersonCode, customerCode: CustomerCode };
            commit('updateAppState', 'loading');
            axios.post(url, params).then(function (response) {
                commit('updateAppState', 'loading');
                var responseParsed = response.data;
                var _iteratorNormalCompletion23 = true;
                var _didIteratorError23 = false;
                var _iteratorError23 = undefined;

                try {
                    for (var _iterator23 = newItems[Symbol.iterator](), _step25; !(_iteratorNormalCompletion23 = (_step25 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
                        var newX = _step25.value;

                        var x = state.items_store.get(newX.Code);
                        if (responseParsed[x.Code]) {
                            x.Price = responseParsed[x.Code].Price;
                            x.VATPrice = responseParsed[x.Code].VATPrice;
                            x.RowNet = responseParsed[x.Code].RowNet;
                            x.RowTotal = responseParsed[x.Code].RowTotal;
                            x.VATPrice = responseParsed[x.Code].VATPrice;
                            x.isCalculate = true;
                            if (!x.Price && state.setting.ShowZeroPrice) {
                                if (!state.session) x.visible = false;else x.visible = !!responseParsed[x.Code].IsPriceList;
                            } else x.visible = true;
                            transformPrice(x);
                            state.items_store.set(x.Code, x);
                        }
                    }
                } catch (err) {
                    _didIteratorError23 = true;
                    _iteratorError23 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion23 && _iterator23.return) {
                            _iterator23.return();
                        }
                    } finally {
                        if (_didIteratorError23) {
                            throw _iteratorError23;
                        }
                    }
                }

                commit('updateItemFlag');
                commit('updateCarAmount', getters);
                commit('updatesItemsList', newItems);
                commit('updateAppState', 'ready');
            }).catch(function (err) {
                console.log('Error in Fetch', err);
                commit('updateAppState', 'ready');
                commit('updateItemFlag');
            });
        }
    },
    beforeChangeItems: function beforeChangeItems(_ref18, newItems) {
        var commit = _ref18.commit,
            state = _ref18.state,
            getters = _ref18.getters,
            dispatch = _ref18.dispatch;

        //Resetear el listado de Artículos
        commit('updatesPageOffset', 0);
        //console.log(newItems);
        dispatch('updatePrices', newItems).then(function () {
            commit('updatesItemsList', newItems);
            commit('updateItemFlag');
            commit('updateCarAmount', getters);
        });
        //commit('updateAppState', 'ready');
    },
    addGenericSearch: function addGenericSearch(_ref19) {
        var commit = _ref19.commit,
            state = _ref19.state,
            dispatch = _ref19.dispatch;

        commit('clearFilterHides');
        commit('clearItemList');
        commit('updateAppState', 'loading');
        var newitems = [];
        var itemStoreList = Array.from(state.items_store.values());
        var maxPost = itemStoreList.length - 1;
        for (var x = 0; x < 24; x++) {
            var randPost = Math.floor(Math.random() * maxPost) + 1;
            newitems.push(itemStoreList[randPost]);
        }
        dispatch('beforeChangeItems', newitems);
    },
    addGlobalFilter: function addGlobalFilter(_ref20, filter) {
        var commit = _ref20.commit,
            state = _ref20.state,
            getters = _ref20.getters,
            dispatch = _ref20.dispatch;

        commit('clearItemList');
        commit('restoreFilter');
        var newitems = [];
        var _iteratorNormalCompletion24 = true;
        var _didIteratorError24 = false;
        var _iteratorError24 = undefined;

        try {
            for (var _iterator24 = state.items_store.keys()[Symbol.iterator](), _step26; !(_iteratorNormalCompletion24 = (_step26 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
                var key = _step26.value;

                var isPresent = RegExp(filter.label, 'gi');
                var x = state.items_store.get(key);
                if (state.useVariations && x.Father) continue;
                try {
                    var isVisible = false;
                    switch (filter.type) {
                        case "globalClassification":
                            isVisible = Object.prototype.hasOwnProperty.call(x.ClassificationPath, filter.label);
                            break;
                        case "inputSearch":
                            {
                                x.SearchScore = 0;
                                isVisible = eval(filter.condition) === filter.result;
                                break;
                            }
                        case "rangeFilter":
                        case "genericFilter":
                            isVisible = eval(filter.condition) === filter.result;
                            break;
                        default:
                            if (x[filter.filterField] != null) {
                                isVisible = isPresent.test(x[filter.filterField]);
                            }
                            break;
                    }
                    if (isVisible) {
                        newitems.push(x);
                    }
                } catch (err) {
                    console.group(x.Code);
                    console.log('Error filter item');
                    console.log("Item", x);
                    console.log('Filter', filter);
                    console.log('Error', err);
                    console.groupEnd(x.Code);
                }
            }
        } catch (err) {
            _didIteratorError24 = true;
            _iteratorError24 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion24 && _iterator24.return) {
                    _iterator24.return();
                }
            } finally {
                if (_didIteratorError24) {
                    throw _iteratorError24;
                }
            }
        }

        if (filter.type === "inputSearch") {
            commit('setOrderBy', 'SearchScore');
            commit('setOrderDirection', 'desc');
        }

        if (filter.type === "globalClassification") {
            dispatch('updateCategory', getters.getCategoryDataByCode(filter.label));
        }
        dispatch('beforeChangeItems', newitems);
        commit('addFilter', filter);
    },
    addFilter: function addFilter(_ref21, filter) {
        var commit = _ref21.commit,
            state = _ref21.state,
            getters = _ref21.getters,
            dispatch = _ref21.dispatch;

        if (!state.filtersObjects.has(filter.name)) {
            var filterItems = state.items;
            var _iteratorNormalCompletion25 = true;
            var _didIteratorError25 = false;
            var _iteratorError25 = undefined;

            try {
                for (var _iterator25 = filterItems[Symbol.iterator](), _step27; !(_iteratorNormalCompletion25 = (_step27 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {
                    var x = _step27.value;

                    if (x.visible === true) {
                        var isPresent = RegExp(filter.value, 'gi');
                        try {
                            switch (filter.type) {
                                case "classificationFilter":
                                    isPresent = RegExp(filter.code, 'gi');
                                    x.visible = isPresent.test(x[filter.filterField]);
                                    break;
                                case "valueFilter":
                                    if (x.VariantionData) {
                                        try {
                                            x.visible = eval(filter.condition) === filter.result;
                                        } catch (err) {
                                            x.visible = false;
                                        }
                                    }
                                    break;
                                case "rangeFilter":
                                case "multivalue":
                                    x.visible = eval(filter.condition) === filter.result;
                                    break;
                                default:
                                    if (x[filter.filterField] != null) {
                                        x.visible = isPresent.test(x[filter.filterField]);
                                    }
                                    break;
                            }
                        } catch (err) {
                            x.visible = false;
                        }
                        if (!x.visible && !filter.hiddens.has(x.Code)) {
                            filter.hiddens.set(x.Code, true);
                            x.HiddenFilters += 1;
                        }
                        if (state.setting.ShowZeroPrice) {
                            if (x.Price === 0 || !x.Price) {
                                filter.hiddens.set(x.Code, true);
                                x.visible = false;
                                x.HiddenFilters -= 1;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError25 = true;
                _iteratorError25 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion25 && _iterator25.return) {
                        _iterator25.return();
                    }
                } finally {
                    if (_didIteratorError25) {
                        throw _iteratorError25;
                    }
                }
            }

            commit('addFilter', filter);
            commit('updatesItemsList', filterItems);
            commit('updateItemFlag');
        } else {
            var _filterItems = state.items;
            var storeFilter = state.filtersObjects.get(filter.name);
            var _iteratorNormalCompletion26 = true;
            var _didIteratorError26 = false;
            var _iteratorError26 = undefined;

            try {
                for (var _iterator26 = _filterItems[Symbol.iterator](), _step28; !(_iteratorNormalCompletion26 = (_step28 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {
                    var _x16 = _step28.value;

                    if (storeFilter.hiddens && storeFilter.hiddens.has(_x16.Code)) {
                        if (_x16.HiddenFilters > 0) _x16.HiddenFilters -= 1;
                    }
                    if (state.setting.ShowZeroPrice) {
                        if (_x16.Price !== 0) _x16.visible = _x16.HiddenFilters === 0;
                    } else _x16.visible = _x16.HiddenFilters === 0;
                }
            } catch (err) {
                _didIteratorError26 = true;
                _iteratorError26 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion26 && _iterator26.return) {
                        _iterator26.return();
                    }
                } finally {
                    if (_didIteratorError26) {
                        throw _iteratorError26;
                    }
                }
            }

            dispatch('removeFilter', filter.name);
            if (state.cat_selected) dispatch('updateCategory', null);
            commit('updatesItemsList', _filterItems);
            commit('updateItemFlag');
        }
    },
    newFilter: function newFilter(_ref22, filter) {
        var commit = _ref22.commit,
            state = _ref22.state,
            dispatch = _ref22.dispatch;

        state.filters = [];
        state.filtersObjects = new Map();
        state.filters.push(filter[0]);
        state.filtersObjects.set(filter[0], filter[1]);

        var filters = [];
        var _iteratorNormalCompletion27 = true;
        var _didIteratorError27 = false;
        var _iteratorError27 = undefined;

        try {
            for (var _iterator27 = state.filtersObjects.values()[Symbol.iterator](), _step29; !(_iteratorNormalCompletion27 = (_step29 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {
                var activeFilter = _step29.value;

                filters = filters.concat(activeFilter);
            }
        } catch (err) {
            _didIteratorError27 = true;
            _iteratorError27 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion27 && _iterator27.return) {
                    _iterator27.return();
                }
            } finally {
                if (_didIteratorError27) {
                    throw _iteratorError27;
                }
            }
        }

        dispatch('filterItem', { operator: 'or', filters: filters });
        commit('updateFilters', state.filters);
        commit('updateFiltersObjects', state.filtersObjects);
    },
    filterItem: function filterItem(_ref23, params) {
        var commit = _ref23.commit,
            state = _ref23.state,
            dispatch = _ref23.dispatch;

        var newitems = [];
        var _iteratorNormalCompletion28 = true;
        var _didIteratorError28 = false;
        var _iteratorError28 = undefined;

        try {
            for (var _iterator28 = Array.from(state.items_store.values())[Symbol.iterator](), _step30; !(_iteratorNormalCompletion28 = (_step30 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {
                var x = _step30.value;

                if (eval(params.filters[0].condition) === params.filters[0].result) newitems.push(x);
            }
        } catch (err) {
            _didIteratorError28 = true;
            _iteratorError28 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion28 && _iterator28.return) {
                    _iterator28.return();
                }
            } finally {
                if (_didIteratorError28) {
                    throw _iteratorError28;
                }
            }
        }

        if (newitems.length > 0) dispatch('beforeChangeItems', newitems);
    },
    restoreFilter: function restoreFilter(_ref24) {
        var commit = _ref24.commit;

        commit('restoreFilter');
        commit('updatesItemsList', []);
        commit('updateItemFlag');
    },
    removeFilter: function removeFilter(_ref25, filter) {
        var commit = _ref25.commit,
            state = _ref25.state,
            dispatch = _ref25.dispatch;

        console.log("removeFilter");
        state.filters = state.filters.filter(function (e) {
            return e !== filter;
        });
        state.filtersObjects.delete(filter);
        commit('updateFilters', state.filters);
        commit('updateFiltersObjects', state.filtersObjects);
    },
    loadLanguage: function () {
        var _ref26 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_ref27) {
            var commit = _ref27.commit;
            var response, languageDict;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            _context5.next = 2;
                            return fetch('/ecommerce/api/getLanguage', { method: "GET", credentials: 'include' });

                        case 2:
                            response = _context5.sent;
                            _context5.next = 5;
                            return response.json();

                        case 5:
                            languageDict = _context5.sent;

                            commit('setLanguage', languageDict.dict);
                            if (languageDict.session) {
                                commit('updateIsLogin', true);
                                commit('updateSession', languageDict.session);
                            }

                        case 8:
                        case "end":
                            return _context5.stop();
                    }
                }
            }, _callee5, this);
        }));

        function loadLanguage(_x17) {
            return _ref26.apply(this, arguments);
        }

        return loadLanguage;
    }(),
    loadAlias: function loadAlias(_ref28, aliasCode) {
        var commit = _ref28.commit,
            state = _ref28.state;

        return new Promise(function (resolve, reject) {
            axios.post('/ecommerce/api/getFilterAlias', { aliascode: aliasCode }).then(function (response) {
                resolve(response.data.record);
            }).catch(function (error) {
                console.log('Error response in Load Alias Filter ', error);
                reject(error);
            });
        });
    },
    resetAutoLogout: function resetAutoLogout(_ref29) {
        var commit = _ref29.commit,
            state = _ref29.state,
            dispatch = _ref29.dispatch;

        if (state.autoLogout) window.clearTimeout(state.autoLogout);
        var newTimeOut = window.setTimeout(function () {
            dispatch('logout');
        }, state.logoutCountDownMinutes * 60000);
        commit('resetAutoLogout', newTimeOut);
    },
    loadSession: function () {
        var _ref30 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(_ref31) {
            var commit = _ref31.commit,
                state = _ref31.state,
                getters = _ref31.getters,
                dispatch = _ref31.dispatch;
            var sessionPromise;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            sessionPromise = new Promise(function (resolve, reject) {
                                commit('updateAppState', 'onload');
                                axios.get('/ecommerce/api/getInitFetch', {
                                    method: "GET",
                                    credentials: 'include'
                                }).then(function (response) {
                                    var objResponse = response.data;
                                    commit('updateHomeSections', objResponse.homeSections);
                                    commit('setCustomerMapFields', objResponse.customerMapFields);
                                    commit('setCustomerTaxReg', objResponse.customerTaxReg);
                                    commit('setCustomerIdtypes', objResponse.customerIdtypes);
                                    commit('changeStoreValue', { stateField: "payTermList", value: objResponse.payTermList });
                                    commit('changeStoreValue', { stateField: "addressSetting", value: objResponse.addressSetting });
                                    commit('changeStoreValue', { stateField: "useVariations", value: objResponse.useVariations });
                                    commit('changeStoreValue', { stateField: "useAllGenders", value: objResponse.setting.fields.UseAllGenericGender === true });
                                    commit('changeStoreValue', { stateField: "shipItemCode", value: objResponse.costItem });
                                    commit('changeStoreValue', { stateField: "discountItemCode", value: objResponse.discountItem });
                                    commit('changeStoreValue', { stateField: "showWelcomeMessage", value: objResponse.setting.fields.WelcomePage != null });
                                    if (objResponse.setting.fields.MinSearchRate) commit('changeStoreValue', { stateField: "scoringAceptation", value: objResponse.setting.fields.MinSearchRate });

                                    if (objResponse.setting.fields.FilterQtyInView && objResponse.setting.fields.FilterQtyInView > 0) commit('changeStoreValue', { stateField: "itemsPerPage", value: objResponse.setting.fields.FilterQtyInView });

                                    if (objResponse.items && objResponse.items.length > 0) {
                                        commit('updatesItemsStore', ProcessItems(objResponse.items, state));
                                    }

                                    if (objResponse.sessionPerson) {
                                        commit('updateIsLogin', true);
                                        commit('updateSession', objResponse.sessionPerson);
                                        commit('updateGenericUser', objResponse.sessionPerson.fields.RequireUserInfo);

                                        if (state.items_in_car.length > 0) {
                                            commit('updateSessionCar', state.items_in_car);
                                            saveCarSession(state.appState, 'loadSession', JSON.stringify(state.items_in_car)).then(function (response) {
                                                console.log("Throtelled SaveCarSession", response.data);
                                            });
                                        } else {
                                            if (objResponse.sessionPerson.fields.CarInfo) {
                                                var sessionCartItems = [];
                                                var _iteratorNormalCompletion29 = true;
                                                var _didIteratorError29 = false;
                                                var _iteratorError29 = undefined;

                                                try {
                                                    for (var _iterator29 = objResponse.sessionPerson.fields.CarInfo.items[Symbol.iterator](), _step31; !(_iteratorNormalCompletion29 = (_step31 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {
                                                        var carItem = _step31.value;

                                                        if (carItem.item && carItem.cant) {
                                                            carItem.item.carCant = carItem.cant;
                                                            carItem.message = null;
                                                            sessionCartItems.push(carItem);
                                                        }
                                                    }
                                                } catch (err) {
                                                    _didIteratorError29 = true;
                                                    _iteratorError29 = err;
                                                } finally {
                                                    try {
                                                        if (!_iteratorNormalCompletion29 && _iterator29.return) {
                                                            _iterator29.return();
                                                        }
                                                    } finally {
                                                        if (_didIteratorError29) {
                                                            throw _iteratorError29;
                                                        }
                                                    }
                                                }

                                                commit('updateSessionCar', sessionCartItems);
                                            }
                                        }
                                        dispatch('resetAutoLogout');
                                    }

                                    commit('updateIsAdmin', objResponse.isAdmin);
                                    commit('updateIsLiberatorOrder', objResponse.LiberatorCodes);
                                    commit('updateIsOnlyModifier', objResponse.OnlyModifiedCodes);
                                    commit('updateIsLiberatorCenterCost', objResponse.CenterLiberators);
                                    commit('updateIsOnlyModifierCenterCost', objResponse.CenterOnlyModifiedCodes);
                                    //console.log(objResponse.isAdmin, objResponse.isLiberator);

                                    if (objResponse.customerGifts) commit('updateGifts', objResponse.customerGifts);

                                    if (objResponse.suggestions) commit('updateSuggestions', objResponse.suggestions);

                                    if (objResponse.classifications) commit('updateCategoryMap', objResponse.classifications);

                                    if (objResponse.classificationsTree) commit('updatesCatList', objResponse.classificationsTree);

                                    if (objResponse.setting) commit('updateSetting', objResponse.setting.fields);

                                    if (objResponse.customer) commit('updateCustomer', objResponse.customer.fields);

                                    if (objResponse.salesman) commit('updateSalesMan', objResponse.salesman.fields);

                                    if (objResponse.orderTemplate) commit('updateOrderTemplate', objResponse.orderTemplate.fields);

                                    if (objResponse.editStates) commit('updateOrderEditableStates', objResponse.editStates);
                                    if (objResponse.translateDict) commit('updateTranslate', objResponse.translateDict);

                                    if (objResponse.priceDeal) commit('updatePriceDeal', objResponse.priceDeal);

                                    if (objResponse.discountDeal) commit('updateDiscountDeal', objResponse.discountDeal);

                                    if (objResponse.favorites) {
                                        var list = objResponse.favorites;
                                        var _iteratorNormalCompletion30 = true;
                                        var _didIteratorError30 = false;
                                        var _iteratorError30 = undefined;

                                        try {
                                            for (var _iterator30 = list[Symbol.iterator](), _step32; !(_iteratorNormalCompletion30 = (_step32 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {
                                                var item = _step32.value;

                                                commit('addFavorite', item);
                                            }
                                        } catch (err) {
                                            _didIteratorError30 = true;
                                            _iteratorError30 = err;
                                        } finally {
                                            try {
                                                if (!_iteratorNormalCompletion30 && _iterator30.return) {
                                                    _iterator30.return();
                                                }
                                            } finally {
                                                if (_didIteratorError30) {
                                                    throw _iteratorError30;
                                                }
                                            }
                                        }
                                    }
                                    if (objResponse.favouritesOrders) {
                                        var favouritesOrders = objResponse.favouritesOrders;
                                        var _iteratorNormalCompletion31 = true;
                                        var _didIteratorError31 = false;
                                        var _iteratorError31 = undefined;

                                        try {
                                            for (var _iterator31 = favouritesOrders[Symbol.iterator](), _step33; !(_iteratorNormalCompletion31 = (_step33 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {
                                                var e = _step33.value;

                                                commit('addFavouritesOrders', e);
                                            }
                                        } catch (err) {
                                            _didIteratorError31 = true;
                                            _iteratorError31 = err;
                                        } finally {
                                            try {
                                                if (!_iteratorNormalCompletion31 && _iterator31.return) {
                                                    _iterator31.return();
                                                }
                                            } finally {
                                                if (_didIteratorError31) {
                                                    throw _iteratorError31;
                                                }
                                            }
                                        }
                                    }

                                    if (objResponse.vatCodeMap) {
                                        commit('updateVatCode', objResponse.vatCodeMap);
                                    }
                                    if (objResponse.Avatar) {
                                        commit('updateAvatar', objResponse.Avatar);
                                    }

                                    if (objResponse.Avatar) {
                                        commit('updateAvatar', objResponse.Avatar);
                                    }
                                    commit('updateGiftCardItem', objResponse.GiftCardItem);

                                    //Cargar el Pais de Opciones de Empresa
                                    commit('updateOurSettingsCountry', objResponse.OurSettingsCountry);
                                    commit('updateSelectLinkto', { table: 'Country', value: objResponse.OurSettingsCountry });

                                    commit('updateAppState', 'ready');
                                    if (objResponse.fastMode) {
                                        dispatch("loadInitItems");
                                    } else {
                                        commit('updateItemsIsLoaded', true);
                                    }
                                    commit('updateCarAmount', getters);
                                    resolve(true);
                                });
                            });
                            return _context6.abrupt("return", Promise.resolve(sessionPromise));

                        case 2:
                        case "end":
                            return _context6.stop();
                    }
                }
            }, _callee6, this);
        }));

        function loadSession(_x18) {
            return _ref30.apply(this, arguments);
        }

        return loadSession;
    }(),
    setRedirectLogin: function () {
        var _ref32 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(_ref33, redirectPath) {
            var commit = _ref33.commit;
            return regeneratorRuntime.wrap(function _callee7$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            commit('updateRedirectLogin', redirectPath);

                        case 1:
                        case "end":
                            return _context7.stop();
                    }
                }
            }, _callee7, this);
        }));

        function setRedirectLogin(_x19, _x20) {
            return _ref32.apply(this, arguments);
        }

        return setRedirectLogin;
    }(),
    activePreserveCar: function () {
        var _ref34 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(_ref35, perserveStatus) {
            var commit = _ref35.commit;
            return regeneratorRuntime.wrap(function _callee8$(_context8) {
                while (1) {
                    switch (_context8.prev = _context8.next) {
                        case 0:
                            commit('updatePreserveStatus', perserveStatus);

                        case 1:
                        case "end":
                            return _context8.stop();
                    }
                }
            }, _callee8, this);
        }));

        function activePreserveCar(_x21, _x22) {
            return _ref34.apply(this, arguments);
        }

        return activePreserveCar;
    }(),
    reorderItems: function reorderItems(_ref36, fieldId) {
        var commit = _ref36.commit,
            state = _ref36.state,
            dispatch = _ref36.dispatch;
        var _iteratorNormalCompletion32 = true;
        var _didIteratorError32 = false;
        var _iteratorError32 = undefined;

        try {
            for (var _iterator32 = state.setting.ItemOrdered[Symbol.iterator](), _step34; !(_iteratorNormalCompletion32 = (_step34 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {
                var field = _step34.value;

                if (field.fields) field = field.fields;
                if (field.internalId === fieldId) {
                    commit('setOrderSelected', field.internalId);
                    commit('setOrderBy', field.ItemField);
                    commit('setOrderDirection', field.OrderDirection);
                    commit('updateItemFlag');
                }
            }
        } catch (err) {
            _didIteratorError32 = true;
            _iteratorError32 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion32 && _iterator32.return) {
                    _iterator32.return();
                }
            } finally {
                if (_didIteratorError32) {
                    throw _iteratorError32;
                }
            }
        }
    },
    login: function login(_ref37, params) {
        var commit = _ref37.commit,
            state = _ref37.state,
            dispatch = _ref37.dispatch;

        var loginPromise = new Promise(function (resolve, reject) {
            axios.post('/ecommerce/api/login', { username: params.username, md5password: params.password }).then(function (response) {
                var objResponse = response.data; //JSON.parse(response.data);
                if (objResponse.ok) {
                    commit('updateItemsIsLoaded', false);
                    commit('updateIsLogin', true);
                    commit('updatesItemsStore', []);
                    dispatch('loadSession').then(function () {
                        resolve(objResponse);
                    });
                } else resolve(objResponse);
            }).catch(function (error) {
                console.error(error);
                resolve({ ok: false, error: error });
            });
        });
        return Promise.resolve(loginPromise);
    },
    logout: function logout(_ref38) {
        var commit = _ref38.commit;

        axios.get('/ecommerce/api/logout').then(function (response) {
            try {
                if (window.gapi) {
                    gapi.load('auth2', function () {
                        // Retrieve the singleton for the GoogleAuth library and set up the client.
                        gapi.auth2.init({ client_id: '411860170731-ocuredme9dg0khkmc8pmudfv94hfrhp2.apps.googleusercontent.com' }).then(function () {
                            var a = gapi.auth2.getAuthInstance();
                            a.disconnect();
                        });
                    });
                }
                if (window.FB) FB.logout();
            } catch (error) {
                console.error("API Log Out", error);
            }
            commit('resetState');
            document.location.href = "/ecommerce/";
        }).catch(function (error) {
            console.error('error when try to close session', error);
        });
    },
    updateCategory: function updateCategory(_ref39, category) {
        var commit = _ref39.commit,
            state = _ref39.state;

        commit('updateCategory', category);
    },
    updateCategoryHistory: function updateCategoryHistory(_ref40, parameters) {
        var commit = _ref40.commit,
            state = _ref40.state;

        commit('updateCategoryHistory', parameters);
    },
    checkItemInCar: function checkItemInCar(_ref41) {
        var dispatch = _ref41.dispatch,
            commit = _ref41.commit,
            state = _ref41.state;

        var sessionCartItems = [];
        var needReload = false;
        var _iteratorNormalCompletion33 = true;
        var _didIteratorError33 = false;
        var _iteratorError33 = undefined;

        try {
            for (var _iterator33 = state.items_in_car[Symbol.iterator](), _step35; !(_iteratorNormalCompletion33 = (_step35 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {
                var carItem = _step35.value;

                if (state.items_store.has(carItem.id) || carItem.item.variant) {
                    sessionCartItems.push(carItem);
                } else {
                    needReload = true;
                }
            }
        } catch (err) {
            _didIteratorError33 = true;
            _iteratorError33 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion33 && _iterator33.return) {
                    _iterator33.return();
                }
            } finally {
                if (_didIteratorError33) {
                    throw _iteratorError33;
                }
            }
        }

        commit('updateSessionCar', sessionCartItems);
        dispatch('loadOrderTotals', { needReload: needReload });
        dispatch('updateCarAmount', true);
    },
    loadInitItems: function loadInitItems(_ref42) {
        var dispatch = _ref42.dispatch,
            commit = _ref42.commit,
            state = _ref42.state;
        var skipVisibility = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        axios.get('/ecommerce/api/getItems').then(function (response) {
            var objResponse = response.data;

            if (objResponse.items && objResponse.items.length > 0) {
                var processItems = ProcessItems(objResponse.items, state, skipVisibility);
                commit('updatesItemsStore', processItems);
                if (state.setting.ControlStockForSales) {
                    commit('checkStockQty');
                }
            }
            commit('updateItemsIsLoaded', true);
            dispatch('checkItemInCar');
        }).catch(function (error) {
            console.error('Error response in loadItems', error);
        });
    },
    loadCategories: function loadCategories(_ref43) {
        var commit = _ref43.commit,
            state = _ref43.state;
        var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var lvl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        axios.get('/ecommerce/api/getCategories', { params: { root: root, lvl: lvl } }).then(function (response) {
            commit('updatesCatList', response);
        }).catch(function (error) {
            console.error('Error response in LoadCategories', error);
        });
    },
    restoreHistory: function restoreHistory(_ref44) {
        var commit = _ref44.commit,
            state = _ref44.state;

        commit('restoreHistory');
    },
    toggleFavourite: function toggleFavourite(_ref45, itemCode) {
        var commit = _ref45.commit,
            dispatch = _ref45.dispatch,
            state = _ref45.state;

        axios.post('/ecommerce/api/favorite/' + itemCode, { favorite: true }).then(function (response) {
            if (response.data.resfav === "add" && response.data.saved === true) commit('addFavorite', itemCode);
            if (response.data.resfav === "remove" && response.data.saved === true) commit('removeFavorite', itemCode);
        }).catch(function (error) {
            console.error(error);
        });
    },
    toggleFavouriteOrder: function toggleFavouriteOrder(_ref46, FavOrder) {
        var commit = _ref46.commit,
            dispatch = _ref46.dispatch,
            state = _ref46.state;

        axios.post('/ecommerce/api/favouriteOrder/', { FavOrder: FavOrder }).then(function (response) {
            if (response.data.resfav === "add" && response.data.saved === true) commit('addFavouritesOrders', [FavOrder.name, FavOrder.items, FavOrder.OrderSerNr]);else commit('removeFavouritesOrders', [FavOrder.name, FavOrder.items, FavOrder.OrderSerNr]);
        }).catch(function (error) {
            console.error(error);
        });
    },
    loadItems: function loadItems(_ref47) {
        var commit = _ref47.commit,
            state = _ref47.state,
            dispatch = _ref47.dispatch;
        var category = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

        if (category != '') {
            axios.get('/ecommerce/api/getItems', {
                params: { action: 'load', cat: category, offset: state.pageOffset, items_per_page: state.items }
            }).then(function (response) {
                var items = JSON.parse(response);
                commit('updatesItemsList', items);
            }).catch(function (error) {
                console.error('Error response in LoadCategories', error);
            });
        } else dispatch('searchItems');
    },
    ItemComponentAddToCar: function ItemComponentAddToCar(_ref48, item) {
        var commit = _ref48.commit,
            getters = _ref48.getters,
            state = _ref48.state,
            dispatch = _ref48.dispatch;

        var newItemQty = parseInt(item.carQty);
        if (state.setting.ControlStockForSales) {
            var maxQty = getters.getMaxStockByCode(item.Code);
            if (maxQty == 0) {
                newItemQty = maxQty;
                dispatch('showNotificacion', { title: "Stock insuficiente", message: ["This item {{$1}} is not longer available", item.Name], type: 'error' });
                return;
            } else {
                var carItemAmount = getters.getItemAmountInCar(item.Code);
                var available = maxQty - carItemAmount;
                if (carItemAmount > maxQty) {
                    dispatch('changeCartQty', { itemCode: item.Code, qty: maxQty, action: 'update' });
                    dispatch('loadOrderTotals', {});
                    dispatch('showNotificacion', { title: "Stock insuficiente", message: ["The quantity of {{$1}} in cart was change from {{$2}} to {{$3}}", item.Name, carItemAmount, maxQty], type: 'error' });
                    return;
                } else {
                    if (carItemAmount == maxQty) {
                        dispatch('showNotificacion', { title: "Stock insuficiente", message: ["The max qty {{$1}} of article {{$2}} is already in cart", maxQty, item.Name], type: 'error' });
                        return;
                    }
                    if (newItemQty > available) {
                        dispatch('showNotificacion', { title: "Stock insuficiente", message: ["The article qty can't be bigger than {{$1}}", available], type: 'error' });
                        return;
                    }
                }
            }
        }
        dispatch('showNotificacion', { title: "Agregaste " + item.carQty + " art\xEDculos a tu carrito", message: "" + item.Name, type: 'info' });
        commit('updateItemToCar', item);
        dispatch('loadOrderTotals', {});
    },
    ItemGiftcardAddToCar: function ItemGiftcardAddToCar(_ref49, barCode) {
        var commit = _ref49.commit,
            state = _ref49.state,
            getters = _ref49.getters,
            dispatch = _ref49.dispatch;

        axios.post('/ecommerce/api/giftcard', { 'barCode': barCode, 'cust': state.customer }).then(function (response) {
            var res = response.data;
            // commit('updateGiftCardApplied',res.record);
            if (res.res) {
                dispatch('showNotificacion', {
                    title: getters.tr("Added Giftcard"), message: getters.tr("Amount") + " $" + res.amount, type: 'info'
                });
                var giftCardItem = getters.getGiftCardItem;
                var amount = res.amount;
                if (amount > state.total_in_car) amount = state.total_in_car;
                var item = {
                    Code: giftCardItem.fields.Code,
                    Comment: giftCardItem.fields.Comment,
                    Name: giftCardItem.fields.Name,
                    carQty: 20,
                    giftcardCode: res.giftCardCode,
                    variant: true,
                    amount: amount
                };
                state.items_in_map.set(item.Code, { id: item.Code, cant: -1, item: item, message: null, variant: true, giftcardCode: res.giftCardCode, giftcardNoShipCost: res.record.fields.NoShipCost, amount: amount });
                state.items_in_car = Array.from(state.items_in_map.values());
                state.carFlag = Math.floor(Math.random() * 1000000 + 1);
                axios.post('/ecommerce/api/saveCarSession', { state: state.appState, from: 'ItemGiftcardAddToCar', items: JSON.stringify(state.items_in_car) }).then(function (response) {
                    dispatch('loadOrderTotals', {});
                    commit('updateCarAmount', getters);
                }).catch(function (error) {
                    console.error(error);
                });
            } else dispatch('showNotificacion', { title: getters.tr("Information"), message: getters.tr("Invalid Giftcard Code"), type: 'warning' });
        }).catch(function (error) {
            console.error("Giftcard error:", error);
        });
    },
    clearItemToCar: function clearItemToCar(_ref50) {
        var commit = _ref50.commit,
            dispatch = _ref50.dispatch,
            state = _ref50.state;

        commit('clearItemToCar', 'view');
        dispatch('loadOrderTotals', {});
    },
    setOrderView: function setOrderView(_ref51, newState) {
        var commit = _ref51.commit;

        commit('updateOrderView', newState);
    },
    approvedOrder: function approvedOrder(_ref52, SerNr) {
        var commit = _ref52.commit;

        return new Promise(function (resolve, reject) {
            axios.post('/ecommerce/api/approvedOrder', {
                orderid: SerNr
            }).then(function (response) {
                resolve(response.data);
            }).catch(function (error) {
                reject(error);
            });
        });
    },
    createSaleOrder: function createSaleOrder(_ref53, payload) {
        var commit = _ref53.commit,
            dispatch = _ref53.dispatch,
            state = _ref53.state;

        var tempItems = [];
        var _iteratorNormalCompletion34 = true;
        var _didIteratorError34 = false;
        var _iteratorError34 = undefined;

        try {
            for (var _iterator34 = state.items_in_car[Symbol.iterator](), _step36; !(_iteratorNormalCompletion34 = (_step36 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {
                var item = _step36.value;

                commit('updateGiftCardApplied', { Code: item.giftcardCode, NoShipCost: item.giftcardNoShipCost });
                tempItems.push({ Code: item.item.Code, Cant: item.cant, giftcardCode: item.giftcardCode, giftcardNoShipCost: item.giftcardNoShipCost });
            }
        } catch (err) {
            _didIteratorError34 = true;
            _iteratorError34 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion34 && _iterator34.return) {
                    _iterator34.return();
                }
            } finally {
                if (_didIteratorError34) {
                    throw _iteratorError34;
                }
            }
        }

        if (!payload) payload = {};
        if (!payload['Comment']) payload['Comment'] = state.order_Comment;

        if (!payload['Comment']) payload['Comment'] = state.order_Comment;

        if (state.order_DelAddressCode != null) payload['DelAddressCode'] = state.order_DelAddressCode;
        if (state.order_DelDay != null) payload['DelDay'] = state.order_DelDay;
        if (state.order_DelHour != null) payload['DelHour'] = state.order_DelHour;
        if (state.order_ReceptionManagerCode != null) payload['ReceptionManagerCode'] = state.order_ReceptionManagerCode;
        if (state.order_CustPurchaseOrder != null) payload['CustPurchaseOrder'] = state.order_CustPurchaseOrder;
        if (state.order_PayTerm != null) payload['PayTerm'] = state.order_PayTerm;
        if (state.order_CenterCost != null) payload['CenterCost'] = state.order_CenterCost;
        if (state.order_Office != null) payload['Office'] = state.order_Office;
        if (state.order_ShipMode != null) payload['ShipMode'] = state.order_ShipMode;
        return new Promise(function (resolve, reject) {
            axios.post('/ecommerce/api/createSalesOrder', {
                items: tempItems,
                extras: payload
            }).then(function (response) {
                // Se recargar los articulos para poder tener un stock mas actualizado
                if (response.data.success) {
                    dispatch("loadInitItems", true);
                }
                resolve(response.data);
            }).catch(function (error) {
                commit('clearItemToCar', 'failure');
                reject(error);
            });
        });
    },
    loadOrderTotals: function loadOrderTotals(_ref54, payload) {
        var commit = _ref54.commit,
            state = _ref54.state;

        var needReload = false;
        if (payload.needReload) needReload = payload.needReload;else {
            if (!payload.needReload && (!state.carOrderTemplate || !state.carOrderTemplate.fields)) {
                needReload = true;
            } else {
                if (!needReload) {
                    var _iteratorNormalCompletion35 = true;
                    var _didIteratorError35 = false;
                    var _iteratorError35 = undefined;

                    try {
                        var _loop = function _loop() {
                            var itemInCar = _step37.value;

                            var soItem = state.carOrderTemplate.fields.Items.filter(function (x) {
                                return itemInCar.id === x.fields.ArtCode;
                            })[0];
                            if (!soItem) {
                                needReload = true;
                                return "break";
                            }
                            if (itemInCar.cant != soItem.fields.Qty) {
                                needReload = true;
                                return "break";
                            }
                        };

                        for (var _iterator35 = state.items_in_car[Symbol.iterator](), _step37; !(_iteratorNormalCompletion35 = (_step37 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {
                            var _ret = _loop();

                            if (_ret === "break") break;
                        }
                    } catch (err) {
                        _didIteratorError35 = true;
                        _iteratorError35 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion35 && _iterator35.return) {
                                _iterator35.return();
                            }
                        } finally {
                            if (_didIteratorError35) {
                                throw _iteratorError35;
                            }
                        }
                    }
                }
            }
        }

        if (needReload) {
            return new Promise(function (resolve, reject) {
                var tempItems = [];
                var _iteratorNormalCompletion36 = true;
                var _didIteratorError36 = false;
                var _iteratorError36 = undefined;

                try {
                    for (var _iterator36 = state.items_in_car[Symbol.iterator](), _step38; !(_iteratorNormalCompletion36 = (_step38 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {
                        var item = _step38.value;

                        commit('updateGiftCardApplied', { Code: item.giftcardCode, NoShipCost: item.giftcardNoShipCost });
                        tempItems.push({ Code: item.item.Code, Cant: item.cant, giftcardCode: item.giftcardCode, giftcardNoShipCost: item.giftcardNoShipCost, amount: item.amount });
                    }
                } catch (err) {
                    _didIteratorError36 = true;
                    _iteratorError36 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion36 && _iterator36.return) {
                            _iterator36.return();
                        }
                    } finally {
                        if (_didIteratorError36) {
                            throw _iteratorError36;
                        }
                    }
                }

                if (!payload) payload = {};

                payload['DelAddressCode'] = state.order_DelAddressCode;
                payload['Comment'] = state.order_Comment;
                payload['DelDate'] = state.order_DelDate;
                payload['ReceptionManagerCode'] = state.order_ReceptionManagerCode;
                payload['CustPurchaseOrder'] = state.order_CustPurchaseOrder;
                if (state.order_PayTerm) payload['PayTerm'] = state.order_PayTerm;
                if (state.order_CenterCost) payload['CenterCost'] = state.order_CenterCost;
                if (state.order_ShipMode) payload['ShipMode'] = state.order_ShipMode;
                if (state.order_Campaign) payload['Campaign'] = state.order_Campaign;

                getTempSalerOrder(tempItems, payload).then(function (response) {
                    if (response.data.shopModesAvailable && Array.isArray(response.data.shopModesAvailable) && state.lastOrderAddress !== state.order_DelAddressCode) {
                        commit('changeStoreValue', {
                            stateField: "lastOrderAddress",
                            value: state.order_DelAddressCode
                        });
                        commit('updateCarShipModes', response.data.shopModesAvailable);
                    }
                    commit("checkStockQty");
                    commit('updateCarOrderTemplate', Object.assign({}, response.data.so));
                    resolve(Object.assign({}, response.data.so));
                }).catch(function (error) {
                    resolve(null);
                });
            });
        } else return state.carOrderTemplate;
    },
    loadOrderHistory: function () {
        var _ref55 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(_ref56, filter) {
            var commit = _ref56.commit,
                state = _ref56.state;
            return regeneratorRuntime.wrap(function _callee9$(_context9) {
                while (1) {
                    switch (_context9.prev = _context9.next) {
                        case 0:
                            return _context9.abrupt("return", new Promise(function (resolve, reject) {
                                axios.get('/ecommerce/api/getOrders', { params: { filter: filter } }).then(function (response) {
                                    //console.log(response.data);
                                    commit('updateOrderEditableStates', response.data.editStates);
                                    commit('updateOrderList', response.data.list);
                                    resolve(true);
                                }).catch(function (error) {
                                    //console.log('Error response in LoadSaleOrders',error);
                                    resolve(false);
                                });
                            }));

                        case 1:
                        case "end":
                            return _context9.stop();
                    }
                }
            }, _callee9, this);
        }));

        function loadOrderHistory(_x27, _x28) {
            return _ref55.apply(this, arguments);
        }

        return loadOrderHistory;
    }(),
    orderDetail: function orderDetail(_ref57, orderid) {
        var commit = _ref57.commit,
            state = _ref57.state;

        if (!orderid) return false;
        return new Promise(function (resolve, reject) {
            axios.get('/ecommerce/api/getOrderDetail', { params: { orderid: orderid } }).then(function (response) {
                commit('updateCurrentOrder', response.data.order);
                //commit('updateIsLiberatorOrder', response.data.isLiberator);
                resolve(response.data);
            }).catch(function (error) {
                //console.log('Error response in LoadSaleOrders',error);
                resolve(false);
            });
        });
    },
    favOrderDetail: function favOrderDetail(_ref58, nameFav) {
        var commit = _ref58.commit,
            state = _ref58.state;

        var favOrder = state.favouritesOrders.filter(function (x) {
            return x[0] === nameFav;
        })[0];
        if (favOrder) commit('updateCurrentFavOrder', favOrder);
    },
    setCurrentCustomerPerson: function setCurrentCustomerPerson(_ref59, personCode) {
        var commit = _ref59.commit,
            state = _ref59.state;

        var person = state.CustomerPersons.filter(function (x) {
            return x.Code === personCode;
        })[0];

        if (person) commit('updateCurrentCustomerPerson', person);
    },
    copyOrder: function copyOrder(_ref60, params) {
        var commit = _ref60.commit,
            state = _ref60.state,
            dispatch = _ref60.dispatch,
            getters = _ref60.getters;

        if (!params.orderId) return false;
        var getMaxStockByCode = function getMaxStockByCode(itemCode) {
            var giftCardItem = getters.getGiftCardItem;
            if (giftCardItem && giftCardItem.fields.Code == itemCode) return -1;
            if (getters.getSetting.ControlStockForSales) {
                var itemInStore = state.items_store.get(itemCode);
                if (itemInStore) {
                    if (itemInStore.Reserved) return itemInStore.Qty - itemInStore.Reserved;
                    return itemInStore.Qty;
                }
            }
            return getters.getMaxQtyItem;
        };
        return new Promise(function (resolve) {
            axios.get('/ecommerce/api/getOrderDetail', { params: { orderid: params.orderId } }).then(function (response) {
                if (Object.keys(response.data.order).length > 0) {
                    var itemList = [];
                    var _iteratorNormalCompletion37 = true;
                    var _didIteratorError37 = false;
                    var _iteratorError37 = undefined;

                    try {
                        var _loop2 = function _loop2() {
                            var item = _step39.value;

                            var itemStore = state.items_store.get(item.fields.ArtCode);
                            if (!itemStore) itemStore = item.fields;
                            if (state.setting.ControlStockForSales) {
                                var newItemQty = item.fields.Qty;
                                var maxQty = getMaxStockByCode(item.fields.ArtCode);
                                if (maxQty == 0) {
                                    response.data.order.fields.Items = response.data.order.fields.Items.filter(function (x) {
                                        return x.fields.ArtCode != item.fields.ArtCode;
                                    });
                                    dispatch('changeCartQty', { itemCode: item.fields.ArtCode, action: 'delete' });
                                    dispatch('showNotificacion', {
                                        title: "Stock insuficiente",
                                        message: ["This item {{$1}} is not longer available", item.Name],
                                        type: 'warning'
                                    });
                                    return "continue";
                                }
                                if (newItemQty > maxQty) {
                                    dispatch('showNotificacion', {
                                        title: "Stock insuficiente",
                                        message: ["The article qty can't be bigger than {{$1}}", maxQty],
                                        type: 'warning'
                                    });
                                    newItemQty = maxQty;
                                }
                                itemStore['carQty'] = newItemQty;
                            } else {
                                itemStore['carQty'] = item.fields.Qty;
                            }
                            if (itemStore) itemList.push(itemStore);
                        };

                        for (var _iterator37 = response.data.order.fields.Items[Symbol.iterator](), _step39; !(_iteratorNormalCompletion37 = (_step39 = _iterator37.next()).done); _iteratorNormalCompletion37 = true) {
                            var _ret2 = _loop2();

                            if (_ret2 === "continue") continue;
                        }
                    } catch (err) {
                        _didIteratorError37 = true;
                        _iteratorError37 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion37 && _iterator37.return) {
                                _iterator37.return();
                            }
                        } finally {
                            if (_didIteratorError37) {
                                throw _iteratorError37;
                            }
                        }
                    }

                    commit('clearItemToCar');
                    dispatch('updatePrices', itemList).then(function () {
                        commit('updateCurrentOrder', response.data.order);
                    });
                    var _iteratorNormalCompletion38 = true;
                    var _didIteratorError38 = false;
                    var _iteratorError38 = undefined;

                    try {
                        for (var _iterator38 = itemList[Symbol.iterator](), _step40; !(_iteratorNormalCompletion38 = (_step40 = _iterator38.next()).done); _iteratorNormalCompletion38 = true) {
                            var _item2 = _step40.value;

                            if (_item2.Code != state.discountItemCode && _item2.Code != state.shipCostItemCode) {
                                dispatch('showNotificacion', {
                                    title: "Agregaste " + _item2.carQty + " art\xEDculos a tu carrito",
                                    message: "" + _item2.Name,
                                    type: 'info'
                                });
                                commit('updateItemToCar', _item2);
                            }
                        }
                    } catch (err) {
                        _didIteratorError38 = true;
                        _iteratorError38 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion38 && _iterator38.return) {
                                _iterator38.return();
                            }
                        } finally {
                            if (_didIteratorError38) {
                                throw _iteratorError38;
                            }
                        }
                    }

                    dispatch('loadOrderTotals', {});
                    resolve(true);
                } else {
                    dispatch('showNotificacion', { title: "System Message", message: "You are try to view/copy a order that aren't created for you or your CustomerGroup", type: 'error' });
                }
            }).catch(function (error) {
                console.log('Error response in LoadSaleOrders', error);
                resolve(false);
            });
        });
    },
    orderAction: function orderAction(_ref61, params) {
        var commit = _ref61.commit,
            state = _ref61.state,
            dispatch = _ref61.dispatch,
            getters = _ref61.getters;

        return new Promise(function (resolve) {
            axios.post('/ecommerce/api/orderAction', params).then(function () {
                var _ref62 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(response) {
                    return regeneratorRuntime.wrap(function _callee10$(_context10) {
                        while (1) {
                            switch (_context10.prev = _context10.next) {
                                case 0:
                                    response = response.data;

                                    if (!response.success) {
                                        _context10.next = 9;
                                        break;
                                    }

                                    _context10.next = 4;
                                    return dispatch('showNotificacion', { title: "System Message", message: getters.tr(response.message), type: 'info' });

                                case 4:
                                    _context10.next = 6;
                                    return dispatch('loadOrderHistory');

                                case 6:
                                    resolve(true);
                                    _context10.next = 10;
                                    break;

                                case 9:
                                    if (response.message) {
                                        dispatch('showNotificacion', { title: "System Message", message: getters.tr(response.message), type: 'error' });
                                    } else dispatch('showNotificacion', { title: "System Message", message: getters.tr("The action you are trying to take could not be processed Please try again or please contact your account executive"), type: 'error' });

                                case 10:
                                    resolve(false);

                                case 11:
                                case "end":
                                    return _context10.stop();
                            }
                        }
                    }, _callee10, this);
                }));

                return function (_x29) {
                    return _ref62.apply(this, arguments);
                };
            }()).catch(function (error) {
                console.log('Error response in OrderAction', error);
                resolve(false);
            });
        });
    },
    changeCartQty: function changeCartQty(_ref63, params) {
        var commit = _ref63.commit,
            getters = _ref63.getters,
            state = _ref63.state,
            dispatch = _ref63.dispatch;

        commit('updateCarQty', params);
        commit('updateCarAmount', getters);
        commit('updateCarFlag');
    },
    reloadCarPrice: function reloadCarPrice(_ref64, clearCodes) {
        var commit = _ref64.commit,
            getters = _ref64.getters,
            state = _ref64.state,
            dispatch = _ref64.dispatch;

        commit('reloadCarPrice', clearCodes);
        commit('updateCarAmount', getters);
    },
    saveCurrentOrder: function saveCurrentOrder(_ref65) {
        var commit = _ref65.commit,
            state = _ref65.state,
            getters = _ref65.getters;

        return new Promise(function (resolve, reject) {
            var params = {};
            params.sernr = state.currentOrder.fields.SerNr;
            params.items = {};
            if (state.currentOrder.fields) {
                var _iteratorNormalCompletion39 = true;
                var _didIteratorError39 = false;
                var _iteratorError39 = undefined;

                try {
                    for (var _iterator39 = state.currentOrder.fields.Items[Symbol.iterator](), _step41; !(_iteratorNormalCompletion39 = (_step41 = _iterator39.next()).done); _iteratorNormalCompletion39 = true) {
                        var _item3 = _step41.value;

                        params.items[_item3.fields.internalId] = { ArtCode: _item3.fields.ArtCode, Qty: _item3.fields.Qty, internalId: _item3.fields.internalId };
                    }
                } catch (err) {
                    _didIteratorError39 = true;
                    _iteratorError39 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion39 && _iterator39.return) {
                            _iterator39.return();
                        }
                    } finally {
                        if (_didIteratorError39) {
                            throw _iteratorError39;
                        }
                    }
                }
            }params.newItems = [];
            if (state.currentOrder.fields.NewItems) params.newItems = state.currentOrder.fields.NewItems;
            if (state.currentOrder.fields.NewItems) params.newItems = state.currentOrder.fields.NewItems;
            var salesmanText = "";
            if (state.salesman) salesmanText = state.salesman.Name + " " + state.salesman.LastName + " (" + state.salesman.Phone + ") (" + state.salesman.Email + ")";
            axios.post('/ecommerce/api/saveOrder', params).then(function (response) {
                response = response.data;
                if (response.success) {
                    commit('updateCurrentOrder', response.so);
                    // eslint-disable-next-line no-alert
                    alert(getters.tr(['ECOMMERCE_ORDER_MODIFIED', params.sernr, salesmanText ? ", " + salesmanText : '']));
                    //alert(`La orden de venta ${params.sernr} ha sido "MODIFICADA Y GUARDADA". Favor recordar que la misma deberá ser aprobada para ser procesada. Ante cualquier duda, favor de comunicarse con su ejecutivo de cuentas ${salesmanText ? ", " + salesmanText : ''}.`);
                } else {
                    if (response.message) {
                        var errorMSG = "";
                        var _iteratorNormalCompletion40 = true;
                        var _didIteratorError40 = false;
                        var _iteratorError40 = undefined;

                        try {
                            for (var _iterator40 = response.message[Symbol.iterator](), _step42; !(_iteratorNormalCompletion40 = (_step42 = _iterator40.next()).done); _iteratorNormalCompletion40 = true) {
                                var msg = _step42.value;

                                errorMSG += getters.tr(msg) + "\n";
                            } // eslint-disable-next-line no-alert
                        } catch (err) {
                            _didIteratorError40 = true;
                            _iteratorError40 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion40 && _iterator40.return) {
                                    _iterator40.return();
                                }
                            } finally {
                                if (_didIteratorError40) {
                                    throw _iteratorError40;
                                }
                            }
                        }

                        alert(errorMSG);
                    } else {
                        if (response.error) {
                            var _errorMSG = "";
                            var _iteratorNormalCompletion41 = true;
                            var _didIteratorError41 = false;
                            var _iteratorError41 = undefined;

                            try {
                                for (var _iterator41 = response.error[Symbol.iterator](), _step43; !(_iteratorNormalCompletion41 = (_step43 = _iterator41.next()).done); _iteratorNormalCompletion41 = true) {
                                    var _msg = _step43.value;

                                    _errorMSG += getters.tr(_msg) + "\n";
                                } // eslint-disable-next-line no-alert
                            } catch (err) {
                                _didIteratorError41 = true;
                                _iteratorError41 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion41 && _iterator41.return) {
                                        _iterator41.return();
                                    }
                                } finally {
                                    if (_didIteratorError41) {
                                        throw _iteratorError41;
                                    }
                                }
                            }

                            alert(_errorMSG);
                        } else {
                            // eslint-disable-next-line no-alert
                            alert("La orden de venta " + params.sernr + " no pudo ser \"MODIFICADA O GUARDADA\". Favor de comunicarse con su ejecutivo de cuentas " + (", " + salesmanText) + ".");
                        }
                    }
                }
                resolve(response);
            }).catch(function (error) {
                resolve(error);
            });
        });
    },
    deleteItemCurrenOrder: function deleteItemCurrenOrder(_ref66, item) {
        var commit = _ref66.commit,
            state = _ref66.state,
            dispatch = _ref66.dispatch;

        var currentOrder = Object.assign({}, state.currentOrder);
        for (var i = 0; i < currentOrder.fields.Items.length; i++) {
            if (currentOrder.fields.Items[i].fields.internalId === item.fields.internalId) {
                currentOrder.fields.Items.splice(i, 1);
                break;
            }
        }
    },
    updateUserInfo: function updateUserInfo(_ref67, params) {
        var commit = _ref67.commit,
            state = _ref67.state,
            dispatch = _ref67.dispatch;

        return new Promise(function (resolve, reject) {
            axios.post('/ecommerce/api/updatePerson', params).then(function (response) {
                response = response.data;
                dispatch('updateGenericUser', !response.success);
                dispatch('updateSession', response.person);
                resolve(response);
            }).catch(function (error) {
                console.log('Error response in Update UserInfo', error);
                dispatch('updateGenericUser', false);
                resolve(error);
            });
        });
    },
    sendToCarFavouriteOrder: function sendToCarFavouriteOrder(_ref68, params) {
        var commit = _ref68.commit,
            state = _ref68.state,
            dispatch = _ref68.dispatch;

        commit('clearItemToCar');
        var itemList = [];
        var _iteratorNormalCompletion42 = true;
        var _didIteratorError42 = false;
        var _iteratorError42 = undefined;

        try {
            for (var _iterator42 = params.FavouriteOrder[1][Symbol.iterator](), _step44; !(_iteratorNormalCompletion42 = (_step44 = _iterator42.next()).done); _iteratorNormalCompletion42 = true) {
                var _item4 = _step44.value;

                var _itemStore = state.items_store.get(_item4[0]);
                if (!_itemStore) _itemStore = _item4;
                _itemStore['carCant'] = _item4[1];
                itemList.push(_itemStore);
            }
        } catch (err) {
            _didIteratorError42 = true;
            _iteratorError42 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion42 && _iterator42.return) {
                    _iterator42.return();
                }
            } finally {
                if (_didIteratorError42) {
                    throw _iteratorError42;
                }
            }
        }

        dispatch('updatePrices', itemList);
        var _iteratorNormalCompletion43 = true;
        var _didIteratorError43 = false;
        var _iteratorError43 = undefined;

        try {
            for (var _iterator43 = itemList[Symbol.iterator](), _step45; !(_iteratorNormalCompletion43 = (_step45 = _iterator43.next()).done); _iteratorNormalCompletion43 = true) {
                var _item5 = _step45.value;

                dispatch('ItemComponentAddToCar', _item5);
            }
        } catch (err) {
            _didIteratorError43 = true;
            _iteratorError43 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion43 && _iterator43.return) {
                    _iterator43.return();
                }
            } finally {
                if (_didIteratorError43) {
                    throw _iteratorError43;
                }
            }
        }
    },
    loadCustomerPersons: function loadCustomerPersons(_ref69, params) {
        var commit = _ref69.commit,
            state = _ref69.state,
            dispatch = _ref69.dispatch;

        commit('clearCustomerPersons');
        axios.get('/ecommerce/api/getPersonsAssociated').then(function (response) {
            if (response.data.ok) {
                commit('loadCustomerPersons', response.data.persons);
            }
        });
    },
    AddCustomerPerson: function AddCustomerPerson(_ref70, params) {
        var commit = _ref70.commit,
            state = _ref70.state,
            dispatch = _ref70.dispatch;

        commit('addCustomerPerson', params);
    },
    updateSelectLinkto: function updateSelectLinkto(_ref71, params) {
        var commit = _ref71.commit,
            state = _ref71.state,
            dispatch = _ref71.dispatch;

        commit('updateSelectLinkto', params);
    },
    updateCustomerPerson: function updateCustomerPerson(_ref72, params) {
        var commit = _ref72.commit,
            state = _ref72.state,
            dispatch = _ref72.dispatch;

        commit('updateCustomerPerson', params);
    },
    loadCustomerAddresses: function loadCustomerAddresses(_ref73, params) {
        var commit = _ref73.commit,
            state = _ref73.state,
            dispatch = _ref73.dispatch;

        commit('clearCustomerAddresses');
        return new Promise(function (resolve, reject) {
            axios.get('/ecommerce/api/getDeliveryAddress').then(function () {
                var _ref74 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(response) {
                    var CustomerAddresses, obj, _iteratorNormalCompletion44, _didIteratorError44, _iteratorError44, _iterator44, _step46, a;

                    return regeneratorRuntime.wrap(function _callee11$(_context11) {
                        while (1) {
                            switch (_context11.prev = _context11.next) {
                                case 0:
                                    CustomerAddresses = [];

                                    if (!(response.data.deliveryAddress.length > 0)) {
                                        _context11.next = 23;
                                        break;
                                    }

                                    obj = {};
                                    _iteratorNormalCompletion44 = true;
                                    _didIteratorError44 = false;
                                    _iteratorError44 = undefined;
                                    _context11.prev = 6;

                                    for (_iterator44 = response.data.deliveryAddress[Symbol.iterator](); !(_iteratorNormalCompletion44 = (_step46 = _iterator44.next()).done); _iteratorNormalCompletion44 = true) {
                                        a = _step46.value;

                                        obj = {};
                                        obj.Code = a.Code;
                                        obj.Name = a.Name;
                                        obj.Address = a.Address;
                                        obj.City = a.City;
                                        obj.ZipCode = a.ZipCode;
                                        obj.ProvinceCode = a.ProvinceCode;
                                        obj.Province = a.Province;
                                        obj.LocalityCode = a.LocalityCode;
                                        obj.Locality = a.Locality;
                                        obj.Country = a.Country;
                                        obj.Street = a.Street;
                                        obj.StreetNumber = a.StreetNumber;
                                        obj.Floor = a.Floor;
                                        obj.Apartment = a.Apartment;
                                        obj.Latitude = a.Latitude;
                                        obj.Longitude = a.Longitude;
                                        obj.normalize = !a.Latitude || !a.Longitude;
                                        obj.CustomLocation = a.CustomLocation;
                                        CustomerAddresses.push(obj);
                                    }
                                    _context11.next = 14;
                                    break;

                                case 10:
                                    _context11.prev = 10;
                                    _context11.t0 = _context11["catch"](6);
                                    _didIteratorError44 = true;
                                    _iteratorError44 = _context11.t0;

                                case 14:
                                    _context11.prev = 14;
                                    _context11.prev = 15;

                                    if (!_iteratorNormalCompletion44 && _iterator44.return) {
                                        _iterator44.return();
                                    }

                                case 17:
                                    _context11.prev = 17;

                                    if (!_didIteratorError44) {
                                        _context11.next = 20;
                                        break;
                                    }

                                    throw _iteratorError44;

                                case 20:
                                    return _context11.finish(17);

                                case 21:
                                    return _context11.finish(14);

                                case 22:
                                    commit('loadCustomerAddresses', CustomerAddresses);

                                case 23:
                                    resolve(CustomerAddresses);

                                case 24:
                                case "end":
                                    return _context11.stop();
                            }
                        }
                    }, _callee11, this, [[6, 10, 14, 22], [15,, 17, 21]]);
                }));

                return function (_x30) {
                    return _ref74.apply(this, arguments);
                };
            }());
        });
    },
    AddAddressCustomer: function AddAddressCustomer(_ref75, params) {
        var commit = _ref75.commit,
            state = _ref75.state,
            dispatch = _ref75.dispatch;

        return new Promise(function (resolve, reject) {
            params['EntityType'] = 0;
            params['Entity'] = state.customer.Code;
            params['EntityName'] = state.customer.Name;
            console.log("Before Send", params);
            axios.post('/ecommerce/api/saveRecord', {
                recordName: 'CompanyAddress',
                payload: params
            }).then(function () {
                var _ref76 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(response) {
                    var obj;
                    return regeneratorRuntime.wrap(function _callee12$(_context12) {
                        while (1) {
                            switch (_context12.prev = _context12.next) {
                                case 0:
                                    if (response.data.success) {
                                        obj = {};

                                        obj.Code = response.data.record.fields.Code;
                                        obj.Name = response.data.record.fields.Name;
                                        obj.Address = response.data.record.fields.Address;
                                        obj.City = response.data.record.fields.City;
                                        obj.ZipCode = response.data.record.fields.ZipCode;
                                        obj.ProvinceCode = response.data.record.fields.ProvinceCode;
                                        obj.Province = response.data.record.fields.Province;
                                        obj.Country = response.data.record.fields.Country;
                                        obj.Locality = response.data.record.fields.Locality;
                                        obj.Latitude = response.data.record.fields.Latitude;
                                        obj.Longitude = response.data.record.fields.Longitude;
                                        obj.normalize = !response.data.record.fields.Latitude || !response.data.record.fields.Longitude;
                                        obj.CustomLocation = response.data.record.CustomLocation;
                                        dispatch('showNotificacion', {
                                            title: '',
                                            message: "New address added",
                                            type: 'success'
                                        });
                                        commit('AddAddressCustomer', obj);
                                    }
                                    resolve(response.data);

                                case 2:
                                case "end":
                                    return _context12.stop();
                            }
                        }
                    }, _callee12, this);
                }));

                return function (_x31) {
                    return _ref76.apply(this, arguments);
                };
            }());
        });
    },
    editAddressCustomer: function editAddressCustomer(_ref77, params) {
        var commit = _ref77.commit,
            state = _ref77.state,
            dispatch = _ref77.dispatch;

        console.log("Before Update Address", params);
        return new Promise(function (resolve, reject) {
            axios.post('/ecommerce/api/updateAddress', {
                address: params
            }).then(function () {
                var _ref78 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(response) {
                    var obj;
                    return regeneratorRuntime.wrap(function _callee13$(_context13) {
                        while (1) {
                            switch (_context13.prev = _context13.next) {
                                case 0:
                                    if (response.data.success) {
                                        obj = {};

                                        obj.Code = response.data.record.fields.Code;
                                        obj.Name = response.data.record.fields.Name;
                                        obj.Address = response.data.record.fields.Address;
                                        obj.City = response.data.record.fields.City;
                                        obj.ZipCode = response.data.record.fields.ZipCode;
                                        obj.ProvinceCode = response.data.record.fields.ProvinceCode;
                                        obj.Province = response.data.record.fields.Province;
                                        obj.Country = response.data.record.fields.Country;
                                        obj.Locality = response.data.record.fields.Locality;
                                        obj.CountryName = response.data.record.fields.Country;
                                        obj.Street = response.data.record.fields.Street;
                                        obj.StreetNumber = response.data.record.fields.StreetNumber;
                                        obj.Floor = response.data.record.fields.Floor;
                                        obj.Apartment = response.data.record.fields.Apartment;
                                        obj.Latitude = response.data.record.fields.Latitude;
                                        obj.Longitude = response.data.record.fields.Longitude;
                                        obj.normalize = !response.data.record.fields.Latitude || !response.data.record.fields.Longitude;
                                        obj.CustomLocation = response.data.record.CustomLocation;
                                        if (params._need_normalize) commit("setDeliveryAddressConfirmation", obj);else dispatch('showNotificacion', { title: '', message: "Direccion guardada", type: 'success' });
                                        commit('updateAddressCustomer', obj);
                                        resolve(obj);
                                    } else resolve(response.data.success);

                                case 1:
                                case "end":
                                    return _context13.stop();
                            }
                        }
                    }, _callee13, this);
                }));

                return function (_x32) {
                    return _ref78.apply(this, arguments);
                };
            }());
        });
    },
    disableAddress: function disableAddress(_ref79, Address) {
        var commit = _ref79.commit,
            state = _ref79.state,
            dispatch = _ref79.dispatch;

        axios.post('/ecommerce/api/disableAddress', { AddressCode: Address.Code }).then(function (response) {
            console.log(response.data);
            if (response.data.success) {
                dispatch('showNotificacion', {
                    title: '',
                    message: "Registro direccion " + Address.Code + " cerrado",
                    type: 'success'
                });
                commit('DisableAddress', Address.Code);
            }
        }).catch(function (error) {
            console.log(error);
        });
    },
    clearSelectsLinkto: function clearSelectsLinkto(_ref80) {
        var commit = _ref80.commit,
            state = _ref80.state,
            dispatch = _ref80.dispatch;

        commit('updateSelectLinkto', { table: 'Department', value: "" });
        commit('updateSelectLinkto', { table: 'JobPosition', value: "" });
        commit('updateSelectLinkto', { table: 'WebAccessGroup', value: "" });
        commit('updateSelectLinkto', { table: 'Country', value: "" });
        commit('updateSelectLinkto', { table: 'City', value: "" });
    },
    ChangeActivationCustomerPerson: function ChangeActivationCustomerPerson(_ref81, personCode) {
        var commit = _ref81.commit,
            state = _ref81.state,
            dispatch = _ref81.dispatch;

        axios.post('/ecommerce/api/changeActivationCustomerPerson', { personCode: personCode }).then(function (response) {
            console.log(response.data);
            if (response.data.success) commit('updateCustomerPerson', response.data.person);
        }).catch(function (error) {
            console.log(error);
        });
    },
    updateOrderDeliveryData: function updateOrderDeliveryData(_ref82, delData) {
        var commit = _ref82.commit,
            state = _ref82.state,
            dispatch = _ref82.dispatch;

        commit('updateOrderDeliveryData', delData);
    },
    updateOrderCenterCost: function updateOrderCenterCost(_ref83, centerCost) {
        var commit = _ref83.commit,
            state = _ref83.state,
            dispatch = _ref83.dispatch;

        commit('updateOrderCenterCost', centerCost.Code);
    },
    showNotificacion: function showNotificacion(_ref84, Notificacion) {
        var commit = _ref84.commit,
            state = _ref84.state,
            dispatch = _ref84.dispatch;

        window.$Event.$emit('toast', Notificacion);
    },
    loadZoneFromZipCode: function loadZoneFromZipCode(_ref85, ZipCode) {
        var commit = _ref85.commit,
            state = _ref85.state,
            dispatch = _ref85.dispatch;

        axios.post('/ecommerce/api/getDaysByZipCode', { zipCode: ZipCode }).then(function (response) {
            var daysByZone = defaultState.daysByZone;
            if (response.data.zone) {
                daysByZone = {
                    Friday: response.data.zone.Friday,
                    Monday: response.data.zone.Monday,
                    Saturday: response.data.zone.Saturday,
                    Sunday: response.data.zone.Sunday,
                    Thursday: response.data.zone.Thursday,
                    Tuesday: response.data.zone.Tuesday,
                    Wednesday: response.data.zone.Wednesday
                };
            }
            console.log('MyZone', daysByZone);
            commit('updateDaysByZone', daysByZone);
        }).catch(function (error) {
            commit('updateDaysByZone', defaultState.daysByZone);
        });
    },
    updateAvatar: function updateAvatar(_ref86, params) {
        var commit = _ref86.commit,
            state = _ref86.state,
            dispatch = _ref86.dispatch;

        commit('updateAvatar', params);
    }
};

// eslint-disable-next-line no-unused-vars
var defaultMutation = {
    resetAutoLogout: function resetAutoLogout(state, autoLogout) {
        state.resetAutoLogout = autoLogout;
    },
    updateCarShipModes: function updateCarShipModes(state, shipModes) {
        state.shipModes = shipModes;
        state.shipModeFlag = Math.floor(Math.random() * 1000000 + 1);
    },
    updateAvatar: function updateAvatar(state, url) {
        state.Avatar = url;
    },
    setDeliveryAddressConfirmation: function setDeliveryAddressConfirmation(state, deliveryAddressConfirm) {
        state.deliveryAddressConfirm = __lodash__.cloneDeep(deliveryAddressConfirm);
    },
    setCustomerMapFields: function setCustomerMapFields(state, customerMapField) {
        state.customerMapFields = Object.freeze(customerMapField);
    },

    setCustomerTaxReg: function setCustomerTaxReg(state, customerTaxReg) {
        state.customerTaxReg = customerTaxReg;
    },
    setCustomerIdtypes: function setCustomerIdtypes(state, customerIdtypes) {
        state.customerIdtypes = customerIdtypes;
    },
    updateCarFlag: function updateCarFlag(state) {
        state.carFlag = Math.floor(Math.random() * 1000000 + 1);
    },
    updateCarOrderTemplate: function updateCarOrderTemplate(state, newCarOrderTemplate) {
        state.carOrderTemplate = newCarOrderTemplate;
    },
    changeStoreValue: function changeStoreValue(state, changeObj) {
        state[changeObj.stateField] = changeObj.value;
    },
    changeAfterLogin: function changeAfterLogin(state, afterLoginPath) {
        state.afterLoginPath = afterLoginPath;
    },
    checkStockQty: function checkStockQty(state) {
        if (state.setting.ControlStockForSales) {
            var needUpdateUi = false;
            var _iteratorNormalCompletion45 = true;
            var _didIteratorError45 = false;
            var _iteratorError45 = undefined;

            try {
                for (var _iterator45 = state.items_in_map.entries()[Symbol.iterator](), _step47; !(_iteratorNormalCompletion45 = (_step47 = _iterator45.next()).done); _iteratorNormalCompletion45 = true) {
                    var _step47$value = _slicedToArray(_step47.value, 2),
                        key = _step47$value[0],
                        value = _step47$value[1];

                    var giftCardItem = store.getters.getGiftCardItem;
                    if (giftCardItem && giftCardItem.fields.Code != key) {
                        var _itemStore2 = state.items_store.get(value.id);
                        if (!_itemStore2 || value.cant > _itemStore2.Qty) {
                            needUpdateUi = true;
                            state.items_in_map.delete(key);
                        }
                    }
                }
            } catch (err) {
                _didIteratorError45 = true;
                _iteratorError45 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion45 && _iterator45.return) {
                        _iterator45.return();
                    }
                } finally {
                    if (_didIteratorError45) {
                        throw _iteratorError45;
                    }
                }
            }

            if (needUpdateUi) state.items_in_car = Array.from(state.items_in_map.values());
            if (state.carOrderTemplate && state.carOrderTemplate.fields) {
                var _iteratorNormalCompletion46 = true;
                var _didIteratorError46 = false;
                var _iteratorError46 = undefined;

                try {
                    var _loop3 = function _loop3() {
                        var soRow = _step48.value;

                        var itemStore = state.items_store.get(soRow.fields.ArtCode);
                        if (!itemStore || soRow.fields.Qty > itemStore.Qty) {
                            needUpdateUi = true;
                            state.carOrderTemplate.fields.Items = state.carOrderTemplate.fields.Items.filter(function (x) {
                                return x.fields.ArtCode != soRow.fields.ArtCode;
                            });
                        }
                    };

                    for (var _iterator46 = state.carOrderTemplate.fields.Items[Symbol.iterator](), _step48; !(_iteratorNormalCompletion46 = (_step48 = _iterator46.next()).done); _iteratorNormalCompletion46 = true) {
                        _loop3();
                    }
                } catch (err) {
                    _didIteratorError46 = true;
                    _iteratorError46 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion46 && _iterator46.return) {
                            _iterator46.return();
                        }
                    } finally {
                        if (_didIteratorError46) {
                            throw _iteratorError46;
                        }
                    }
                }

                if (state.carOrderTemplate.fields.Items.length === 0) state.carOrderTemplate = null;
            }
            if (needUpdateUi) state.carFlag = Math.floor(Math.random() * 1000000 + 1);
        }
    },
    clearSalesOrderFields: function clearSalesOrderFields(state) {
        state.order_Office = null;
        state.order_DelAddress = null;
        state.order_DelCity = null;
        state.order_DelProvinceCode = null;
        state.order_DelCountry = null;
        state.oorder_DelLocalityCode = null;
        state.order_DeliveryDate = moment().format('YYYY-MM-DD');
        state.order_DelDay = null;
        state.order_DelDay = null;
        state.order_DelHour = null;

        state.order_PayTerm = null;
        state.order_ShipMode = null;
        state.order_DelZipCode = null;
        state.order_Comment = null;
        state.order_PayTerm = null;
        state.order_CenterCost = null;
        state.order_ReceptionManager = null;
        state.order_Campaign = null;
    },
    changeCenterCostRequire: function changeCenterCostRequire(state, requireCC) {
        state.requireCenterCost = requireCC;
    },
    updateDaysByZone: function updateDaysByZone(state, daysByZone) {
        state.daysByZone = daysByZone;
    },
    updateLockScreen: function updateLockScreen(state, lockStatus) {
        state.screenState = lockStatus.visible;
        if (lockStatus.msg) state.screenMsg = lockStatus.msg;else state.screenMsg = '';
    },
    updateHomeSections: function updateHomeSections(state, newHomeSections) {
        state.homeSections = newHomeSections;
    },
    resetState: function resetState(state) {
        state = defaultState;
        window.runCustomSettings();
    },
    updateItemsIsLoaded: function updateItemsIsLoaded(state, newStatus) {
        state.itemsFullLoader = newStatus;
    },
    eventIOItem: function eventIOItem(state, event) {
        //console.log(event.value);
        switch (event.action) {
            case 'updateStore':
                if (state.items_store.has(event.value.Code)) {
                    /*state.items = state.items.filter(x => x.Code != event.value);
                        state.items_visible = state.items_visible.filter(x => x.Code != event.value);*/
                    state.items_store.set(event.value.Code);
                }
                //store.state.items_store.set(event.value.Code)
                break;
            case 'deleteFromStore':
                state.items = state.items.filter(function (x) {
                    return x.Code != event.value;
                });
                state.items_visible = state.items_visible.filter(function (x) {
                    return x.Code != event.value;
                });
                state.items_store.delete(event.value);
                break;
        }
        state.itemTimeFlag = Math.floor(Math.random() * 1000000 + 1);
    },
    updateOrderView: function updateOrderView(state, newState) {
        state.orderView = newState;
    },
    updateRedirectLogin: function updateRedirectLogin(state, redirectPath) {
        state.redirectAfterLogin = redirectPath;
    },
    updatePreserveStatus: function updatePreserveStatus(state, perserveStatus) {
        state.carPreserveInfo = perserveStatus;
    },
    updateSocketReady: function updateSocketReady(state, socketStatus) {
        state.socketReady = socketStatus;
    },
    updateOrderDeliveryData: function updateOrderDeliveryData(state, newData) {
        Object.assign(state, newData);
    },
    updateOrderCenterCost: function updateOrderCenterCost(state, newCenterCost) {
        state.order_CenterCost = newCenterCost;
    },
    updateSelectLinkto: function updateSelectLinkto(state, obj) {
        var selectLinkToOptionsNew = Object.assign({}, state.selectLinkToOptions);
        selectLinkToOptionsNew[obj.table] = obj.value;
        state.selectLinkToOptions = selectLinkToOptionsNew;
        //console.log(state.selectLinkToOptions, 'mutation selectLinktoOption')
        /*let i = state.selectLinkToOptions.findIndex(x => x[0] === obj[0])
         if(i !== -1)
         state.selectLinkToOptions[i][1]=obj[1] //actualizo valor
         else
         state.selectLinkToOptions.push(obj)  */
    },

    /* resetSelectLinkto(state) {
        state.selectLinkToOptions = newValue;
    },*/
    setOrderSelected: function setOrderSelected(state, newField) {
        state.orderSelected = newField;
    },
    setOrderBy: function setOrderBy(state, newField) {
        state.orderBy = newField;
    },
    setOrderDirection: function setOrderDirection(state, newField) {
        state.orderDirection = newField;
    },
    setLanguage: function setLanguage(state, newDict) {
        state.translateDict = Object.freeze(newDict);
    },
    updateCarAmount: function updateCarAmount(state, getters) {
        if (state.carOrderTemplate && state.carOrderTemplate.fields) {
            if (state.setting.ShowPriceWithIVA) state.total_in_car = state.carOrderTemplate.fields.Total;else state.total_in_car = state.carOrderTemplate.fields.SubTotal;
        } else {

            var getItemPrice = function getItemPrice(item, getters) {
                var price = item.Price;
                if (getters.getPriceToShow) price = item.RowTotal;else {
                    if (item.RowNet) price = item.RowNet;
                }
                if (Number.isNaN(price) || price === null) price = 0;
                var priceResult = parseFloat(Math.round(parseFloat(price) * 100) / 100).toFixed(2);
                //console.log( 'ItemPrice Result',priceResult,price );
                return priceResult;
            };

            var carAmount = 0;
            var _iteratorNormalCompletion47 = true;
            var _didIteratorError47 = false;
            var _iteratorError47 = undefined;

            try {
                for (var _iterator47 = state.items_in_car[Symbol.iterator](), _step49; !(_iteratorNormalCompletion47 = (_step49 = _iterator47.next()).done); _iteratorNormalCompletion47 = true) {
                    var _item6 = _step49.value;

                    var _itemStore3 = state.items_store.get(_item6.id);
                    if (!_itemStore3 && !_item6.giftcardCode) {
                        _itemStore3 = _item6.item;
                        _itemStore3.message = "Item Removed";
                    }
                    if (_item6.giftcardCode) {
                        carAmount = carAmount + parseFloat(_item6.amount);
                    } else {
                        if (isNaN(_item6.cant)) _item6.cant = 0;
                        carAmount = carAmount + parseFloat(_item6.cant) * parseFloat(getItemPrice(_itemStore3, getters));
                    }
                }
            } catch (err) {
                _didIteratorError47 = true;
                _iteratorError47 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion47 && _iterator47.return) {
                        _iterator47.return();
                    }
                } finally {
                    if (_didIteratorError47) {
                        throw _iteratorError47;
                    }
                }
            }

            if (state.total_in_car != carAmount) state.total_in_car = carAmount;
        }
        /*
            axios.post('/ecommerce/api/saveCarSession', {state:state.appState, from:'updateCarAmount','items': JSON.stringify(state.items_in_car)})
                .catch(function (error) {
                    console.log(error);
            });
        */
    },
    resetItemToCar: function resetItemToCar(state, status) {
        state.carOrderTemplate = null;
        state.items_in_map = new Map();
        state.items_in_car = [];
        state.total_in_car = 0;
        state.cartStatus = status;
        state.carFlag = Math.floor(Math.random() * 1000000 + 1);
        axios.post('/ecommerce/api/saveCarSession', { state: state.appState, from: 'resetItemToCar', 'items': JSON.stringify(state.items_in_car) }).then(function (response) {
            console.log(response.data);
        }).catch(function (error) {
            console.log(error);
        });
    },
    clearItemToCar: function clearItemToCar(state, newStatus) {
        if (newStatus) state.cartStatus = newStatus;
        if (newStatus === 'result' || newStatus === 'clear') {
            state.carOrderTemplate = null;
            state.items_in_map = new Map();
            state.items_in_car = [];
            state.total_in_car = 0;
            axios.post('/ecommerce/api/saveCarSession', { state: state.appState, from: 'clearItemToCar', 'items': JSON.stringify(state.items_in_car) }).then(function (response) {
                console.log(response.data);
            }).catch(function (error) {
                console.log(error);
            });
        }
        state.carFlag = Math.floor(Math.random() * 1000000 + 1);
    },
    updateCarStatus: function updateCarStatus(state, newStatus) {
        state.cartStatus = newStatus;
    },
    reloadCarPrice: function reloadCarPrice(state, clearCodes) {
        var _iteratorNormalCompletion48 = true;
        var _didIteratorError48 = false;
        var _iteratorError48 = undefined;

        try {
            for (var _iterator48 = state.items_in_map.keys()[Symbol.iterator](), _step50; !(_iteratorNormalCompletion48 = (_step50 = _iterator48.next()).done); _iteratorNormalCompletion48 = true) {
                var itemCode = _step50.value;

                if (state.items_store.has(itemCode) && clearCodes.indexOf(itemCode) === -1) state.items_in_map.get(itemCode).item = state.items_store.get(itemCode);
            }
        } catch (err) {
            _didIteratorError48 = true;
            _iteratorError48 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion48 && _iterator48.return) {
                    _iterator48.return();
                }
            } finally {
                if (_didIteratorError48) {
                    throw _iteratorError48;
                }
            }
        }
    },
    updateSessionCar: function updateSessionCar(state, itemCart) {
        var _iteratorNormalCompletion49 = true;
        var _didIteratorError49 = false;
        var _iteratorError49 = undefined;

        try {
            for (var _iterator49 = itemCart[Symbol.iterator](), _step51; !(_iteratorNormalCompletion49 = (_step51 = _iterator49.next()).done); _iteratorNormalCompletion49 = true) {
                var _item7 = _step51.value;

                state.items_in_map.set(_item7.id, _item7);
            }
        } catch (err) {
            _didIteratorError49 = true;
            _iteratorError49 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion49 && _iterator49.return) {
                    _iterator49.return();
                }
            } finally {
                if (_didIteratorError49) {
                    throw _iteratorError49;
                }
            }
        }

        state.items_in_car = Array.from(state.items_in_map.values());
        state.carFlag = Math.floor(Math.random() * 1000000 + 1);
    },
    updateItemToCar: function updateItemToCar(state, item) {
        var formaterQty = void 0;
        var storeItem = state.items_store.get(item.Code);
        if (storeItem && storeItem.OnlyIntegerValues === 1) {
            formaterQty = parseInt(item.carQty);
        } else {
            formaterQty = Math.round((parseFloat(item.carQty) + Number.EPSILON) * 100) / 100;
        }
        var itemCar = state.items_in_map.get(item.Code);
        if (itemCar) {
            var formaterCarQty = void 0;
            if (itemCar.OnlyIntegerValues === 1) {
                formaterCarQty = parseInt(itemCar.cant);
            } else {
                formaterCarQty = Math.round((parseFloat(itemCar.cant) + Number.EPSILON) * 100) / 100;
            }
            if (formaterQty) {
                state.items_in_map.get(item.Code).cant = formaterCarQty + formaterQty;
            }
        } else {
            state.items_in_map.set(item.Code, { id: item.Code, cant: formaterQty, item: item, message: null, variant: item.Variants != undefined });
        }
        state.items_in_car = Array.from(state.items_in_map.values());
        item.carQty = 0;
        state.carFlag = Math.floor(Math.random() * 1000000 + 1);
        if (state.session) saveCarSession(state.appState, 'updateItemToCar', JSON.stringify(state.items_in_car)).then(function (response) {
            console.log("Throtelled SaveCarSession", JSON.stringify(state.items_in_car));
        });
        /*axios.post('/ecommerce/api/saveCarSession', {state:state.appState, from:'updateItemToCar', 'items': JSON.stringify(state.items_in_car)})
            .then(function (response) {
                console.log(response.data);
            })
            .catch(function (error) {
                console.log(error);
            });*/
    },
    updateCarQty: function updateCarQty(state, params) {
        switch (params.action) {
            case 'up':
                state.items_in_map.get(params.itemCode).cant = state.items_in_map.get(params.itemCode).cant + 1;
                break;
            case 'down':
                if (state.items_in_map.get(params.itemCode).cant > 0) state.items_in_map.get(params.itemCode).cant = state.items_in_map.get(params.itemCode).cant - 1;
                break;
            case 'delete':
                state.items_in_map.delete(params.itemCode);
                break;
            case 'update':
                if (state.items_in_map.get(params.itemCode) && params.qty) state.items_in_map.get(params.itemCode).cant = params.qty;
        }
        state.items_in_car = Array.from(state.items_in_map.values());
        axios.post('/ecommerce/api/saveCarSession', { state: state.appState, from: 'updateCarQty', 'items': JSON.stringify(state.items_in_car) });
    },
    updateIsLogin: function updateIsLogin(state, SessionisLogin) {
        state.isLoggin = SessionisLogin;
    },
    clearCustomerPersons: function clearCustomerPersons(state) {
        state.CustomerPersons.length = 0;
    },
    loadCustomerPersons: function loadCustomerPersons(state, persons) {
        state.CustomerPersons = persons;
    },
    addCustomerPerson: function addCustomerPerson(state, person) {
        if (!state.CustomerPersons.includes(person)) {
            state.CustomerPersons.push(person);
            //console.log(state.CustomerPersons,'state.CustomerPersons')
        }
    },
    updateCustomerPerson: function updateCustomerPerson(state, Person) {
        var cloneCustomerPersons = _.cloneDeep(state.CustomerPersons);
        if (cloneCustomerPersons.findIndex(function (x) {
            return x.Code === Person.Code;
        }) !== -1) {
            cloneCustomerPersons[cloneCustomerPersons.findIndex(function (x) {
                return x.Code === Person.Code;
            })] = Person;
            state.CustomerPersons = cloneCustomerPersons;
        }
    },

    //TODO esto estaba cuando puse cerrar registro persona, campo close en true , q lo eliminaba del state
    /*CloseCustomerPerson(state, personCode) {
        let cloneCustomerPersons = _.cloneDeep(state.CustomerPersons)
        if (cloneCustomerPersons.findIndex(x => x.Code === personCode) !== -1) {
            cloneCustomerPersons.splice(cloneCustomerPersons.findIndex(x => x.Code === personCode), 1);
            state.CustomerPersons = cloneCustomerPersons;
        }
    },*/

    clearCustomerAddresses: function clearCustomerAddresses(state) {
        state.CustomerAddresses.length = 0;
    },
    loadCustomerAddresses: function loadCustomerAddresses(state, Addresses) {
        state.CustomerAddresses = Addresses;
    },
    AddAddressCustomer: function AddAddressCustomer(state, address) {
        if (!state.CustomerAddresses.includes(address)) {
            state.CustomerAddresses.push(address);
        }
    },
    updateAddressCustomer: function updateAddressCustomer(state, address) {
        var cloneCustomerAddresses = _.cloneDeep(state.CustomerAddresses);
        var indexAddress = cloneCustomerAddresses.findIndex(function (x) {
            return x.Code === address.Code;
        });
        if (indexAddress !== -1) {
            console.log("Address", address);
            cloneCustomerAddresses[indexAddress] = address;
            console.log("Address", address);
            state.CustomerAddresses = cloneCustomerAddresses;
        }
    },
    DisableAddress: function DisableAddress(state, addressCode) {
        var cloneCustomerAddresses = _.cloneDeep(state.CustomerAddresses);
        if (cloneCustomerAddresses.findIndex(function (x) {
            return x.Code === addressCode;
        }) !== -1) {
            cloneCustomerAddresses.splice(cloneCustomerAddresses.findIndex(function (x) {
                return x.Code === addressCode;
            }), 1);
            state.CustomerAddresses = cloneCustomerAddresses;
        }
    },
    addFilter: function addFilter(state, newFilter) {
        state.filtersObjects.set(newFilter.name, newFilter);
        state.filters.push(newFilter.name);
    },
    removeFilter: function removeFilter(state, newFilter) {
        state.filtersObjects.delete(newFilter.name);
        state.filters.pop();
    },
    updateSetting: function updateSetting(state, newValue) {
        state.setting = newValue;
        if (newValue.ItemViewMode) state.defaultItemSize = newValue.ItemViewMode;

        var _iteratorNormalCompletion50 = true;
        var _didIteratorError50 = false;
        var _iteratorError50 = undefined;

        try {
            for (var _iterator50 = newValue.ItemOrdered[Symbol.iterator](), _step52; !(_iteratorNormalCompletion50 = (_step52 = _iterator50.next()).done); _iteratorNormalCompletion50 = true) {
                var orderField = _step52.value;

                if (orderField.fields.ByDefault) {
                    //console.log(orderField)
                    state.orderSelected = orderField.fields.internalId;
                    state.orderBy = orderField.fields.ItemField;
                    state.orderDirection = orderField.fields.OrderDirection;
                }
            }
        } catch (err) {
            _didIteratorError50 = true;
            _iteratorError50 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion50 && _iterator50.return) {
                    _iterator50.return();
                }
            } finally {
                if (_didIteratorError50) {
                    throw _iteratorError50;
                }
            }
        }
    },
    updateSession: function updateSession(state, newSession) {
        state.session = newSession;
    },
    updateGenericUser: function updateGenericUser(state, newValue) {
        state.mustUpdateInfo = newValue;
        //console.log('Updates Generic User', state.mustUpdateInfo, newValue);
    },
    updateSalesMan: function updateSalesMan(state, salesMan) {
        state.salesman = salesMan;
    },
    updateCustomer: function updateCustomer(state, customer) {
        state.customer = customer;
    },
    updateCurrentOrder: function updateCurrentOrder(state, newOrder) {
        state.currentOrder = newOrder;
    },
    updateCurrentFavOrder: function updateCurrentFavOrder(state, newOrder) {
        state.currentFavOrder = newOrder;
    },
    updateCurrentCustomerPerson: function updateCurrentCustomerPerson(state, CustomerPerson) {
        state.currentCustomerPerson = CustomerPerson;
    },
    updateIsLiberatorCenterCost: function updateIsLiberatorCenterCost(state, CenterLiberators) {
        state.CenterLiberators = CenterLiberators;
    },
    updateIsOnlyModifierCenterCost: function updateIsOnlyModifierCenterCost(state, CenterOnlyModifiedCodes) {
        state.CenterOnlyModifiedCodes = CenterOnlyModifiedCodes;
    },
    updateIsLiberatorOrder: function updateIsLiberatorOrder(state, isLiberator) {
        if (Array.isArray(isLiberator)) {
            state.liberatorCodes = isLiberator;
            state.order_can_liberate = isLiberator.length > 0;
        } else state.order_can_liberate = isLiberator;
    },
    updateIsOnlyModifier: function updateIsOnlyModifier(state, isModifier) {
        if (Array.isArray(isModifier)) {
            state.onlyModifiedCodes = isModifier;
            state.isOnlyModified = isModifier.length > 0;
        } else state.isOnlyModified = isModifier;
    },
    updateIsAdmin: function updateIsAdmin(state, isAdmin) {
        state.isAdmin = isAdmin;
    },
    updateOrderList: function updateOrderList(state, newValue) {
        state.order_list = newValue;
    },
    updateOrderTemplate: function updateOrderTemplate(state, orderTemplate) {
        state.orderTemplate = orderTemplate;
    },
    updateOrderEditableStates: function updateOrderEditableStates(state, orderStates) {
        state.order_editable_states = orderStates;
    },
    updateVatCode: function updateVatCode(state, vatCodeList) {
        var _iteratorNormalCompletion51 = true;
        var _didIteratorError51 = false;
        var _iteratorError51 = undefined;

        try {
            for (var _iterator51 = vatCodeList[Symbol.iterator](), _step53; !(_iteratorNormalCompletion51 = (_step53 = _iterator51.next()).done); _iteratorNormalCompletion51 = true) {
                var vatCode = _step53.value;

                state.vatCodeMap.set(vatCode.Code, vatCode);
            }
        } catch (err) {
            _didIteratorError51 = true;
            _iteratorError51 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion51 && _iterator51.return) {
                    _iterator51.return();
                }
            } finally {
                if (_didIteratorError51) {
                    throw _iteratorError51;
                }
            }
        }
    },
    updateTranslate: function updateTranslate(state, newDict) {
        state.translateDict = newDict;
    },
    updatePriceDeal: function updatePriceDeal(state, priceDeal) {
        state.priceDeal = priceDeal;
    },
    updateDiscountDeal: function updateDiscountDeal(state, discountDeal) {
        state.discountDeal = discountDeal;
    },
    updatesItemsStore: function updatesItemsStore(state, items) {
        //console.log('items in session',Object.freeze(items));
        state.items_store = ArrayToMap(items, 'Code');
        state.itemTimeFlag = Math.floor(Math.random() * 1000000 + 1);
    },
    updatesHomeItemsStore: function updatesHomeItemsStore(state, items) {
        //console.log('items in session',Object.freeze(items));
        state.itemInHome = ArrayToMap(items, 'Code');
        state.itemTimeFlag = Math.floor(Math.random() * 1000000 + 1);
    },
    updateItemsInStore: function updateItemsInStore(state, itemList) {
        var _iteratorNormalCompletion52 = true;
        var _didIteratorError52 = false;
        var _iteratorError52 = undefined;

        try {
            for (var _iterator52 = itemList[Symbol.iterator](), _step54; !(_iteratorNormalCompletion52 = (_step54 = _iterator52.next()).done); _iteratorNormalCompletion52 = true) {
                var _item8 = _step54.value;

                state.items_store.set(_item8.Code, _item8);
            }
        } catch (err) {
            _didIteratorError52 = true;
            _iteratorError52 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion52 && _iterator52.return) {
                    _iterator52.return();
                }
            } finally {
                if (_didIteratorError52) {
                    throw _iteratorError52;
                }
            }
        }
    },
    toogleCarModal: function toogleCarModal(state) {
        state.show_CarModal = !state.show_CarModal;
    },
    addFavorite: function addFavorite(state, itemCode) {
        //console.log( "mutacion favorites",itemCode );
        if (!state.favorites.includes(itemCode)) {
            state.favorites.push(itemCode);
        }
    },
    removeFavorite: function removeFavorite(state, itemCode) {
        var newFavorites = [];
        var _iteratorNormalCompletion53 = true;
        var _didIteratorError53 = false;
        var _iteratorError53 = undefined;

        try {
            for (var _iterator53 = state.favorites[Symbol.iterator](), _step55; !(_iteratorNormalCompletion53 = (_step55 = _iterator53.next()).done); _iteratorNormalCompletion53 = true) {
                var fav = _step55.value;

                if (fav != itemCode) newFavorites.push(fav);
            } //console.log('New',newFavorites);
        } catch (err) {
            _didIteratorError53 = true;
            _iteratorError53 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion53 && _iterator53.return) {
                    _iterator53.return();
                }
            } finally {
                if (_didIteratorError53) {
                    throw _iteratorError53;
                }
            }
        }

        state.favorites = newFavorites;
    },
    addFavouritesOrders: function addFavouritesOrders(state, e) {
        if (!state.favouritesOrders.includes(e)) state.favouritesOrders.push(e);
        //console.log( state.favouritesOrders,state.favouritesOrders.includes( e ) );
    },
    removeFavouritesOrders: function removeFavouritesOrders(state, e) {
        if (state.favouritesOrders.findIndex(function (x) {
            return x[0] === e[0];
        }) !== -1) state.favouritesOrders.splice(state.favouritesOrders.findIndex(function (x) {
            return x[0] === e[0];
        }), 1);
    },
    updateFavoriteOrderItemQty: function updateFavoriteOrderItemQty(state, FavOrder) {
        //console.log( FavOrder, 'FavOrder to APP' );

        //console.log( state.currentFavOrder, 'currentFavOrder IN APP' );
    },
    clearCurrentFavOrder: function clearCurrentFavOrder(state) {
        state.currentFavOrder = null;
    },
    updatesCatList: function updatesCatList(state, categories) {
        state.cat_list = categories;
    },
    addItemsList: function addItemsList(state, newItems) {
        if (Array.isArray(newItems)) {
            state.pageOffset = 0;
            state.items = state.items.concat(newItems);
        } else console.log('Error Type is not Array', newItems);
        state.items_visible = __lodash__.orderBy(state.items.filter(function (x) {
            return x.visible;
        }), state.orderBy, state.orderDirection);
        state.itemTimeFlag = Math.floor(Math.random() * 1000000 + 1);
    },
    updateItemByCode: function updateItemByCode(state, itemObject) {
        state.items_store.set(itemObject.code, itemObject.item);
        //console.log('updateItemByCode')
    },
    updatesItemsList: function updatesItemsList(state, newItems) {
        //console.log( 'Muting Items List', newItems );
        if (Array.isArray(newItems)) {
            state.pageOffset = 0;
            state.items = newItems;
        } else console.log('Error Type is not Array', newItems);
        state.items_visible = __lodash__.orderBy(state.items.filter(function (x) {
            return x.visible;
        }), state.orderBy, state.orderDirection);
        state.itemUpdate = Math.floor(Math.random() * 1000000 + 1);
        state.itemTimeFlag = Math.floor(Math.random() * 1000000 + 1);
    },
    clearItemList: function clearItemList(state) {
        state.items = [];
        state.items_visible = [];
        state.itemTimeFlag = Math.floor(Math.random() * 1000000 + 1);
    },
    updateItemFlag: function updateItemFlag(state) {
        state.itemUpdate = Math.floor(Math.random() * 1000000 + 1);
        state.itemTimeFlag = Math.floor(Math.random() * 1000000 + 1);
    },
    updateItemItemFlag: function updateItemItemFlag(state, newValue) {
        state.itemTimeFlag = Math.floor(Math.random() * 1000000 + 1);
    },
    updateAppState: function updateAppState(state, newState) {
        state.appState = newState;
    },
    updateCategoryMap: function updateCategoryMap(state, catList) {
        var nameMap = new Map();
        var codeMap = new Map();
        var _iteratorNormalCompletion54 = true;
        var _didIteratorError54 = false;
        var _iteratorError54 = undefined;

        try {
            for (var _iterator54 = catList[Symbol.iterator](), _step56; !(_iteratorNormalCompletion54 = (_step56 = _iterator54.next()).done); _iteratorNormalCompletion54 = true) {
                var cat = _step56.value;

                if (!nameMap.has(cat.name)) nameMap.set(cat.name, cat);
                if (!codeMap.has(cat.code)) codeMap.set(cat.code, cat);
            }
        } catch (err) {
            _didIteratorError54 = true;
            _iteratorError54 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion54 && _iterator54.return) {
                    _iterator54.return();
                }
            } finally {
                if (_didIteratorError54) {
                    throw _iteratorError54;
                }
            }
        }

        state.cat_by_name = Object.freeze(nameMap);
        state.cat_by_code = Object.freeze(codeMap);
    },
    updateCategory: function updateCategory(state, category) {
        var history = [];
        if (category) {
            GetCategoryPath(category.code, state.cat_list[0], history);
        }
        state.cat_selected = category;
        state.cat_history = history.reverse();
    },
    updateCategoryHistory: function updateCategoryHistory(state, parameters) {
        //console.log('History TEst',parameters)
        if (parameters.temp) {
            state.cat_history_temp = state.cat_history_temp.filter(function (x) {
                return x.lvl < parameters.lvl;
            });
            parameters.category.lvl = parameters.lvl;
            state.cat_history_temp.push(parameters.category);
        } else {
            state.cat_history = state.cat_history_temp;
        }
    },
    updateGifts: function updateGifts(state, customerGifts) {
        state.customerGifts = customerGifts;
    },
    updateSuggestions: function updateSuggestions(state, suggestions) {
        state.suggestionList = suggestions;
    },
    restoreHistory: function restoreHistory(state) {
        state.cat_history = [];
        state.cat_history_temp = [];
    },
    restoreFilter: function restoreFilter(state) {
        state.filters = [];
        state.filtersObjects = new Map();
    },
    updateOurSettingsCountry: function updateOurSettingsCountry(state, Country) {
        state.OurSettingsCountry = Country;
    },
    updateGiftCardItem: function updateGiftCardItem(state, Code) {
        state.giftCardItem = Code;
    },
    updateGiftCardApplied: function updateGiftCardApplied(state, rec) {
        state.giftCardApplied = rec;
    },
    updateCampaignApplied: function updateCampaignApplied(state, rec) {
        state.campaignApplied = rec;
    }
};

window.vuexModules = {};
// eslint-disable-next-line no-unused-vars
function loadDinamicRouters(settings) {
    console.log('Standard Router Settings', settings);
    var _iteratorNormalCompletion55 = true;
    var _didIteratorError55 = false;
    var _iteratorError55 = undefined;

    try {
        for (var _iterator55 = settings.fields.DynamicPages[Symbol.iterator](), _step57; !(_iteratorNormalCompletion55 = (_step57 = _iterator55.next()).done); _iteratorNormalCompletion55 = true) {
            var dynamicPage = _step57.value;

            if (dynamicPage.fields.Status) globalRouter.splice(globalRouter.length - 2, 0, {
                name: "TemplatePageRoute" + dynamicPage.fields.PagePath,
                path: "/" + dynamicPage.fields.PagePath,
                component: { template: "<templatePage templateCode=\"" + dynamicPage.fields.HTMLTemplate + "\" />" }
            });
        }
    } catch (err) {
        _didIteratorError55 = true;
        _iteratorError55 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion55 && _iterator55.return) {
                _iterator55.return();
            }
        } finally {
            if (_didIteratorError55) {
                throw _iteratorError55;
            }
        }
    }

    return null;
}

function runCustomSettings() {
    console.log('Standard Custom Settings');
    return null;
}

window.runCustomSettings = runCustomSettings;
//# sourceMappingURL=appStore.js.map
