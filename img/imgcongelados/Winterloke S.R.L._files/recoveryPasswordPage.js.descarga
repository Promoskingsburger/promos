"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var recoveryPasswordPage = function (_Component) {
    _inherits(recoveryPasswordPage, _Component);

    function recoveryPasswordPage() {
        _classCallCheck(this, recoveryPasswordPage);

        return _possibleConstructorReturn(this, (recoveryPasswordPage.__proto__ || Object.getPrototypeOf(recoveryPasswordPage)).apply(this, arguments));
    }

    _createClass(recoveryPasswordPage, [{
        key: "data",
        value: function data() {
            return {
                filter: '',
                personCode: '',
                readyToSend: false,
                disabledBtn: false,
                sending: false

            };
        }
    }, {
        key: "getWatch",
        value: function getWatch() {
            return {
                'filter': function filter() {
                    if (!this.filter.length) this.readyToSend = false;
                }
            };
        }
    }, {
        key: "getMethods",
        value: function getMethods() {
            return {
                loadPerson: function () {
                    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                        var _this2 = this;

                        return regeneratorRuntime.wrap(function _callee$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        if (!this.filter.length) {
                                            _context.next = 7;
                                            break;
                                        }

                                        this.disabledBtn = true;
                                        _context.next = 4;
                                        return axios.get('/ecommerce/api/loadPerson/' + btoa(this.filter)).then(function (response) {
                                            if (response.data.ok) {
                                                _this2.personCode = response.data.personCode;
                                                _this2.Email = response.data.email;
                                                _this2.readyToSend = true;
                                            } else {
                                                _this2.filter = '';
                                                _this2.personCode = '';
                                                //this.Email = '';
                                                _this2.readyToSend = false;
                                                _this2.$store.dispatch('showNotificacion', {
                                                    title: '',
                                                    message: response.data.error,
                                                    type: 'error'
                                                });
                                            }
                                            _this2.disabledBtn = false;
                                        }).catch(function (error) {
                                            _this2.disabledBtn = false;
                                            console.log('Error response in loadPerson', error);
                                        });

                                    case 4:
                                        if (!this.readyToSend) {
                                            _context.next = 7;
                                            break;
                                        }

                                        _context.next = 7;
                                        return this.sendMailRecoveryPassword();

                                    case 7:
                                    case "end":
                                        return _context.stop();
                                }
                            }
                        }, _callee, this);
                    }));

                    function loadPerson() {
                        return _ref.apply(this, arguments);
                    }

                    return loadPerson;
                }(),
                sendMailRecoveryPassword: function () {
                    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                        var _this3 = this;

                        var data;
                        return regeneratorRuntime.wrap(function _callee2$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        this.sending = true;
                                        data = {
                                            personCode: this.personCode
                                            //Email: this.Email
                                        };
                                        _context2.next = 4;
                                        return axios.post('/ecommerce/api/sendMailRecoveryPassword', data).then(function (response) {
                                            if (response.data.ok) {
                                                _this3.readyToSend = false;
                                                _this3.$store.dispatch('showNotificacion', {
                                                    title: 'Check your Mail',
                                                    message: 'Message sent',
                                                    type: 'success'
                                                });
                                                _this3.$router.go(-1);
                                            } else {
                                                _this3.readyToSend = false;
                                                _this3.$store.dispatch('showNotificacion', {
                                                    title: 'Ecommerce Settings Error',
                                                    message: response.data.error,
                                                    type: 'error'
                                                });
                                            }
                                            _this3.sending = false;
                                        }).catch(function (error) {
                                            console.log('Error response in sendMailRecoveryPassword', error);
                                        });

                                    case 4:
                                    case "end":
                                        return _context2.stop();
                                }
                            }
                        }, _callee2, this);
                    }));

                    function sendMailRecoveryPassword() {
                        return _ref2.apply(this, arguments);
                    }

                    return sendMailRecoveryPassword;
                }()
            };
        }

        /*async loadPerson() {
            if (this.filter.length) {
                this.disabledBtn = true;
                await axios.get('/ecommerce/api/loadPerson/' + this.filter)
                    .then(response => {
                        if (response.data.ok) {
                            this.personCode = response.data.personCode;
                            this.Email = response.data.email;
                            this.readyToSend = true;
                        } else {
                            this.filter = '';
                            this.personCode = '';
                            //this.Email = '';
                            this.readyToSend = false;
                            this.$store.dispatch('showNotificacion', {
                                title: '',
                                message: response.data.error,
                                type: 'error'
                            });
                        }
                        this.disabledBtn = false;
                    })
                    .catch((error) => {
                        this.disabledBtn=false;
                        console.log('Error response in loadPerson', error);
                    });
            }
        }
         async sendMailRecoveryPassword() {
            this.sending = true;
            let data = {
                personCode: this.personCode,
                //Email: this.Email
            };
            await axios.post('/ecommerce/api/sendMailRecoveryPassword',data)
                .then(response => {
                    if (response.data.ok) {
                        this.readyToSend = false;
                        this.$store.dispatch('showNotificacion', {
                            title: 'Check your Mail',
                            message: 'Message sent',
                            type: 'success'
                        });
                        this.$router.go(-1);
                    } else {
                        this.readyToSend = false;
                        this.$store.dispatch('showNotificacion', {
                            title: 'Ecommerce Settings Error',
                            message: response.data.error,
                            type: 'error'
                        });
                    }
                    this.sending = false;
                 })
                .catch((error) => {
                    console.log('Error response in sendMailRecoveryPassword', error);
                });
        }*/

    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return "<div>\n                 <headerSectionComponent></headerSectionComponent>\n                  <div :class=\"classContainer\">\n                      <div class=\"section-main\">\n                        <section class=\"padding-small\">\n                          <template v-if=\"$store.getters.getAppState=='ready'\">\n                            <div class=\"container\">\n                                <div class=\"row justify-content-center\">\n                                  <div class=\"col-lg-8\">\n                                   <template v-if=\"!sending\">\n                                        <div class=\"block\">\n                                          <div class=\"block-header\">\n                                            <h5 class=\"text-center\">{{tr('Recover Password')}}</h5>\n                                          </div>\n                                          <div class=\"block-body\">\n                                            <p class=\"lead text-center\">{{tr('Please write your username or email')}}</p>\n                                            <hr>\n                                                <form aria-autocomplete=\"none\" autocomplete=\"off\">\n                                                    <!--<p class=\"lead text-center green\" v-if=\"readyToSend\">{{tr('Data was checked. You will receive an email to complete the password recovery process')}}</p>-->\n                                                        <div class=\"form-group\">\n                                                            <input  :placeholder=\"tr('User or email')\" v-model=\"filter\" name=\"filter\" type=\"text\" class=\"form-control validate\" aria-autocomplete=\"none\" autocomplete=\"none\">\n                                                        </div>\n                                                      <div class=\"form-group text-right\">\n                                                          <router-link  to=\"/home\" class=\"btn btn-light\" role=\"button\">{{tr('Close')}}</router-link>\n                                                          <!--<a v-if=\"readyToSend && !sending\" class=\"btn btn-secondary active\" role=\"button\" @click.prevent=\"sendMailRecoveryPassword\">{{tr('Send Mail')}}</a>\n                                                          <a v-if=\"readyToSend && sending\" class=\"btn btn-secondary disabled\" role=\"button\">{{tr('Send Mail')}}</a>-->\n                                                          <button  class=\"center-align btn btn-secondary\" @click.prevent=\"loadPerson\" :disabled=\"disabledBtn\">{{tr('Send Mail')}}</button>\n                                                      </div>\n                                                    <hr>\n                                                </form>\n                                          </div>\n                                          </div>\n                                      </template>\n                                      <template v-if=\"sending\">\n                                              <div class=\"loading\">\n                                                  <i class=\"fas fa-spinner fa-spin fa-3x\"></i>\n                                              </div>\n                                        </template>\n                                    </div>\n                                  </div>\n                                </div>\n                          </template>\n                          <template v-if=\"$store.getters.getAppState=='onload'\">\n                              <div class=\"loading\">\n                                  <i class=\"fas fa-spinner fa-spin fa-3x\"></i>\n                              </div>\n                          </template>\n                        </section>\n                      </div>\n                      </div>\n                  <footerSectionComponent></footerSectionComponent>\n              </div>";
        }
    }], [{
        key: "name",
        value: function name() {
            return "recoveryPasswordPage";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "recoveryPasswordPage";
        }
    }]);

    return recoveryPasswordPage;
}(Component);

recoveryPasswordPage.registerComponent();
//# sourceMappingURL=recoveryPasswordPage.js.map
