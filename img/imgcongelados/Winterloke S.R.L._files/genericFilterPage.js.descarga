"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var genericFilterPage = function (_Component) {
    _inherits(genericFilterPage, _Component);

    function genericFilterPage() {
        _classCallCheck(this, genericFilterPage);

        return _possibleConstructorReturn(this, (genericFilterPage.__proto__ || Object.getPrototypeOf(genericFilterPage)).apply(this, arguments));
    }

    _createClass(genericFilterPage, [{
        key: "data",
        value: function data() {
            return {
                alias: {
                    Categories: null,
                    Items: null,
                    ExpresionFilter: null
                }
            };
        }
    }, {
        key: "getWatch",
        value: function getWatch() {
            return {
                '$store.state.appState': 'createFilter'
            };
        }
    }, {
        key: "getComputed",
        value: function getComputed() {
            return {
                aliasCode: function aliasCode() {
                    return this.$route.params.aliasCode;
                }
            };
        }
    }, {
        key: "mounted",
        value: function mounted() {
            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (this.$store.getters.getAppState == 'ready') this.createFilter();

                            case 1:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "getMethods",
        value: function getMethods() {
            return {
                createFilter: this.createFilter,
                loadCategories: this.loadCategories,
                updateCategory: this.updateCategory,
                loadItems: this.loadItems,
                selectCategory: this.selectCategory
            };
        }
    }, {
        key: "createFilter",
        value: function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                var aliasRecord, objectFilter;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return this.$store.dispatch('loadAlias', this.aliasCode);

                            case 2:
                                aliasRecord = _context2.sent;

                                if (!aliasRecord) {
                                    _context2.next = 20;
                                    break;
                                }

                                this.alias = aliasRecord.fields;
                                //console.log("alias Code",aliasRecord,this.alias);
                                objectFilter = {};

                                objectFilter.name = "alias-filter-" + this.aliasCode;
                                objectFilter.type = 'genericFilter';
                                objectFilter.label = this.aliasCode;
                                objectFilter.value = this.aliasCode;
                                objectFilter.code = this.aliasCode;
                                objectFilter.condition = null;
                                objectFilter.result = true;
                                if (this.alias.Categories) objectFilter.condition = "(['" + this.alias.Categories.split(',').join("','") + "'].some(r=>x.Classification.split(',').indexOf(r) >= 0))";
                                if (this.alias.Items) {
                                    if (objectFilter.condition) {
                                        objectFilter.condition = objectFilter.condition + (" || (['" + this.alias.Items.split(',').join("','") + "'].indexOf(x.Code)>= 0)");
                                    } else {
                                        objectFilter.condition = "(['" + this.alias.Items.split(',').join("','") + "'].indexOf(x.Code)>= 0)";
                                    }
                                }
                                if (this.alias.ExpresionFilter) {
                                    if (objectFilter.condition) {
                                        objectFilter.condition = objectFilter.condition + (" || (" + this.alias.ExpresionFilter + ")");
                                    } else objectFilter.condition = this.alias.ExpresionFilter;
                                }

                                if (objectFilter.condition) this.$store.dispatch('addGlobalFilter', objectFilter);
                                return _context2.abrupt("return", objectFilter);

                            case 20:
                                // eslint-disable-next-line no-console
                                console.log('Alias not Found');

                            case 21:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function createFilter() {
                return _ref2.apply(this, arguments);
            }

            return createFilter;
        }()
    }, {
        key: "loadCategories",
        value: function loadCategories() {
            var root = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var lvl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this.$store.dispatch('loadCategories', root, lvl);
        }
    }, {
        key: "updateCategory",
        value: function updateCategory(category) {
            this.$store.dispatch('updateCategory', category);
        }
    }, {
        key: "loadItems",
        value: function loadItems() {
            var category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            this.$store.dispatch('loadItems', category);
        }
    }, {
        key: "selectCategory",
        value: function selectCategory(category) {
            if (category) {
                this.loadItems(category.code);
                this.$store.dispatch('updateCategory', category);
            } else {
                this.$store.dispatch('updateCategory', { children: [] });
                this.loadItems();
            }
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return "<div>\n                  <headerSectionComponent></headerSectionComponent>\n                  <div :class=\"classContainer\">\n                      <div class=\"section-main\">\n                            <div class=\"row\">\n                              <div class=\"col-sm-4 col-md-3 col-xs-12 mb-2 mb-sm-0 pt-0 px-2 pb-2 p-sm-2 filters-section\">\n                                  <homeCategorySectionComponent :only_icons_view=true></homeCategorySectionComponent>\n                                  <categorySectionComponent :categories=false></categorySectionComponent>\n                              </div>\n                              <div class=\"col-sm-8 col-md-9 col-xs-12 pt-2 pt-sm-0 px-0 px-md-3\">\n                                  <div class=\"col-12\">\n                                    <itemsSectionComponent :items=\"$store.items\" :items_in_car=\"$store.items_in_car\" :cat_history=\"$store.cat_history\"></itemsSectionComponent>\n                                  </div>\n                              </div>\n                          </div>\n                      </div>\n                  </div>\n                  <footerSectionComponent></footerSectionComponent>\n                </div>";
        }
    }], [{
        key: "name",
        value: function name() {
            return "genericFilterPage";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "genericFilterPage";
        }
    }]);

    return genericFilterPage;
}(Component);

genericFilterPage.registerComponent();
//# sourceMappingURL=genericFilterPage.js.map
