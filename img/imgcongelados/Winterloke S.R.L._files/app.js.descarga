'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/*global globalRouter, defaultState, defaultGetters,defaultActions, defaultMutation, VueRouter, VueAwesome, uuidv4, _ */
/* eslint-disable no-console */
window.__lodash__ = _.noConflict();
window.__underscore__ = _.noConflict();
window._ = window.__lodash__;
window.$Event = new Vue();

// Debugs Options
// For Development Only
//if(window.location.host == "shop.oppen.io") {
Vue.config.devtools = true;
window.__VUE_DEVTOOLS_HOST__ = 'localhost';
window.__VUE_DEVTOOLS_PORT__ = '8089';
//}
window.popStateDetected = false;
window.addEventListener('popstate', function () {
    window.popStateDetected = true;
});

Vue.use(VueRouter);
Vue.use(Vuex);
Vue.use(VueTables.ClientTable, { useVuex: false, theme: 'bootstrap4', template: 'default' });

Vue.component('icon', VueAwesome);

var store = new Vuex.Store({
    strict: false,
    modules: window.vuexModules,
    state: window.__lodash__.cloneDeep(defaultState),
    getters: window.__lodash__.cloneDeep(defaultGetters),
    actions: window.__lodash__.cloneDeep(defaultActions),
    mutations: window.__lodash__.cloneDeep(defaultMutation)
});

if (window.runCustomSettings) window.runCustomSettings();

var router = new VueRouter({
    mode: 'hash',
    //base: __dirname,
    routes: globalRouter,
    scrollBehavior: function scrollBehavior(to, from, savedPosition) {
        if (to.hash) {
            return { selector: to.hash };
        } else {
            return { x: 0, y: 0 };
        }
    }
});

router.beforeResolve(function (to, from, next) {
    if (from.name && to.name && to.name != from.name) {
        //console.log('Gets beforeResolve.',to, from);
        setTimeout(function () {
            store.commit("updateItemItemFlag");
        }, 500);
    }
    if (next) next();
});

router.beforeEach(function (to, from, next) {
    window.scrollTo(0, 0);
    next();
});

router.beforeResolve(function (to, from, next) {
    next();
});

router.afterEach(function (to, from) {
    window.scrollTo(0, 0);
    // Ignore some routes
    if (!to.name || to.meta && to.meta.gtmIgnore) {
        return;
    }
    // Facebook Page View Event
    if (window.fbq) {
        window.fbq('track', 'PageView');
    }

    //Google Analityc  content-view event
    // Dispatch vue event using meta gtm value if defined otherwise fallback to route name
    var name = to.meta.gtm || to.name;
    var additionalEventData = to.meta.gtmAdditionalEventData || {};
    var fullUrl = window.location.href.replace("#/", "");
    if (!fullUrl.endsWith("/")) {
        fullUrl += "/";
    }
    var dataLayer = window.dataLayer = window.dataLayer || [];

    var event = {
        event: "content-view",
        "content-name": fullUrl,
        "content-view-name": name
    };
    Object.assign({ event: event, to: to, from: from, additionalEventData: additionalEventData });
    dataLayer.push(event);
});

Vue.mixin({
    data: function data() {
        return {
            UIComponentID: uuidv4(),
            eventListener: []
        };
    },
    computed: {
        classContainer: function classContainer() {
            var settings = this.$store.getters.getSetting;
            if (settings && settings.PageCenterLayout) return ['container'];
            return ['container-fluid'];
        },
        isLogged: function isLogged() {
            return this.$store.getters.getIsLogin;
        },
        isPersonLiberator: function isPersonLiberator() {
            if (this.$store.getters.getIsLogin) return this.$store.state.liberatorCodes.length > 0 || this.$store.state.CenterLiberators.length > 0;
            return false;
        },
        isPersonOnlyModifier: function isPersonOnlyModifier() {
            if (this.$store.getters.getIsLogin) return this.$store.state.onlyModifiedCodes.length > 0 || this.$store.state.CenterOnlyModifiedCodes.length > 0;
            return false;
        },
        isAdmin: function isAdmin() {
            if (this.$store.getters.getIsLogin) return this.$store.getters.getUserIsAdmin;
            return false;
        },

        isLoading: function isLoading() {
            return this.$store.getters.getAppState != 'ready';
        },
        getAppState: function getAppState() {
            return this.$store.getters.getAppState;
        }
    },
    beforeDestroy: function beforeDestroy() {
        //console.log('Destroy Elements');
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = this.eventListener[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var eventObj = _step.value;

                this.unsubscribeEvent(eventObj.eventName, eventObj.callback);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        this.eventListener = [];
    },

    methods: {
        gtmTracView: function gtmTracView(url, name, additionalEventData) {
            if (window.google_tag_manager) {
                var dataLayer = window.dataLayer = window.dataLayer || [];
                var event = {
                    event: "content-view",
                    "content-name": url,
                    "content-view-name": name
                };
                Object.assign(event, additionalEventData);
                dataLayer.push(event);
            }
        },
        gtmTrackEvent: function gtmTrackEvent() {
            var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var category = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var action = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var label = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            var value = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
            var noninteraction = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

            if (window.google_tag_manager) {
                var dataLayer = window.dataLayer = window.dataLayer || [];
                dataLayer.push({
                    event: event || "interaction",
                    target: category,
                    action: action,
                    "target-properties": label,
                    value: value,
                    "interaction-type": noninteraction
                });
            }
        },
        gtmTrackEcommerceEvent: function gtmTrackEcommerceEvent() {
            var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            if (window.google_tag_manager && event) {
                /*{
                        'currencyCode': 'EUR',                       // Local currency is optional.
                        'impressions': [
                            {
                                'name': 'Triblend Android T-Shirt',       // Name or ID is required.
                                'id': '12345',
                                'price': '15.25',
                                'brand': 'Google',
                                'category': 'Apparel',
                                'variant': 'Gray',
                                'list': 'Search Results',
                                'position': 1
                            },
                            {
                                'name': 'Donut Friday Scented T-Shirt',
                                'id': '67890',
                                'price': '33.75',
                                'brand': 'Google',
                                'category': 'Apparel',
                                'variant': 'Black',
                                'list': 'Search Results',
                                'position': 2
                            }]
                    }
                }*/
                var dataLayer = window.dataLayer = window.dataLayer || [];
                dataLayer.push({ 'ecommerce': event });
            }
        },
        encodeToURL: function encodeToURL(value) {
            var urlString = (value + '').toString();
            return encodeURIComponent(urlString).replace('!', '%21').replace('\'', '%27').replace('(', '%28').replace(')', '%29').replace('*', '%2A').replace('%20', '+');
        },
        decodeFromURL: function decodeFromURL(value) {
            var urlString = (value + '').toString();
            return decodeURIComponent(urlString).replace('%21', '!').replace('%27', '\'').replace('%28', '(').replace('%29', ')').replace('%2A', '*').replace('+', '%20');
        },

        resetScroll: function resetScroll() {
            window.scrollTo(0, 0);
        },
        checkIsLogin: function checkIsLogin() {
            return this.$store.getters.getIsLogin;
        },

        getUI: function getUI() {
            return uuidv4();
        },
        capitalize: function capitalize(s) {
            if (typeof s !== 'string') return s;
            var lower = s.toLowerCase();
            //console.log(s,lower.charAt(0).toUpperCase() + lower.slice(1));
            return lower.toLowerCase().charAt(0).toUpperCase() + lower.slice(1);
        },
        encode: function encode(str) {
            var b64 = btoa(str);
            var a = b64.split("").reverse().join("");
            return a;
        },
        number_format: function number_format(number, decimals) {
            var dec_point = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';
            var thousands_sep = arguments[3];

            //Para mostrar los numeros con coma en lugar de punto, y con 2 decimales
            var sign = '';

            number = number * 1;
            if (number < 0) {
                number = number * -1;
                sign = '-';
            }

            var str = void 0;

            if (decimals != null && decimals >= 0) {
                str = number.toFixed(decimals).toString().split('.');
            } else {
                str = number.toString().split('.');
            }

            var parts = [];
            for (var i = str[0].length; i > 0; i -= 3) {
                parts.unshift(str[0].substring(Math.max(0, i - 3), i));
            }
            str[0] = parts.join(thousands_sep ? thousands_sep : '.');
            return sign + str.join(dec_point ? dec_point : '.');
        },
        metricNumber: function metricNumber(n) {

            n = n * 1;
            // let systemSettings = cm.SystemSettings.bringSync()

            // let decimal = systemSettings.DecimalSep;
            var decimal = ",";
            // let miles = systemSettings.ThousandSep;
            var miles = ".";

            var prefix = '';
            if (n < 0) {
                prefix = '-';
            }
            n = n.toFixed(2);

            var ranges = [{ divider: 1e18, suffix: 'P' }, { divider: 1e15, suffix: 'E' }, { divider: 1e12, suffix: 'T' }, { divider: 1e9, suffix: 'G' }, { divider: 1e6, suffix: 'M' }, { divider: 1e3, suffix: 'k' }];
            var value = void 0;
            for (var i = 0; i < ranges.length; i++) {
                if (n >= ranges[i].divider) {
                    value = this.number_format((n / ranges[i].divider).toFixed(2), null, decimal, miles);
                    return value + ranges[i].suffix;
                }
            }
            return prefix + this.number_format(n.toString(), null, decimal, miles);
        },
        emitEvent: function emitEvent(eventName, value) {
            window.$Event.$emit(eventName, value);
        },
        subscribeEvent: function subscribeEvent(eventName, callback) {
            window.$Event.$on(eventName, callback);
            this.eventListener.push({ eventName: eventName, callback: callback });
        },
        unsubscribeEvent: function unsubscribeEvent(eventName, callback) {
            window.$Event.$off(eventName, callback);
        },

        tr: function tr(stringOrigin) {
            if (Array.isArray(stringOrigin)) return this.$store.getters.trWithParrams(stringOrigin);
            return this.$store.getters.tr(stringOrigin);
        },
        formatFloat: function formatFloat(number) {
            try {
                if (isNaN(number)) return '--';
                return parseFloat(Math.round((parseFloat(number) + 0.00001) * 100) / 100).toFixed(2);
            } catch (err) {
                console.log('Error try to format number', number);
                return number;
            }
        }
    }
});

//eslint-disable-next-line no-unused-vars
var app = new Vue({
    store: store,
    router: router,
    watch: {
        '$route': 'redirectToUpdate',
        '$store.state.mustUpdateInfo': 'redirectToUpdate',
        '$store.state.session.fields.RequireUserInfo': 'redirectToUpdate',
        '$store.getters.getAddressConfirmation': function $storeGettersGetAddressConfirmation() {
            if (this.$store.getters.getAddressConfirmation) {
                setTimeout(function () {
                    return $('#addressMap').modal();
                }, 300);
            }
        }
    },
    computed: {
        isMobileDevice: function isMobileDevice() {
            var check = false;
            // eslint-disable-next-line
            (function (a) {
                if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
            })(navigator.userAgent || navigator.vendor || window.opera);
            return check;
        },
        showWelcomeMoldal: function showWelcomeMoldal() {
            if (this.$store.getters.getWelcomeMessage) $('#welcomeModal').modal('show');else $('#welcomeModal').modal('hide');
            return this.$store.getters.getWelcomeMessage;
        },
        latitude: function latitude() {
            if (this.confirmAddress) return this.confirmAddress.Latitude;
            return null;
        },
        longitude: function longitude() {
            if (this.confirmAddress) return this.confirmAddress.Longitude;
            return null;
        },
        screenlock: function screenlock() {
            return this.$store.getters.ScreenState;
        },
        screenText: function screenText() {
            if (this.$store.state.screenMsg) return this.$store.state.screenMsg;else return this.tr("Processing");
        },
        whatsappLink: function whatsappLink() {
            var settings = this.$store.getters.getSetting;
            if (settings && settings.WhatsAppNumber) {
                var baselink = "https://web.whatsapp.com/send?phone=";
                if (this.isMobileDevice) baselink = "https://wa.me/";
                var whatsappPhone = settings.WhatsAppNumber.replace("+", "");
                var whatMesssage = '';
                if (settings.WhatsAppText) {
                    whatMesssage = settings.WhatsAppText;
                }
                if (whatsappPhone) {
                    return '' + baselink + whatsappPhone + '&text=' + whatMesssage;
                }
            }
            return null;
        },
        confirmAddress: function confirmAddress() {
            if (this.$store.getters.getAddressConfirmation) {
                return this.$store.getters.getAddressConfirmation;
            }
            $('#addressMap').modal('hide');
            return null;
        }
    },
    methods: {
        closeWelcomeModal: function closeWelcomeModal() {
            //$('#welcomeModal').modal('hide');
            this.$store.commit('changeStoreValue', { stateField: "showWelcomeMessage", value: false });
            return null;
        },
        redirectToUpdate: function redirectToUpdate() {
            if (this.$store.state.mustUpdateInfo && this.$store.state.session.fields.RequireUserInfo) this.$router.push('/genericuser');
        },
        confirmAddressTrigger: function confirmAddressTrigger(selectedAddress) {
            this.$store.commit("setDeliveryAddressConfirmation", selectedAddress);
        },
        viewInMap: function viewInMap() {
            if (this.$store.getters.getAddressConfirmation) {
                setTimeout(function () {
                    return $('#addressMap').modal();
                }, 300);
                return this.$store.getters.getAddressConfirmation;
            }
            $('#addressMap').modal('hide');
            return null;
        },
        closeMap: function closeMap() {
            var emitEvent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            $('#addressMap').modal('hide');
            this.confirmAddress.normalize = false;
            if (emitEvent) this.emitEvent("address-relocation-cancel", this.confirmAddress);
            this.$store.commit("setDeliveryAddressConfirmation", null);
        },
        locationChange: function locationChange(latitude, longitude) {
            //console.log("Map Change Callback", latitude,longitude);
            this.confirmAddress.Latitude = latitude;
            this.confirmAddress.Longitude = longitude;
            this.confirmAddress.normalize = true;
            this.confirmAddress.CustomLocation = true;
        },
        confirmLocation: function confirmLocation() {
            if (this.confirmAddress) {
                this.confirmAddress.normalize = false;
                this.emitEvent("address-relocation", _.cloneDeep(this.$store.state.deliveryAddressConfirm));
                this.closeMap(false);
            }
        }
    },
    beforeCreate: function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            window.runCustomSettings();
                            this.$store.dispatch('loadLanguage');
                            _context.next = 4;
                            return this.$store.dispatch('loadSession');

                        case 4:
                            this.subscribeEvent("addressNeedConfirmations", this.confirmAddressTrigger);

                        case 5:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function beforeCreate() {
            return _ref.apply(this, arguments);
        }

        return beforeCreate;
    }(),
    updated: function updated() {
        if (this.showWelcomeMoldal) $('#welcomeModal').modal('show');else $('#welcomeModal').modal('dispose');
        var self = this;

        $('#welcomeModal').on('hidden.bs.modal', function (e) {
            self.closeWelcomeModal();
        });

        if (this.$store.getters.getSession) this.$store.dispatch("resetAutoLogout");
    },
    template: '<div class="router-view" >\n                    <a :href="whatsappLink" class="whatsapp pull-left" target="_blank" v-if="whatsappLink">\n                      <i class="fab fa-whatsapp  whatsapp-icon"></i>\n                    </a>\n                    <div class="blockscreen" v-if="screenlock">\n                        <div class="container full-screen">\n                            <div class="row full-screen justify-content-center align-items-center">\n                                <div class="text-center spinner-loading">\n                                    <i class="icon fas fa-spinner fa-spin fa-3x"></i>\n                                    <h5 class="mt-3">{{screenText}}</h5>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <template v-if="showWelcomeMoldal">\n                        <div id="welcomeModal" class="modal" tabindex="-1" role="dialog" aria-labelledby="welcomeModalTitle" aria-hidden="true" data-toggle="modal" >\n                          <div class="modal-dialog  modal-xl modal-dialog-centered" role="document">\n                              <div class="modal-content">\n                                    <div class="modal-header border-bottom-0">\n                                      <button class="close" type="button" data-dismiss="modal" aria-label="Close" @click="closeWelcomeModal" > <span aria-hidden="true">&times;</span> </button>\n                                    </div>\n                                    <div class="modal-body mx-1">\n                                        <htmlSectionComponent :templateCode="$store.getters.getSetting.WelcomePage" />\n                                    </div>\n                              </div>\n                          </div>\n                        </div>\n                    </template>\n                    <NotificationComponent></NotificationComponent>\n                    <template v-if="confirmAddress">\n                        <div class="modal " id="addressMap" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">\n                            <div class="modal-dialog modal-lg" role="document">\n                                <div class="modal-content">\n                                    <div class="modal-header">\n                                        <h5 class="modal-title" id="exampleModalLabel">{{tr("Address Confirmation")}}</h5>\n                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                                            <span aria-hidden="true">&times;</span>\n                                        </button>\n                                    </div>\n                                    <div class="modal-body">\n                                        <h5 class="text-justified">{{tr("For a better user experience and quick delivery, please confirm the location of the address on the map")}}.</h5>\n                                        <div class="w-100 h-100">\n                                            <googleMapComponent :record="confirmAddress" :editMode="true" :saveChangeCallback="locationChange" ></googleMapComponent>\n                                        </div>\n                                    </div>\n                                    <div class="modal-footer">\n                                        <button type="button" class="btn btn-primary" @click="confirmLocation">{{tr(\'Confirm\')}}</button>\n                                        <button type="button" class="btn btn-secondary" @click="closeMap">{{tr(\'Close\')}}</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </template>\n                    <form autocomplete="off" onsubmit="return false" class="m-0">\n                        <router-view class="view oo-ecommerce"  ></router-view>\n                    </form>\n                </div>'
}).$mount('#app');
//# sourceMappingURL=app.js.map
