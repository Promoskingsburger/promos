"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var inputHide = function (_Component) {
    _inherits(inputHide, _Component);

    function inputHide() {
        _classCallCheck(this, inputHide);

        return _possibleConstructorReturn(this, (inputHide.__proto__ || Object.getPrototypeOf(inputHide)).apply(this, arguments));
    }

    _createClass(inputHide, [{
        key: "getProps",
        value: function getProps() {
            return ['def', 'value', 'custom_css_classes'];
        }
    }, {
        key: "data",
        value: function data() {
            return {
                isSet: false
            };
        }
    }, {
        key: "getComputed",
        value: function getComputed() {
            return {
                id: function id() {
                    return this.getUI();
                },
                getDef: function getDef() {
                    var defaults = { visibility: true, readonly: false, pastewindow: null, fillpastewindow: null };
                    Object.assign(defaults, this.def);
                    return defaults;
                }
            };
        }
    }, {
        key: "getMethods",
        value: function getMethods() {
            return {
                focus: function focus() {
                    this.$refs.input.focus();
                }
            };
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return "<input :disabled=\"getDef.readonly\" type=\"hidden\" :id=\"id\" placeholder=\"\" :value=\"value\" @input=\"$emit('input',$event)\" ref=\"input\" >";
        }
    }], [{
        key: "name",
        value: function name() {
            return "input-hide";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "input-hide";
        }
    }]);

    return inputHide;
}(Component);

inputHide.registerComponent();
//# sourceMappingURL=input-hide.js.map
