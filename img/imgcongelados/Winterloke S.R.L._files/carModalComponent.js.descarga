"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* global __lodash__, _, moment, axios, Component */
var CarComponent = function (_Component) {
    _inherits(CarComponent, _Component);

    function CarComponent() {
        _classCallCheck(this, CarComponent);

        return _possibleConstructorReturn(this, (CarComponent.__proto__ || Object.getPrototypeOf(CarComponent)).apply(this, arguments));
    }

    _createClass(CarComponent, [{
        key: "data",
        value: function data() {
            return {
                currentStep: 1,
                minStep: 1,
                maxStep: 4,
                pricesLoaded: false,
                status: 'view',
                result: '',
                detailItem: null,
                showDetail: true,
                sucessCreate: false,
                completeDetail: false,
                salesOrder: '',
                orderComment: '',
                orderCampaign: null,
                orderCampaignActive: false,
                deliveryDate: moment().format('YYYY-MM-DD'),
                TaxRegTypes: ['Reg.Company', 'Final Consumer', 'IVA No Resp.', 'Exempt', 'Resp. no Insc.', 'Monotributo', 'International Exempt', '', 'Sujeto no Categorizado'],
                errors: [],
                successMessage: "Congratulation, Sales Order #({{$1}}) was created",
                paymentMsg: null,
                paymentIsProcess: false,
                doOnlinePayment: false,
                orderTemplate2: null,
                mpdata: {
                    salesorder: null,
                    amount: 0,
                    email: "test@dos.com" //Mail del cliente comprados.
                },
                searchMessage: null,
                tempItemCode: null,
                tempItemQty: 1,
                currentPayTerm: null,
                giftCardCode: null
            };
        }
    }, {
        key: "mounted",
        value: function mounted() {
            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.discountThrottled = __lodash__.throttle(this.addDiscount, 1800, { 'trailing': false });
                                this.checkItemInCar();
                                this.loadPrices();
                                this.calculateOrderTotals();
                                this.subscribeEvent('deliveryselected', this.calculateOrderTotals);
                                this.subscribeEvent('shipModeChange', this.calculateShipCost);

                            case 6:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "updated",
        value: function updated() {
            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                if (!this.$store.state.session && this.$store.state.appState == 'ready') {
                                    this.$store.state.redirectAfterLogin = "/badges";
                                    this.$router.push('/login');
                                }

                            case 1:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));
        }
    }, {
        key: "goToShop",
        value: function goToShop() {
            if (!this.$store.getters.getItems || this.$store.getters.getItems.length == 0) this.$router.push('/home');else this.$router.go(-1);
        }
    }, {
        key: "checkStepConditions",
        value: function checkStepConditions() {
            if (this.$store.getters.getSetting.ControlStockForSales) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = this.getOrderItems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var soItem = _step.value;

                        var maxQty = this.$store.getters.getMaxStockByCode(soItem.fields.ArtCode);
                        if (soItem.fields.Qty > maxQty) {
                            this.alertShowMessage(["{{$1}} only available {{$2}}", soItem.fields.Name, maxQty]);
                            return false;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
            switch (this.currentStep) {
                case 1:
                    {
                        break;
                    }
                case 2:
                    {
                        if (this.$store.state.CustomerAddresses.length > 0 && !this.$store.state.order_DelAddressCode) {
                            this.$store.dispatch('showNotificacion', { title: this.tr('Delivery Address'), message: this.tr("Select a Delivery Address or adding a new"), type: 'info' });
                            return false;
                        }
                        if (this.$store.getters.getShipModes.length > 0 && !this.$store.state.order_ShipMode) {
                            this.$store.dispatch('showNotificacion', {
                                title: this.tr('Ship Mode'),
                                message: this.tr(["Please select a {{$1}}", this.tr('Ship Mode')]),
                                type: 'info'
                            });
                            return false;
                        }
                        if (this.$store.state.requireCenterCost && (!this.$store.state.order_CenterCost || this.$store.state.order_CenterCost === '')) {
                            this.$store.dispatch('showNotificacion', {
                                title: this.tr('Cost Center'),
                                message: this.tr(["Please select a {{$1}}", this.tr('Cost Center')]),
                                type: 'info'
                            });
                            return false;
                        }
                        var checkPaymentDay = false;
                        checkPaymentDay = Object.values(this.$store.getters.getDaysByZone).reduce(function (x, y) {
                            return x || y;
                        }, checkPaymentDay);
                        if (checkPaymentDay && (!this.$store.state.order_DelDay || this.$store.state.order_DelDay === '')) {
                            this.$store.dispatch('showNotificacion', {
                                title: this.tr('Delivery Day'),
                                message: this.tr(["Please select a {{$1}}", this.tr('Delivery Day')]),
                                type: 'info'
                            });
                            return false;
                        }
                        break;
                    }
            }
            return true;
        }
    }, {
        key: "payAndClose",
        value: function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(e) {
                var _this2 = this;

                var res, payload;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                res = this.checkStepConditions();

                                if (res) {
                                    _context3.next = 3;
                                    break;
                                }

                                return _context3.abrupt("return", false);

                            case 3:
                                if (this.$store.state.order_DelAddressCode) {
                                    this.nextStep();
                                    this.status = "loading";
                                    payload = {
                                        Comment: this.orderComment,
                                        SalesOrder: this.salesOrder
                                    };

                                    if (this.orderCampaignActive) payload["Campaign"] = this.orderCampaign;
                                    this.$store.dispatch('toogleLockScreen', null);
                                    this.$store.dispatch('createSaleOrder', payload).then(function (result) {
                                        _this2.$store.dispatch('toogleLockScreen', null);
                                        if (!result.error) result.error = [];
                                        _this2.result = result;
                                        if (result.success) {
                                            _this2.status = "result";
                                            var mpdata = {};
                                            mpdata.email = "";
                                            mpdata.salesorder = _this2.result.so.fields.SerNr;
                                            mpdata.amount = _this2.result.so.fields.Total;
                                            _this2.doOnlinePayment = _this2.$store.getters.getOnlinePayTerms.indexOf(_this2.result.so.fields.PayTerm) != -1 && _this2.result.so.fields.OrderStatus != _this2.$store.getters.getSetting.PreAutorizationStatus;
                                            _this2.mpdata = mpdata;
                                            _this2.$store.commit('clearItemToCar', 'result');
                                        } else {
                                            _this2.status = "failure";
                                            _this2.$store.commit('clearItemToCar', 'failure');
                                        }
                                    });
                                } else {
                                    this.$store.dispatch('showNotificacion', { title: this.tr('Delivery Address'), message: this.tr("Select a Delivery Address or adding a new"), type: 'info' });
                                }

                            case 4:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function payAndClose(_x) {
                return _ref3.apply(this, arguments);
            }

            return payAndClose;
        }()
    }, {
        key: "allowDecimal",
        value: function allowDecimal(item) {
            var storeItem = this.$store.getters.getItemByCode(item.fields.ArtCode);
            if (storeItem && storeItem.OnlyIntegerValues == 1) return 1;
            return "any";
        }
    }, {
        key: "qtyFormat",
        value: function qtyFormat(item) {
            if (this.allowDecimal(item) == 'any') return parseFloat(item.fields.Qty);
            return parseInt(item.fields.Qty);
        }
    }, {
        key: "getMinQtyAviable",
        value: function getMinQtyAviable(item) {
            if (this.allowDecimal(item) == 'any') return 0.3;
            return 1;
        }
    }, {
        key: "addItemToCar",
        value: function addItemToCar() {
            var _this3 = this;

            var quickShopItemCode = document.getElementById("qShopItemCode");
            var tempQty = parseInt(this.tempItemQty.toString());
            if (!this.tempItemCode) {
                this.searchMessage = this.tr(["NOTEMPTY", this.tr('Item Code')]);
            } else {
                if (tempQty <= 0) this.searchMessage = this.tr("The Item Qty must be greater than zero");
            }
            if (this.tempItemCode && tempQty > 0) {
                var item = this.$store.getters.getItemByCode(this.tempItemCode);
                if (item) {
                    var newItemQty = parseInt(this.tempItemQty);
                    var qtyInCar = this.$store.getters.getItemAmountInCar(this.tempItemCode);
                    if (this.$store.getters.getSetting.ControlStockForSales) {
                        var maxQty = this.$store.getters.getMaxStockByCode(this.tempItemCode);
                        var available = Math.max(0, maxQty - qtyInCar);
                        if (maxQty == 0 && qtyInCar > 0) {
                            newItemQty = 0;
                            this.$store.dispatch('changeCartQty', { itemCode: this.tempItemCode, action: 'delete' });
                            if (!quickShopItemCode) this.alertShowMessage(["This item {{$1}} is not longer available", item.Name]);else this.searchMessage = this.tr(["This item {{$1}} is not longer available", item.Name]);
                        } else {
                            if (available == 0) {
                                newItemQty = available;
                                if (!quickShopItemCode) this.alertShowMessage(["This item {{$1}} is not longer available", item.Name]);else this.searchMessage = this.tr(["This item {{$1}} is not longer available", item.Name]);
                            } else {
                                if (newItemQty > available) {
                                    if (!quickShopItemCode) this.alertShowMessage(["{{$1}} only available {{$2}}", item.Name, available]);else this.searchMessage = this.tr(["{{$1}} only available {{$2}}", item.Name, available]);
                                    newItemQty = 0;
                                }
                            }
                        }
                    }

                    if (newItemQty > 0) {
                        if (qtyInCar) {
                            this.$store.dispatch('changeCartQty', { itemCode: this.tempItemCode, qty: newItemQty + qtyInCar, action: 'update' }).then(function (actionRes) {
                                _this3.calculateOrderTotals();
                                _this3.tempItemCode = null;
                                _this3.tempItemQty = 1;
                                if (quickShopItemCode) {
                                    $('#qShopItemCode').trigger('focus');
                                }
                            });
                        } else {
                            item.CarQty = newItemQty;
                            this.$store.dispatch('ItemComponentAddToCar', item).then(function (actionRes) {
                                _this3.calculateOrderTotals();
                                _this3.tempItemCode = null;
                                _this3.tempItemQty = 1;
                                if (quickShopItemCode) {
                                    $('#qShopItemCode').trigger('focus');
                                }
                            });
                        }
                        this.$store.dispatch('showNotificacion', { title: "Agregaste " + newItemQty + " art\xEDculos a tu carrito", message: "" + item.Name, type: 'info' });
                    }
                } else {
                    if (!quickShopItemCode) this.$store.dispatch('showNotificacion', {
                        title: this.tr('Not Found'),
                        message: this.tr(["Item not found ({{$1}})", this.tempItemCode]),
                        type: 'info'
                    });else this.searchMessage = this.tr(["Item not found ({{$1}})", this.tempItemCode]);
                }
            }

            if (quickShopItemCode) $('#qShopItemCode').trigger('focus');

            if (this.searchMessage) {
                var self = this;
                setTimeout(function () {
                    self.searchMessage = null;
                }, 8000);
            }
        }
    }, {
        key: "alertShowMessage",
        value: function alertShowMessage(alertMsg) {
            this.$store.dispatch('showNotificacion', { title: this.tr("Information"), message: alertMsg, type: 'warning' });
        }
    }, {
        key: "checkItemInCar",
        value: function checkItemInCar() {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {

                for (var _iterator2 = this.$store.getters.getItemCar[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var carItem = _step2.value;

                    if (!carItem.id) carItem.id = carItem.item.ArtCode;
                    if (!carItem.item.Code) carItem.item.Code = carItem.item.ArtCode;
                    if (this.$store.getters.getItemByCode(carItem.id.toString())) if (carItem.item) carItem.item.carCant = carItem.cant;
                    carItem.message = null;
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }, {
        key: "getMaxStockByCode",
        value: function getMaxStockByCode(itemCode) {
            var giftCardItem = this.$store.getters.getGiftCardItem;
            if (giftCardItem && giftCardItem.fields.Code == itemCode) return -1;
            if (this.$store.getters.getSetting.ControlStockForSales) {
                var itemInStore = this.$store.state.items_store.get(itemCode);
                if (itemInStore) {
                    if (itemInStore.Reserved) return itemInStore.Qty - itemInStore.Reserved;
                    return itemInStore.Qty;
                }
            }
            return this.$store.getters.getMaxQtyItem;
        }
    }, {
        key: "loadPrices",
        value: function loadPrices() {
            //console.log('items in home call 111');
            var itemCodes = new Map();
            var errors = [];
            var clearCodes = [];
            var sessionCartItems = [];
            //console.log('ITems Home 333',this.$store.getters.getHomeItems)
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.itemsSelected[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var carItem = _step3.value;

                    if (!carItem.id) carItem.id = carItem.item.ArtCode;
                    if (!carItem.item.Code) carItem.item.Code = carItem.item.ArtCode;
                    if (!itemCodes.has(carItem.id)) {
                        var tempItem = this.$store.getters.getItemByCode(carItem.id.toString());
                        //console.log('Cart tempItem', tempItem);
                        if (tempItem) {
                            sessionCartItems.push(carItem);
                            if (tempItem.isCalculate == false) itemCodes.set(tempItem.Code.toString(), tempItem);
                        } else {
                            carItem.cant = 0;
                            var error_msg = ["Item {{$1}} was removed from car", carItem.item && carItem.item.Name ? carItem.item.Name : carItem.id];
                            errors.push(error_msg);
                            this.deleteItemFromCar(carItem.id);
                        }
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            this.$store.commit('updateSessionCar', sessionCartItems);
            var self = this;
            if (!this.pricesLoaded && Array.from(itemCodes.values()).length > 0) {
                this.$store.dispatch("updatePrices", Array.from(itemCodes.values())).then(function (response) {
                    self.pricesLoaded = true;
                    self.$store.dispatch('reloadCarPrice', clearCodes);
                    self.errors = errors;
                });
            }
        }
    }, {
        key: "checkStock",
        value: function checkStock() {
            //console.log('items in home call 111');
            var itemCodes = new Map();
            var errors = [];
            var clearCodes = [];
            //console.log('ITems Home 333',this.$store.getters.getHomeItems)
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.itemsSelected[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var carItem = _step4.value;

                    if (!itemCodes.has(carItem.id)) {
                        var tempItem = this.$store.getters.getItemByCode(carItem.id);
                        //console.log('Cart tempItem', tempItem);
                        if (tempItem) {
                            if (this.$store.getters.getControlStock) {
                                if (!tempItem.Qty || tempItem.Qty == 0) {
                                    clearCodes.push(carItem.id);
                                    var error_msg = "++ " + this.tr('Item') + " " + carItem.id + ". " + this.tr('ITEM_STOCK_ZERO') + "++";
                                    carItem.cant = 0;
                                    errors.push(error_msg);
                                }
                                if (tempItem.Qty < carItem.cant) carItem.cant = tempItem.Qty;
                            } else itemCodes.set(carItem.id, tempItem);
                        } else {
                            clearCodes.push(carItem.id);
                            var _error_msg = "** " + this.tr('Item') + " " + carItem.id + ". " + this.tr('ITEM_FAVORITE_REMOVE') + "** ";
                            carItem.cant = 0;
                            errors.push(_error_msg);
                        }
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            return errors.length == 0;
        }
    }, {
        key: "updateStatusCar",
        value: function updateStatusCar() {
            this.status = this.$store.getters.getCarStatus;
        }
    }, {
        key: "calculateOrderTotals",
        value: function calculateOrderTotals() {
            var _this4 = this;

            this.$store.dispatch('toogleLockScreen', null);
            var payload = {
                needReload: true,
                DeliveryDate: this.deliveryDate,
                Comment: this.orderComment,
                SalesOrder: this.salesOrder
            };
            if (this.orderCampaignActive) payload["Campaign"] = this.orderCampaign;
            this.$store.dispatch('loadOrderTotals', payload).then(function (result) {
                _this4.$store.dispatch('toogleLockScreen', null);
            });
        }
    }, {
        key: "updateCarQty",
        value: function updateCarQty(event) {
            var _this5 = this;

            //debugger;
            var newItemQty = event.target.valueAsNumber;
            if (isNaN(newItemQty) || newItemQty <= 0) {
                this.$store.dispatch('showNotificacion', { title: this.tr("Qty"), message: this.tr("Incorrent Qty Value"), type: 'error' });
                return;
            }
            if (_.has(this.orderTemplate, ['fields', 'Items'])) {
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                    for (var _iterator5 = this.orderTemplate.fields.Items[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var item = _step5.value;

                        if (item.fields.ArtCode == event.target.id) {
                            var storeItem = this.$store.getters.getItemByCode(item.fields.ArtCode);
                            if (storeItem) {
                                if (this.controlStock) {
                                    var _storeItem = this.$store.getters.getItemByCode(item.fields.ArtCode);
                                    var maxQty = this.$store.getters.getMaxStockByCode(_storeItem.Code);
                                    if (maxQty == 0) {
                                        this.alertShowMessage(["This item {{$1}} is not longer available", _storeItem.Name]);
                                        return this.$store.dispatch('changeCartQty', { itemCode: item.fields.ArtCode, action: 'delete' });
                                    }
                                    if (newItemQty > maxQty) {
                                        this.alertShowMessage(["The article qty can't be bigger than {{$1}}", maxQty]);
                                        newItemQty = maxQty;
                                    }
                                } else newItemQty = event.target.valueAsNumber;
                                item.fields.Qty = newItemQty;
                            } else {
                                this.$store.dispatch('changeCartQty', { itemCode: item.fields.ArtCode, action: 'delete' });
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                            _iterator5.return();
                        }
                    } finally {
                        if (_didIteratorError5) {
                            throw _iteratorError5;
                        }
                    }
                }

                this.$store.dispatch('changeCartQty', {
                    itemCode: event.target.id,
                    qty: newItemQty,
                    action: 'update'
                }).then(function (actionRes) {
                    _this5.calculateOrderTotals();
                });
            }
        }
    }, {
        key: "itemQtyIncrement",
        value: function itemQtyIncrement(itemCode) {
            var _this6 = this;

            this.$store.dispatch('changeCartQty', { itemCode: itemCode, action: 'up' }).then(function () {
                _this6.calculateOrderTotals();
            });
        }
    }, {
        key: "itemQtyDecrement",
        value: function itemQtyDecrement(itemCode) {
            var _this7 = this;

            this.$store.dispatch('changeCartQty', { itemCode: itemCode, action: 'down' }).then(function () {
                _this7.calculateOrderTotals();
            });
        }
    }, {
        key: "deleteItemFromCar",
        value: function deleteItemFromCar(itemCode) {
            var _this8 = this;

            this.$store.dispatch('changeCartQty', { itemCode: itemCode, action: 'delete' }).then(function () {
                _this8.calculateOrderTotals();
            });
        }
    }, {
        key: "clearCar",
        value: function clearCar() {
            this.$store.commit('resetItemToCar');
            this.calculateOrderTotals();
        }
    }, {
        key: "close",
        value: function close() {
            this.$store.commit('updateCarStatus', 'view');
            this.$router.go(-1);
        }
    }, {
        key: "showItemPrice",
        value: function showItemPrice(item) {
            var price = item.Price;
            if (this.$store.getters.getPriceToShow) price = item.RowTotal;else {
                if (item.RowNet) price = item.RowNet;
            }
            return parseFloat(Math.round(price * 100) / 100).toFixed(2);
        }
    }, {
        key: "rowPriceTotal",
        value: function rowPriceTotal(item) {
            if (item.cant) return parseFloat(parseFloat(item.cant) * parseFloat(item.item.Price) * 100 / 100).toFixed(2);else return 0;
        }
    }, {
        key: "showPriceLabel",
        value: function showPriceLabel() {
            if (this.$store.getters.getPriceToShow) return this.tr('VAT INC');else {
                return this.tr('VAT EXC');
            }
        }
    }, {
        key: "goToStep",
        value: function goToStep(newState) {
            //console.log('State Control',newState);
            switch (newState) {
                case 'detail':
                    if (!this.sucessCreate) {
                        break;
                    }
                    this.status = newState;
                    break;
                case 'orderResult':
                    if (!this.sucessCreate) {
                        this.status = 'orderResult';
                        break;
                    }
                    if (!this.completeDetail) {
                        this.status = 'detail';
                        break;
                    }
                    this.status = newState;
            }
            this.$store.commit('updateCarStatus', this.status);
        }
    }, {
        key: "viewDetailItem",
        value: function viewDetailItem(item) {
            //console.log( 'Detail ',item );
            this.detailItem = item;
            if (this.detailItem) this.emitEvent('modal-detail-open');
        }
    }, {
        key: "closeDetail",
        value: function closeDetail() {
            this.detailItem = null;
        }
    }, {
        key: "navListItems",
        value: function navListItems(step) {
            if (this.currentStep > step && this.currentStep < this.maxStep) this.currentStep = step;
            if (this.currentStep === this.maxStep && step === 1) this.currentStep = 1;
            return false;
        }
    }, {
        key: "prevStep",
        value: function prevStep() {
            var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (force) {
                if (this.currentStep > this.minStep) this.currentStep = this.currentStep - 1;
            } else {
                if (this.currentStep < this.maxStep) {
                    if (this.currentStep > this.minStep) this.currentStep = this.currentStep - 1;else this.currentStep = this.minStep;
                }
            }
        }
    }, {
        key: "nextStep",
        value: function nextStep(e) {
            var res = this.checkStepConditions();
            if (!res) return false;
            if (this.currentStep < this.maxStep) {
                if (this.currentStep < this.maxStep) this.currentStep = this.currentStep + 1;else this.currentStep = this.minStep;
            }
        }
    }, {
        key: "paymentProcess",
        value: function paymentProcess(event) {
            //console.log( "Payment Event",event );
            this.paymentMsg = [];
            this.$store.dispatch('toogleLockScreen', "");
            //this.handleErrors(event);
            //this.load_i = false;
            if (event.actionResult && event.paymentResult.ok) {
                this.doOnlinePayment = false;
                this.paymentIsProcess = true;
                this.paymentMsg = null;
                this.$store.dispatch("approvedOrder", this.result.so.fields.SerNr);
            } else {
                this.doOnlinePayment = true;
                if (event.cause) this.paymentMsg = event.cause;
                if (event.paymentResult && event.paymentResult.message) {
                    this.paymentMsg = event.paymentResult.message;
                }
                if (event.error) {
                    this.error = true;
                    this.paymentMsg = event.cause[0].description;
                }
                if (event.hasOwnProperty("paymentResult")) {
                    this.error = true;
                    this.paymentMsg = event.paymentResult.message;
                }
                window.scrollTo(0, 0);
            }
        }
    }, {
        key: "paymentInit",
        value: function paymentInit() {
            this.$store.dispatch('toogleLockScreen', this.tr('Payment Processing'));
        }
    }, {
        key: "updateSelectValues",
        value: function updateSelectValues(updateValue) {
            var eventObj = {};
            var value = event.target.value;
            eventObj["order_" + updateValue] = value;
            this.$store.dispatch('updateOrderDeliveryData', eventObj);
            if (updateValue === "PayTerm") this.currentPayTerm = value;
        }
    }, {
        key: "getPayTermObj",
        value: function getPayTermObj() {
            var _this9 = this;

            return this.$store.state.setting.PayTermRow.find(function (row) {
                return row.fields.PayTermCode === _this9.currentPayTerm;
            });
        }
    }, {
        key: "addDiscount",
        value: function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                var res, orderCampaign, payload;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                this.$store.dispatch('toogleLockScreen', null);
                                res = { data: { success: true, error: "" } };
                                orderCampaign = this.orderCampaign;

                                if (this.$store.getters.getSetting.UseDiscountNotCapitalice) orderCampaign = orderCampaign.toLowerCase();

                                if (!this.orderCampaign) {
                                    _context4.next = 8;
                                    break;
                                }

                                _context4.next = 7;
                                return axios.get('/ecommerce/api/checkCoupon/' + orderCampaign);

                            case 7:
                                res = _context4.sent;

                            case 8:
                                this.orderCampaignActive = res.data.success;

                                if (!res.data.success) {
                                    _context4.next = 16;
                                    break;
                                }

                                payload = {
                                    needReload: true,
                                    DeliveryDate: this.deliveryDate,
                                    Comment: this.orderComment,
                                    Campaign: orderCampaign,
                                    SalesOrder: this.salesOrder
                                };
                                _context4.next = 13;
                                return this.$store.dispatch('loadOrderTotals', payload);

                            case 13:
                                if (this.orderCampaign && this.getDiscountCoupon) this.$store.dispatch('showNotificacion', { title: "Coupon", message: ["Discount Applied of $ {{$1}}", this.getDiscountCoupon], type: 'info' });else this.$store.dispatch('showNotificacion', { title: "Coupon", message: "Coupon does not meet the requirement to apply", type: 'warning' });
                                _context4.next = 17;
                                break;

                            case 16:
                                this.$store.dispatch('showNotificacion', { title: "Coupon", message: res.data.error, type: 'warning' });

                            case 17:
                                this.$store.dispatch('toogleLockScreen', null);

                            case 18:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function addDiscount() {
                return _ref4.apply(this, arguments);
            }

            return addDiscount;
        }()
    }, {
        key: "calculateShipCost",
        value: function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(shipModeCode) {
                var eventObj, payload;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                if (!shipModeCode) {
                                    _context5.next = 10;
                                    break;
                                }

                                eventObj = {};

                                eventObj["order_ShipMode"] = shipModeCode;
                                this.$store.dispatch('toogleLockScreen', null);
                                _context5.next = 6;
                                return this.$store.dispatch('updateOrderDeliveryData', eventObj);

                            case 6:
                                payload = {
                                    needReload: true,
                                    DeliveryDate: this.deliveryDate,
                                    Comment: this.orderComment,
                                    Campaign: this.orderCampaign,
                                    SalesOrder: this.salesOrder,
                                    ShipMode: shipModeCode
                                };
                                _context5.next = 9;
                                return this.$store.dispatch('loadOrderTotals', payload);

                            case 9:
                                this.$store.dispatch('toogleLockScreen', null);

                            case 10:
                            case "end":
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function calculateShipCost(_x3) {
                return _ref5.apply(this, arguments);
            }

            return calculateShipCost;
        }()
    }, {
        key: "calculateDiscount",
        value: function () {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                this.discountThrottled();

                            case 1:
                            case "end":
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));

            function calculateDiscount() {
                return _ref6.apply(this, arguments);
            }

            return calculateDiscount;
        }()
    }, {
        key: "getPayTermSurchargeLable",
        value: function getPayTermSurchargeLable() {
            var payTermCode = this.orderTemplate.fields.PayTerm;
            return this.tr(['Surcharge {{$1}}', this.getPayTermName(payTermCode)]);
        }
    }, {
        key: "getPayTermName",
        value: function getPayTermName(payTermCode) {
            var payTermRow = this.$store.getters.getSetting.PayTermRow.filter(function (x) {
                return x.fields.PayTermCode === payTermCode;
            });
            if (payTermRow.length > 0) return payTermRow[0].fields.PayTermName;
            return payTermCode;
        }
    }, {
        key: "addGiftcard",
        value: function addGiftcard() {
            this.$store.dispatch('ItemGiftcardAddToCar', this.giftCardCode);
        }
    }, {
        key: "getOrderField",
        value: function getOrderField(fieldName) {
            var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (this.orderTemplate.fields) return this.orderTemplate.fields[fieldName];
            return defaultValue ? defaultValue : null;
        }
    }, {
        key: "getMethods",
        value: function getMethods() {
            return {
                getOrderField: this.getOrderField,
                goToShop: this.goToShop,
                getPayTermName: this.getPayTermName,
                getPayTermSurchargeLable: this.getPayTermSurchargeLable,
                calculateShipCost: this.calculateShipCost,
                calculateDiscount: this.calculateDiscount,
                addDiscount: this.addDiscount,
                checkStepConditions: this.checkStepConditions,
                payAndClose: this.payAndClose,
                allowDecimal: this.allowDecimal,
                qtyFormat: this.qtyFormat,
                getMinQtyAviable: this.getMinQtyAviable,
                addItemToCar: this.addItemToCar,
                alertShowMessage: this.alertShowMessage,
                checkItemInCar: this.checkItemInCar,
                getMaxStockByCode: this.getMaxStockByCode,
                loadPrices: this.loadPrices,
                checkStock: this.checkStock,
                updateStatusCar: this.updateStatusCar,
                calculateOrderTotals: this.calculateOrderTotals,
                updateCarQty: this.updateCarQty,
                itemQtyIncrement: this.itemQtyIncrement,
                itemQtyDecrement: this.itemQtyDecrement,
                deleteItemFromCar: this.deleteItemFromCar,
                clearCar: this.clearCar,
                close: this.close,
                showItemPrice: this.showItemPrice,
                rowPriceTotal: this.rowPriceTotal,
                showPriceLabel: this.showPriceLabel,
                goToStep: this.goToStep,
                viewDetailItem: this.viewDetailItem,
                closeDetail: this.closeDetail,
                navListItems: this.navListItems,
                prevStep: this.prevStep,
                nextStep: this.nextStep,
                paymentProcess: this.paymentProcess,
                paymentInit: this.paymentInit,
                updateSelectValues: this.updateSelectValues,
                getPayTermObj: this.getPayTermObj,
                addGiftcard: this.addGiftcard
            };
        }
    }, {
        key: "getComputed",
        value: function getComputed() {
            return {
                getPayTermSurcharge: function getPayTermSurcharge() {
                    if (this.orderTemplate && this.orderTemplate.fields && this.payTermSurchargeItemCode) {
                        var items = __lodash__.cloneDeep(this.orderTemplate.fields.Items);
                        var surcharguesItemCodes = this.payTermSurchargeItemCode.split(",");
                        var surchageCostItem = __lodash__.find(items, function (cost) {
                            return surcharguesItemCodes.indexOf(cost.fields.ArtCode) !== -1;
                        });
                        if (surchageCostItem) {
                            if (this.$store.getters.getSetting.ShowPriceWithIVA) return this.number_format(surchageCostItem.fields.VATPrice, 2);else return this.number_format(surchageCostItem.fields.Price, 2);
                        }
                    }
                    return null;
                },
                payTermSurchargeItemCode: function payTermSurchargeItemCode() {
                    return this.$store.getters.getPayTermSurchargeItemCode;
                },
                payTerms: function payTerms() {
                    var payterms = [];
                    var _iteratorNormalCompletion6 = true;
                    var _didIteratorError6 = false;
                    var _iteratorError6 = undefined;

                    try {
                        for (var _iterator6 = this.$store.state.setting.PayTermRow[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                            var payT = _step6.value;

                            if (payT.fields.ShipModes) {
                                if (this.orderTemplate && this.orderTemplate.fields.ShipMode) {
                                    if (payT.fields.ShipModes.split(",").indexOf(this.orderTemplate.fields.ShipMode) !== -1) payterms.push(payT);
                                }
                            } else payterms.push(payT);
                        }
                    } catch (err) {
                        _didIteratorError6 = true;
                        _iteratorError6 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                _iterator6.return();
                            }
                        } finally {
                            if (_didIteratorError6) {
                                throw _iteratorError6;
                            }
                        }
                    }

                    return payterms;
                },

                discountItemCode: function discountItemCode() {
                    return this.$store.getters.getDiscountItemCode;
                },
                shipItemCode: function shipItemCode() {
                    return this.$store.getters.getShipItemCode;
                },
                getPaytermSurcharge: function getPaytermSurcharge() {
                    if (this.orderTemplate && this.orderTemplate.fields.Items && this.payTermSurchargeItemCode) {
                        var items = __lodash__.cloneDeep(this.orderTemplate.fields.Items);
                        var superSurchargeItemCode = this.discountItemCode.split(",");
                        var chargeItem = __lodash__.find(items, function (discount) {
                            return superSurchargeItemCode.indexOf(discount.fields.ArtCode) !== -1;
                        });
                        if (chargeItem) {
                            if (this.$store.getters.getSetting.ShowPriceWithIVA) return this.number_format(chargeItem.fields.VATPrice, 2);else return this.number_format(chargeItem.fields.Price, 2);
                        }
                    }
                    return null;
                },
                getDiscountCoupon: function getDiscountCoupon() {
                    if (_.has(this.orderTemplate, ['fields', 'Items']) && this.discountItemCode) {
                        var items = __lodash__.cloneDeep(this.orderTemplate.fields.Items);
                        var discountItemCode = this.discountItemCode.split(",");
                        var discountItem = __lodash__.find(items, function (discount) {
                            return discountItemCode.indexOf(discount.fields.ArtCode) !== -1;
                        });
                        if (discountItem) {
                            if (this.$store.getters.getSetting.ShowPriceWithIVA) return this.number_format(discountItem.fields.VATPrice, 2);else return this.number_format(discountItem.fields.Price, 2);
                        }
                    }
                    return null;
                },
                getShipCost: function getShipCost() {
                    if (_.has(this.orderTemplate, ['fields', 'Items']) && this.shipItemCode) {
                        var items = __lodash__.cloneDeep(this.orderTemplate.fields.Items);
                        var shipModeCodes = this.shipItemCode.split(",");
                        var shipCostItem = __lodash__.find(items, function (cost) {
                            return shipModeCodes.indexOf(cost.fields.ArtCode) !== -1;
                        });
                        if (shipCostItem) {
                            if (this.$store.getters.getSetting.ShowPriceWithIVA) return this.number_format(shipCostItem.fields.VATPrice, 2);else return this.number_format(shipCostItem.fields.Price, 2);
                        }
                    }
                    return null;
                },
                getOrderItems: function getOrderItems() {
                    if (_.has(this.orderTemplate, ['fields', 'Items'])) {
                        var items = __lodash__.cloneDeep(this.orderTemplate.fields.Items);
                        var shipModeCodes = this.shipItemCode.split(",");
                        var discountItemCode = this.discountItemCode.split(",");
                        var payterSuerchargeItemCode = this.payTermSurchargeItemCode.split(",");
                        __lodash__.remove(items, function (x) {
                            return shipModeCodes.indexOf(x.fields.ArtCode) !== -1 || discountItemCode.indexOf(x.fields.ArtCode) !== -1 || payterSuerchargeItemCode.indexOf(x.fields.ArtCode) !== -1;
                        });
                        return items;
                    }
                    return null;
                },
                controlStock: function controlStock() {
                    return this.$store.getters.getControlStock;
                },

                mpAvailable: function mpAvailable() {
                    return 'mercadopagoCustom' in Vue.options.components;
                },
                redirectAvailable: function redirectAvailable() {
                    var _this10 = this;

                    var pt = this.$store.state.setting.PayTermRow.find(function (row) {
                        return row.fields.PayTermCode === _this10.currentPayTerm;
                    });
                    if (pt && pt.fields.OppenRedirectEndPoint) return this.$store.getters.getSetting.MercadoPagoMode == 2;
                },

                viewIsLoadingOld: function viewIsLoadingOld() {
                    //return false;
                    var _iteratorNormalCompletion7 = true;
                    var _didIteratorError7 = false;
                    var _iteratorError7 = undefined;

                    try {
                        for (var _iterator7 = this.itemsSelected[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                            var cartItem = _step7.value;

                            var storeItem = this.$store.getters.getItemByCode(cartItem.item.Code);
                            //console.log( 'ST Item AAA',storeItem );
                            if (storeItem && storeItem.isCalculate == false) {
                                this.loadPrices();
                                return true;
                            }
                        }
                    } catch (err) {
                        _didIteratorError7 = true;
                        _iteratorError7 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                _iterator7.return();
                            }
                        } finally {
                            if (_didIteratorError7) {
                                throw _iteratorError7;
                            }
                        }
                    }

                    return false;
                },
                viewIsLoading: function viewIsLoading() {
                    if (!this.orderTemplate) return true;
                    return false;
                },
                show: function show() {
                    return true;
                    //return this.$store.getters.getCarModal
                },
                customer: function customer() {
                    return this.$store.getters.getCustomer;
                },
                checkOutReady: function checkOutReady() {
                    return this.$store.getters.getItemCar.length > 0;
                },
                orderTemplate: function orderTemplate() {
                    return __lodash__.cloneDeep(this.$store.state.carOrderTemplate);
                },

                itemsSelected: function itemsSelected() {
                    var items = this.$store.getters.getItemCar;
                    var newitems = new Map();
                    var _iteratorNormalCompletion8 = true;
                    var _didIteratorError8 = false;
                    var _iteratorError8 = undefined;

                    try {
                        for (var _iterator8 = items[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                            var item = _step8.value;

                            if (!newitems.has(item.item.Code)) newitems.set(item.item.Code, item);else newitems.get(item.item.Code).cant = newitems.get(item.item.Code).cant + item.cant;
                        }
                    } catch (err) {
                        _didIteratorError8 = true;
                        _iteratorError8 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion8 && _iterator8.return) {
                                _iterator8.return();
                            }
                        } finally {
                            if (_didIteratorError8) {
                                throw _iteratorError8;
                            }
                        }
                    }

                    return Array.from(newitems.values());
                },
                carTotalAmount: function carTotalAmount() {
                    //this.calculateOrderTotals();
                    return this.$store.state.total_in_car;
                },
                payTermFilter: function payTermFilter() {
                    var filter = {};
                    var settingPayTerm = this.$store.getters.getPayTerms;
                    if (this.$store.state.customer) settingPayTerm.push(this.$store.state.customer.PayTerm);
                    filter['Code__in'] = settingPayTerm;
                    return filter;
                },
                payTerm: function payTerm() {
                    if (this.$store.state.order_PayTerm) return this.$store.state.order_PayTerm;
                    if (this.$store.state.customer) return this.$store.state.customer.PayTerm;
                    return null;
                },

                Currency: function Currency() {
                    return this.$store.getters.getCurrency;
                }
            };
        }
    }, {
        key: "getWatch",
        value: function getWatch() {
            return {
                "orderCampaign": function orderCampaign() {
                    this.orderCampaignActive = false;
                },
                "$store.getters.getCarAmount": function $storeGettersGetCarAmount(newValue, oldValue) {
                    this.calculateOrderTotals(true);
                },
                '$store.state.order_PayTerm': function $storeStateOrder_PayTerm(newValue, oldValue) {
                    this.calculateOrderTotals(true);
                },
                '$store.state.order_DelAddressCode': function $storeStateOrder_DelAddressCode(newValue, oldValue) {
                    this.calculateOrderTotals();
                }
            };
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return "<div id=\"carModal\" class=\"row cart-items\" v-if=\"!viewIsLoading\">\n                  <h5 class=\"col-12 title\">{{tr(\"Your Purchase\")}}</h5>\n                  <div class=\"col-12\">\n                     <addSOFavModalComponent :from=\"'car-items'\"></addSOFavModalComponent>\n                     <template v-if=\"detailItem\">\n                        <carModalDetailComponent :item=\"detailItem\" :closeCallback=\"closeDetail\" ></carModalDetailComponent>\n                    </template>\n                     <template v-if=\"errors.length>0\">\n                        <div class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\n                            <template v-for=\"msg_error of errors\">\n                                <p>{{tr(msg_error)}}</p>\n                            </template>\n                            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                    </template>\n                     <div class=\"col-12 px-0 px-sm-3\">\n                          <div class=\"stepwizard\">\n                              <div class=\"stepwizard-row setup-panel\">\n                                  <div class=\"stepwizard-step\">\n                                      <button @click=\"navListItems(1)\" :class=\"{'btn': true, 'active': currentStep==1 , 'disabled': currentStep<1}\" :disabled=\"currentStep<1\">1</button>\n                                      <p>{{tr(\"Items in Cart\")}}</p>\n                                  </div>\n                                  <div class=\"stepwizard-step\">\n                                      <button @click=\"navListItems(2)\" :class=\"{'btn': true, 'active': currentStep==2 , 'disabled': currentStep<2}\" :disabled=\"currentStep<2\">2</button>\n                                      <p>{{tr(\"Delivery Data\")}}</p>\n                                  </div>\n                                  <div class=\"stepwizard-step\">\n                                      <button  @click=\"navListItems(3)\" :class=\"{'btn': true, 'active': currentStep==3 , 'disabled': currentStep<3}\" :disabled=\"currentStep>3\">3</button>\n                                      <p>{{tr('Result')}}</p>\n                                  </div>\n                              </div>\n                          </div>\n                          <div class=\"stepwizard-content row\">\n                             <div class=\"col-12 setup-content order-items px-2 px-sm-3\" id=\"step-1\" v-if=\"currentStep==1\">\n                                 <div class=\"table-responsive\">\n                                     <table class=\"table table-striped\">\n                                         <thead>\n                                             <tr>\n                                                 <th scope=\"col\">{{tr(\"Code\")}}</th>\n                                                 <th scope=\"col\">{{tr(\"Item\")}}</th>\n                                                 <th scope=\"col\">{{tr(\"Unit\")}}</th>\n                                                 <th scope=\"col\">{{tr(\"Price\")}} {{showPriceLabel()}}</th>\n                                                 <th scope=\"col\" colspan=\"3\" class=\"text-center\">{{tr(\"Qty\")}}</th>\n                                                 <th scope=\"col\" class=\"text-right\">{{tr(\"Total\")}} {{showPriceLabel()}}</th>\n                                                 <th></th>\n                                             </tr>\n                                         </thead>\n                                         <tbody v-if=\"orderTemplate\">\n                                            <template v-for=\"item in getOrderItems\">\n                                             <template v-if=\"item.message\">\n                                               <tr :key=\"'carItem-'+item.fields.ArtCode\" :title=\"item.message\" :class=\"{ 'text-danger': item.message }\" >\n                                                   <td scope=\"row\" >{{item.fields.ArtCode}}</td>\n                                                   <td colspan=\"4\">\n                                                      <a href=\"#\" class=\"item-link\" :class=\"{ 'text-danger': item.message }\" data-toggle=\"modal\" data-target=\"#carItemDetailModal\"> {{item.fields.Name}} </a>\n                                                   </td>\n                                                   <td colspan=\"3\">\n                                                      {{tr(item.message)}}\n                                                   </td>\n                                                    <td class=\"center\" @click=\"()=>deleteItemFromCar(item.fields.ArtCode)\">\n                                                      <span class=\"row\"  :title=\"tr('Delete Element from Car')\">\n                                                          <i class=\"fas fa-trash\"></i>\n                                                      </span>\n                                                   </td>\n                                                </tr>\n                                             </template>\n                                             <template v-else>\n                                                 <tr :key=\"'carItem-'+item.fields.ArtCode\">\n                                                   <th scope=\"row\" >{{item.fields.ArtCode}}</th>\n                                                   <td @click=\"viewDetailItem(item)\">\n                                                      <a href=\"#\" class=\"item-link\" data-toggle=\"modal\" data-target=\"#carItemDetailModal\"> {{item.fields.Name}}</a>\n                                                   </td>\n                                                   <td scope=\"row\">{{item.fields.Unit}}</td>\n                                                   <td scope=\"row\" class=\"center\" >\n                                                       <template v-if=\"$store.getters.getSetting.ShowPriceByDefault || $store.getters.getIsLogin\">\n                                                           <template v-if=\"$store.getters.getSetting.ShowPriceWithIVA\" >\n                                                                {{number_format(item.fields.VATPrice,2)}} <small v-if=\"Currency\"> {{Currency}}</small>\n                                                           </template>\n                                                           <template v-else>\n                                                                {{number_format(item.fields.Price,2)}} <small v-if=\"Currency\"> {{Currency}}</small>\n                                                            </template>\n                                                       </template>\n                                                       <template v-else>\n                                                           --\n                                                       </template>\n                                                   </td>\n                                                   <td scope=\"row\" colspan=\"3\" class=\"center\" >\n                                                      <div class=\"form-inline row  justify-content-center\">\n                                                          <label class=\"sr-only form-control\" @click=\"()=>itemQtyIncrement(item.fields.ArtCode)\">\n                                                              <i class=\"fas fa-plus-circle waves-effect\"></i>\n                                                          </label>\n                                                          <input :key=\"'carItemInput-'+item.fields.ArtCode\" type=\"number\" :id=\"item.fields.ArtCode\" class=\"form-control col-8\" min=\"1\"  :max=\"getMaxStockByCode(item.fields.ArtCode)\" :value=\"parseInt(item.fields.Qty)\" @change=\"updateCarQty\">\n                                                          <label class=\"sr-only form-control\"@click=\"()=>itemQtyDecrement(item.fields.ArtCode)\" >\n                                                              <i class=\"fas fa-minus-circle waves-effect\"></i>\n                                                          </label>\n                                                       </div>\n                                                   </td>\n                                                   <td class=\"text-right\">\n                                                       <template v-if=\"$store.getters.getSetting.ShowPriceByDefault || $store.getters.getIsLogin\">\n                                                           <template v-if=\"$store.getters.getSetting.ShowPriceWithIVA\" >\n                                                                {{number_format(item.fields.RowTotal,2)}} <small v-if=\"Currency\"> {{Currency}}</small>\n                                                           </template>\n                                                           <template v-else>\n                                                                {{number_format(item.fields.RowNet,2)}} <small v-if=\"Currency\"> {{Currency}}</small>\n                                                            </template>\n                                                       </template>\n                                                       <template v-else>\n                                                           --\n                                                       </template>\n                                                   </td>\n                                                   <td class=\"center\" @click=\"()=>deleteItemFromCar(item.fields.ArtCode)\">\n                                                      <span class=\"delet-icon\"  :title=\"tr('Delete Element from Car')\">\n                                                          <i class=\"fas fa-trash\"></i>\n                                                      </span>\n                                                   </td>\n                                                 </tr>\n                                             </template>\n                                            </template>\n                                            <template v-if=\"$store.getters.showTaxInOrder\">\n                                                <tr v-if=\"$store.getters.getSetting.ShowPriceWithIVA\">\n                                                     <td colspan=\"9\" class=\"text-right\" >\n                                                          <strong class=\"mr-2\">Sub Total</strong>\n                                                          <template v-if=\"$store.getters.getSetting.ShowPriceByDefault || $store.getters.getIsLogin\">\n                                                              <strong>$ {{number_format(getOrderField('SubTotal',0),2)}}</strong>\n                                                          </template>\n                                                          <template v-else>\n                                                              --\n                                                          </template>\n                                                      </td>\n                                                </tr>\n                                                <tr>\n                                                    <td colspan=\"9\" class=\"text-right\">\n                                                        <strong class=\"mr-2\">Total IVA</strong>\n                                                        <template v-if=\"$store.getters.getSetting.ShowPriceByDefault || $store.getters.getIsLogin\">\n                                                            <strong>$ {{number_format(getOrderField('VATTotal',0),2)}}</strong>\n                                                        </template>\n                                                        <template v-else>\n                                                            --\n                                                        </template>\n                                                    </td>\n                                                </tr>\n                                                <tr>\n                                                    <td colspan=\"9\" class=\"text-right\">\n                                                        <strong class=\"mr-2\">Percepciones</strong>\n                                                        <template v-if=\"$store.getters.getSetting.ShowPriceByDefault || $store.getters.getIsLogin\">\n                                                            <strong>$ {{number_format(getOrderField('TotalTax',0),2)}}</strong>\n                                                        </template>\n                                                        <template v-else>\n                                                            --\n                                                        </template>\n                                                    </td>\n                                                </tr>\n                                            </template>\n                                            <tr v-if=\"getDiscountCoupon\">\n                                                <td colspan=\"9\" class=\"text-left text-md-right\">\n                                                  <template >\n                                                    <strong>{{tr(\"Discount\")}}: $ {{getDiscountCoupon}} </strong>\n                                                  </template>\n                                                </td>\n                                            </tr>\n                                            <tr v-if=\"getShipCost\">\n                                                <td colspan=\"9\" class=\"text-left text-md-right\">\n                                                  <template>\n                                                    <strong>{{tr(\"Ship Cost\")}}:$ {{getShipCost}}</strong> \n                                                  </template>\n                                                </td>\n                                            </tr>\n                                            <tr v-if=\"getPayTermSurcharge\">\n                                                <td colspan=\"9\" class=\"text-left text-md-right\">\n                                                     <strong>{{getPayTermSurchargeLable()}}: $ {{getPayTermSurcharge}} </strong>\n                                                </td>\n                                            </tr>\n                                            <tr>\n                                                <td colspan=\"9\" class=\"text-left text-md-right\">\n                                                    <template v-if=\"$store.getters.getSetting.ShowPriceWithIVA\" >\n                                                        <strong class=\"mr-2\">Total (IVA INC)</strong>\n                                                   </template>\n                                                   <template v-else>\n                                                        <strong class=\"mr-2\">Total (IVA EXC)</strong>\n                                                    </template>\n                                                    <template v-if=\"$store.getters.getSetting.ShowPriceByDefault || $store.getters.getIsLogin\">\n                                                       <template v-if=\"$store.getters.getSetting.ShowPriceWithIVA\" >\n                                                            <strong>$ {{number_format(getOrderField('Total',0), 2)}}</strong> <small v-if=\"Currency\"> {{Currency}}</small>  \n                                                       </template>\n                                                       <template v-else>\n                                                            <strong>$ {{number_format(getOrderField('SubTotal',0), 2)}}</strong> <small v-if=\"Currency\"> {{Currency}}</small>\n                                                        </template>\n                                                    </template>\n                                                    <template v-else>\n                                                        --\n                                                    </template>\n                                                </td>\n                                            </tr>\n                                         </tbody>\n                                     </table>\n                                     <div class=\"row mt-2 mx-0\">\n                                          <div class=\"col-12 col-md-6 text-center text-md-left\">\n                                              <button key=\"btn-1-step-1\" @click=\"goToShop()\" class=\"btn btn-secondary mb-2\">\n                                                  <i class=\"fas fa-cart-plus mr-1\"></i>\n                                                  {{tr('Continue Shopping')}}\n                                              </button>\n                                              <button key=\"btn-4-step-1\" @click=\"clearCar()\" class=\"btn btn-secondary mb-2\">\n                                                  <i class=\"fas fa-trash mr-1\"></i>\n                                                  {{tr('Clear')}}\n                                              </button>\n                                          </div>\n                                          <div class=\"col-12 col-md-6 order-first order-md-last text-center text-md-right\">\n                                              <button key=\"brn-2-step-1\" :disabled=\"itemsSelected.length==0\" v-bind:class=\"{ disabled:itemsSelected.length==0}\" class=\"btn btn-secondary mb-2\" data-toggle=\"modal\" data-target=\"#addSOFavModal\">\n                                                  <i class=\"fas fa-star mr-1\"></i>\n                                                  {{tr('Add To Favorite Orders')}}\n                                              </button>\n                                              <button key=\"brn-3-step-1\" :disabled=\"itemsSelected.length==0\" v-bind:class=\"{ disabled:itemsSelected.length==0}\" class=\"btn btn-success mb-2 nextBtn\" type=\"button\" @click=\"nextStep($event)\">\n                                                  <span>{{tr('Delivery Data')}}</span>\n                                                  <i class=\"fas fa-arrow-right ml-1\"></i>\n                                              </button>\n                                          </div>\n                                     </div>\n                                 </div>\n                             </div>\n                             <div class=\"col-12 setup-content\" id=\"step-2\" v-if=\"currentStep==2\">\n                                  <div class=\"row\">\n                                    <carCenterCostList />\n                                  </div>\n                                  <div class=\"row\">\n                                    <carDeliveryList @deliveryselected=\"calculateOrderTotals()\" />\n                                  </div>\n                                  <div class=\"col-12\">\n                                      <div class=\"form-row m-0 mb-3 bordered\">\n                                         <h6 class=\"col-12 align-items-center d-flex\"><i class=\"delivery-icon fas fa-credit-card fa-2x mr-3\" style=\"font-size: 1.6em;\"></i>{{tr('Seleccione un m\xE9todo de pago')}}</h6>\n                                         <div class=\"form-group col-6 px-2\">\n                                             <label class=\"col-form-label\">{{tr(\"PayTerm\")}}</label>\n                                             <!--<selectLinkToComponent class=\"form-control\" :table=\"'PayTerm'\" :paste=\"'Code'\" :showField=\"'Name'\" :filters=\"payTermFilter\" :selected=\"payTerm\"  @update-value=\"updateSelectValues('PayTerm')\"> </selectLinkToComponent>-->\n                                             <select  class=\"form-control\" @change=\"updateSelectValues('PayTerm')\">\n                                                 <template v-for=\"payterm of payTerms\">\n                                                        <template v-if=\"$store.state.setting.AllowNotOnlyPayments==true\">\n                                                            <option :value=\"payterm.fields.PayTermCode\" :selected=\"payterm.fields.RequireOnlinePayment\">{{payterm.fields.PayTermName}}</option>\n                                                        </template>\n                                                        <template v-else>\n                                                            <template v-if=\"payterm.fields.RequireOnlinePayment\">\n                                                                <option :value=\"payterm.fields.PayTermCode\" :selected=\"payterm.fields.RequireOnlinePayment\">{{payterm.fields.PayTermName}}</option>\n                                                            </template>\n                                                        </template>\n                                                    </template>\n                                             </select> \n                                         </div>\n                                         <div class=\"form-group col-6 px-2\">\n                                              <label class=\"col-form-label\">{{tr(\"Coupon\")}}</label>\n                                              <input class=\"form-control\" v-model=\"orderCampaign\" v-on:change=\"calculateDiscount\" >\n                                         </div>\n                                         <div class=\"form-group col-6 px-2\">\n                                            <label class=\"col-12 col-form-label\">{{tr(\"Comment\")}}\"</label>\n                                            <div class=\"col-sm-12\">\n                                              <textarea class=\"form-control\" rows=\"3\" v-model=\"orderComment\" v-on:change=\"updateSelectValues('Comment')\"></textarea>\n                                            </div>\n                                         </div>\n                                     </div>\n                                  </div>\n                                  <div class=\"col-12\">\n                                      <div class=\"text-right align-self-end\">\n                                          <button key=\"btn-1-step-2\" class=\"btn btn-secondary prevBtn float-left mb-2\" type=\"button\" @click=\"prevStep()\">\n                                                <i class=\"fas fa-arrow-left\"></i>\n                                                <span>{{tr('Back to Items in Cart')}}</span>\n                                          </button>\n                                          <button key=\"btn-2-step-2\" @click=\"payAndClose($event)\" v-bind:class=\"{btn:true, 'btn-success':true, disabled:itemsSelected.length==0}\">{{tr('Checkout')}}</button>\n                                      </div>\n                                  </div>\n                             </div>\n                             <div class=\"col-12 setup-content my-4\" id=\"step-3\" v-if=\"currentStep==3\">\n                                 <div class=\"col-12\">\n                                     <template v-if=\"status=='loading'\">\n                                         <div class=\"\">\n                                             <h5 class=\"text-center\">{{tr(\"Your Order is processing\")}}.{{tr(\"Please Wait\")}}.</h5>\n                                         </div>\n                                     </template>\n                                     <template v-if=\"status=='failure'\">\n                                         <h5 class=\"text-center\">{{tr(\"The Sales Order can't be created\")}}.</h5>\n                                         <div v-if=\"result.error.length > 0\" class=\"col-12 col-md-6 offset-md-3 error-message px-1\">\n                                             <p v-for=\"msg_error of result.error\" class=\"text-center\">{{tr(msg_error)}}</p>\n                                         </div>\n                                         <button class=\"btn btn-secondary prevBtn float-left\" type=\"button\" @click=\"navListItems(1)\">\n                                                <i class=\"fas fa-arrow-left\"></i>\n                                                <span>{{tr('Back to Items in Cart')}}</span>\n                                         </button>\n                                     </template>\n                                     <template  v-if=\"status=='result'\">\n                                         <h5 class=\"text-center\">{{ tr([successMessage,result.so.fields.SerNr]) }}.</h5>\n                                         <div v-if=\"result.error.length > 0\" class=\"col-12 col-md-6 offset-md-3 error-message my-3 px-1 pt-2\">\n                                             <h5 class=\"text-center\">{{tr(\"Information\")}}:</h5>\n                                             <p v-for=\"msg_error of result.error\" class=\"text-center\">{{tr(msg_error)}}</p>\n                                         </div>\n                                         <template v-if=\"(mpAvailable || redirectAvailable) && mpdata && mpdata.amount\">\n                                            <div class=\"col-12 col-md-6 offset-md-3 alert alert-warning px-1\" role=\"alert\" v-if=\"paymentMsg\">\n                                                <template v-if=\"Array.isArray(paymentMsg)\">\n                                                     <p v-for=\"msg_error of paymentMsg\" class=\"text-center\">{{tr(msg_error.description.charAt(0).toUpperCase() + msg_error.description.slice(1))}}</p>\n                                                </template>\n                                                <template v-else>\n                                                    <p class=\"text-center\">{{tr(paymentMsg)}}</p>\n                                                </template>\n                                            </div>\n                                            <template v-if=\"paymentIsProcess\">\n                                                <div class=\"col-12 col-md-6 offset-md-3 alert alert-success text-center\" role=\"alert\">\n                                                    <icon name=\"regular/check-circle\" scale=\"5\" class=\"col-6\"/>\n                                                    <h4 class=\"col-12 text-center mt-2\">{{tr(\"The payment was approved successfully\")}}</h4>\n                                                    <strong class=\"d-block mt-2\">{{tr('It may take a few minutes to be reflected')}}</strong>\n                                                </div>\n                                            </template>\n                                            <div class=\"row justify-content-center mt-4\"  v-if=\"doOnlinePayment\">\n                                                <template v-if=\"$store.getters.getSetting.MercadoPagoMode==1\">\n                                                    <mercadopagoFormCustom :info=\"mpdata\" @payment-init=\"paymentInit\" @payment-result=\"paymentProcess\"></mercadopagoFormCustom>\n                                                </template>\n                                                <template v-else-if='$store.getters.getSetting.MercadoPagoMode==0'>\n                                                    <mercadopagoCustom :info=\"mpdata\" @payment-init=\"paymentInit\" @payment-result=\"paymentProcess\"></mercadopagoCustom>\n                                                </template>\n                                                <template v-else-if='$store.getters.getSetting.MercadoPagoMode==2'>\n                                                    <redirectPaymentComponent :SO='result.so.fields.SerNr' :PayTermObj='getPayTermObj()'/>\n                                                </template>\n                                            </div>\n                                        </template>\n                                        <div class=\"row justify-content-center mt-4\">\n                                           <router-link key=\"btn-1-step-3\" to=\"/profile\" class=\"btn btn-custom\">{{tr('View Shopping List')}}</router-link>\n                                        </div>\n                                    </template>\n                                 </div>\n                             </div>\n                          </div>\n                      </div>\n                  </div>\n              </div>";
        }
    }], [{
        key: "name",
        value: function name() {
            return "CarModalComponent";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "CarModalComponent";
        }
    }]);

    return CarComponent;
}(Component);

CarComponent.registerComponent();
//# sourceMappingURL=carModalComponent.js.map
