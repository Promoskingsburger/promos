"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* global Component, _ */
var FavouriteOrderActionsComponent = function (_Component) {
    _inherits(FavouriteOrderActionsComponent, _Component);

    function FavouriteOrderActionsComponent() {
        _classCallCheck(this, FavouriteOrderActionsComponent);

        return _possibleConstructorReturn(this, (FavouriteOrderActionsComponent.__proto__ || Object.getPrototypeOf(FavouriteOrderActionsComponent)).apply(this, arguments));
    }

    _createClass(FavouriteOrderActionsComponent, [{
        key: "getProps",
        value: function getProps() {
            return ['data', 'index', 'column'];
        }
    }, {
        key: "getMethods",
        value: function getMethods() {
            return {
                buyOrder: this.buyOrder,
                toggleFavouriteOrder: this.toggleFavouriteOrder,
                openDetail: this.openDetail,
                addItemToCar: this.addItemToCar,
                getMaxStockByCode: this.getMaxStockByCode,
                transformInfo: this.transformInfo
            };
        }
    }, {
        key: "transformInfo",
        value: function transformInfo(favObject) {
            this.message = null;
            if (favObject && favObject[1]) {
                var notFoundItems = 0;
                var items = [];
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = favObject[1].entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _step$value = _slicedToArray(_step.value, 2),
                            index = _step$value[0],
                            item = _step$value[1];

                        var storeItem = _.cloneDeep(this.$store.getters.getItemByCode(item[0]));
                        if (storeItem) {
                            storeItem.index = index;
                            storeItem.carQyt = item[1];
                            items.push(storeItem);
                        } else {
                            notFoundItems += 1;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                if (notFoundItems > 0) this.message = ["{{$1}} item was omitted from this order", notFoundItems];

                return items;
            }
            return [];
        }
    }, {
        key: "addItemToCar",
        value: function addItemToCar(item) {
            var reloadCard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (isNaN(item.carQyt) || parseInt(item.carQyt) == 0) {
                this.alertShowMessage("Incorrent Qty Value");
                return;
            }
            var storeItem = _.cloneDeep(this.$store.getters.getItemByCode(item.Code));
            if (this.controlStock) {
                var itemInCar = this.$store.getters.getItemCar.filter(function (x) {
                    return x.id == item.Code;
                })[0];
                var maxQty = this.getMaxStockByCode(item.Code);
                if (itemInCar) {
                    if (parseInt(itemInCar.cant) + parseInt(item.carQyt) > maxQty) {
                        this.alertShowMessage(["The article qty can't be bigger than {{$1}}", maxQty]);
                        return;
                    }
                } else {
                    if (parseInt(item.carQyt) > maxQty) {
                        this.alertShowMessage(["The article qty can't be bigger than {{$1}}", maxQty]);
                        return;
                    }
                }
            }

            if (reloadCard) this.$store.dispatch('ItemComponentAddToCar', storeItem);else this.$store.commit('updateItemToCar', storeItem);
        }
    }, {
        key: "getMaxStockByCode",
        value: function getMaxStockByCode(itemCode) {
            var giftCardItem = this.$store.getters.getGiftCardItem;
            if (this.$store.getters.getSetting.ControlStockForSales && !(giftCardItem && giftCardItem.fields.Code == itemCode)) {
                var itemInStore = this.$store.getters.getItemByCode(itemCode);
                var qtyInCar = this.$store.getters.getItemAmountInCar(itemCode);
                if (itemInStore.Reserved) return itemInStore.Qty - itemInStore.Reserved - qtyInCar;
                return itemInStore.Qty - qtyInCar;
            }
            return this.$store.getters.getMaxQtyItem - this.$store.getters.getItemQtyCar(itemCode);
        }
    }, {
        key: "buyOrder",
        value: function buyOrder() {
            var _this2 = this;

            var items = this.transformInfo(this.$store.getters.getFavouriteOrderByName(this.data.Name));
            if (items.length > 1) items.slice(0, -1).forEach(function (x) {
                return _this2.addItemToCar(x);
            });
            if (items.length > 0) items.slice(-1).forEach(function (x) {
                return _this2.addItemToCar(x, true);
            });
        }
    }, {
        key: "toggleFavouriteOrder",
        value: function toggleFavouriteOrder() {
            var FV = this.$store.getters.getFavouriteOrderByName(this.data.Name);
            var FavOrdeToDelete = {
                name: FV[0],
                items: FV[1],
                OrderSerNr: FV[2],
                from: 'so-items'
            };
            this.$store.dispatch('toggleFavouriteOrder', FavOrdeToDelete);
        }
    }, {
        key: "openDetail",
        value: function openDetail() {
            this.$store.dispatch('favOrderDetail', this.data.Name);
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return "<div :key=\"'FavouriteOrderActions-'+index\" class=\"custom-actions\" >\n                   <a :key=\"'actions-showFavouriteOrderDetail-'+index\"  :title=\"tr('View')\" data-toggle=\"modal\" data-target=\"#favOrderDetailModal\"  @click=\"openDetail\">\n                     <i class=\"fas fa-file-alt\"></i>\n                   </a>\n                  <a :key=\"'actions-sendToCarFavouriteOrder-'+index\"  :title=\"tr('Checkout')\" @click=\"buyOrder\">\n                    <i class=\"fa fa-shopping-cart\"></i>\n                  </a>\n                  <a :key=\"'actions-removeFavouriteOrderDetail-'+index\"  :title=\"tr('Remove from Favorite')\"  @click=\"toggleFavouriteOrder\">\n                    <i class=\"fas fa-trash\"></i>\n                  </a>\n               </div>";
        }
    }], [{
        key: "name",
        value: function name() {
            return "FavouriteOrderActionsComponent";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "FavouriteOrderActionsComponent";
        }
    }]);

    return FavouriteOrderActionsComponent;
}(Component);

FavouriteOrderActionsComponent.registerComponent();
//# sourceMappingURL=FavouriteOrderActionsComponent.js.map
