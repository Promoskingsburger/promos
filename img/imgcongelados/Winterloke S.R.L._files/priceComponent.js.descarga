"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* global Component */
var priceComponent = function (_Component) {
    _inherits(priceComponent, _Component);

    function priceComponent() {
        _classCallCheck(this, priceComponent);

        return _possibleConstructorReturn(this, (priceComponent.__proto__ || Object.getPrototypeOf(priceComponent)).apply(this, arguments));
    }

    _createClass(priceComponent, [{
        key: "data",
        value: function data() {
            return {
                currentItemPriceData: null,
                itemCode: null
            };
        }
    }, {
        key: "created",
        value: function created() {
            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.itemCode = this.item.Code;

                            case 1:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "getProps",
        value: function getProps() {
            return ['item'];
        }
    }, {
        key: "getComputed",
        value: function getComputed() {
            return {
                itemStore: function itemStore() {
                    return this.$store.state.items_store.get(this.item.Code);
                },
                currentItemPrice: function currentItemPrice() {
                    return this.$store.getters.showItemPrice(this.itemStore);
                },
                Currency: function Currency() {
                    return this.$store.getters.getCurrency;
                }
            };
        }
    }, {
        key: "getWatch",
        value: function getWatch() {
            return {
                "itemStore.RowNet": function itemStoreRowNet(newValue, oldValue) {
                    this.updateItemPrice();
                },
                "itemStore.RowTotal": function itemStoreRowTotal(newValue, oldValue) {
                    this.updateItemPrice();
                }
            };
        }
    }, {
        key: "getMethods",
        value: function getMethods() {
            return {
                updateItemPrice: this.updateItemPrice
            };
        }
    }, {
        key: "updateItemPrice",
        value: function updateItemPrice() {
            this.currentItemPriceData = this.$store.getters.showItemPrice(this.itemStore);
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return "<div class=\"price-container\">\n                <template v-if=\"currentItemPrice==null\">\n                    <div class=\"progress\">\n                        <div class=\"progress-bar progress-bar-striped progress-bar-animated bg-info\" role=\"progressbar\" aria-valuenow=\"80\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 80%\"></div>\n                    </div>\n                </template>\n                <template v-else>\n                    <p class=\"card-text mb-2 item-price\"> \n                        <strong v-if=\"item.CrossedOutPrice\" class=\"crossedoutprice\">$ {{item.CrossedOutPrice}}</strong>\n                        <strong>$ {{currentItemPrice}} </strong>\n                        <small v-if=\"Currency\">{{Currency}}/{{item.Unit}}</small><small v-else>{{item.Unit}}</small>\n                    </p>\n                </template>\n            </div>";
        }
    }], [{
        key: "name",
        value: function name() {
            return "priceComponent";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "priceComponent";
        }
    }]);

    return priceComponent;
}(Component);

priceComponent.registerComponent();
//# sourceMappingURL=priceComponent.js.map
