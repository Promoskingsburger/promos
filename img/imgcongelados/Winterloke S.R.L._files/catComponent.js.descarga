"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* global Component */
var catComponent = function (_Component) {
    _inherits(catComponent, _Component);

    function catComponent() {
        _classCallCheck(this, catComponent);

        return _possibleConstructorReturn(this, (catComponent.__proto__ || Object.getPrototypeOf(catComponent)).apply(this, arguments));
    }

    _createClass(catComponent, [{
        key: "getProps",
        value: function getProps() {
            return ['cat', "lvl"];
        }
    }, {
        key: "getComputed",
        value: function getComputed() {
            return {
                isPath: function isPath() {
                    var catList = this.$store.state.cat_history;
                    return catList.map(function (x) {
                        return x.code;
                    }).indexOf(this.cat.code) !== -1;
                }
            };
        }
    }, {
        key: "getMethods",
        value: function getMethods() {
            return {
                getName: this.getName,
                filterByCategory: this.filterByCategory
            };
        }
    }, {
        key: "getName",
        value: function getName(cat) {
            try {
                return cat.name;
            } catch (err) {
                return 'Category without Name';
            }
        }
    }, {
        key: "filterByCategory",
        value: function filterByCategory(cat, lvl) {
            window.scrollTo(0, 0);
            if (this.$store.state.cat_selected && cat.code == this.$store.state.cat_selected.code) return;
            var catRoutePath = cat.code + "__" + cat.name;
            this.$router.push({
                name: 'CategorySEO',
                params: { category: catRoutePath },
                query: { category: catRoutePath }
            });
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return "<div :key=\"'container-'+getName(cat)\" v-bind:class=\"{'child-categories':lvl>0, 'selected': isPath && cat.children.length == 0}\"  >\n                  <template v-if=\"cat.children.length>0\" >\n                      <template v-if=\"isPath\">\n                          <details open>\n                              <summary>\n                                 <span>{{capitalize(getName(cat))}}</span>\n                              </summary>\n                              <template v-for=\"subcat2 in cat.children\">\n                                  <catComponent :cat=\"subcat2\" :lvl=\"parseInt(lvl)+1\" ></catComponent>\n                              </template>\n                           </details>\n                       </template>\n                       <template v-else>\n                          <details>\n                              <summary>\n                                 {{capitalize(getName(cat))}}\n                              </summary>\n                              <template v-for=\"subcat2 in cat.children\">\n                                  <catComponent :cat=\"subcat2\" :lvl=\"parseInt(lvl)+1\" ></catComponent>\n                              </template>\n                           </details>\n                       </template>\n                   </template>\n                   <span v-else  v-on:click=\"filterByCategory(cat,lvl)\">\n                       <template v-if=\"isPath\">\n                             <strong>{{capitalize(getName(cat))}}</strong>\n                       </template>\n                       <template v-else>\n                            {{capitalize(getName(cat))}}\n                       </template>\n                   </span>\n              </div>";
        }
    }], [{
        key: "name",
        value: function name() {
            return "catComponent";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "catComponent";
        }
    }]);

    return catComponent;
}(Component);

catComponent.registerComponent();
//# sourceMappingURL=catComponent.js.map
