"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* global Component, _ */
var favouriteOrderDetailModalComponent = function (_Component) {
    _inherits(favouriteOrderDetailModalComponent, _Component);

    function favouriteOrderDetailModalComponent() {
        _classCallCheck(this, favouriteOrderDetailModalComponent);

        return _possibleConstructorReturn(this, (favouriteOrderDetailModalComponent.__proto__ || Object.getPrototypeOf(favouriteOrderDetailModalComponent)).apply(this, arguments));
    }

    _createClass(favouriteOrderDetailModalComponent, [{
        key: "data",
        value: function data() {
            return {
                message: null
            };
        }
    }, {
        key: "getComputed",
        value: function getComputed() {
            return {
                currentfavOrder: function currentfavOrder() {
                    return this.$store.getters.getCurrentFavOrder;
                },
                FavOrder: function FavOrder() {
                    this.message = null;
                    if (this.currentfavOrder) {
                        var notFoundItems = 0;
                        var items = [];
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = this.currentfavOrder[1].entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var _step$value = _slicedToArray(_step.value, 2),
                                    index = _step$value[0],
                                    item = _step$value[1];

                                var storeItem = _.cloneDeep(this.$store.getters.getItemByCode(item[0]));
                                if (storeItem) {
                                    storeItem.index = index;
                                    storeItem.carQyt = item[1];
                                    items.push(storeItem);
                                } else {
                                    notFoundItems += 1;
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }

                        if (notFoundItems > 0) this.message = ["{{$1}} item was omitted from this order", notFoundItems];

                        return { Name: this.currentfavOrder[0], Items: items };
                    }
                    return {};
                }
            };
        }
    }, {
        key: "getMethods",
        value: function getMethods() {
            return {
                sendOrdertoCar: this.sendOrdertoCar,
                getItemName: this.getItemName,
                addItemToCar: this.addItemToCar,
                getMaxStockByCode: this.getMaxStockByCode,
                updateQty: this.updateQty
            };
        }
    }, {
        key: "addItemToCar",
        value: function addItemToCar(item) {
            var reloadCard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (isNaN(item.carQyt) || parseInt(item.carQyt) == 0) {
                this.alertShowMessage("Incorrent Qty Value");
                return;
            }
            var storeItem = _.cloneDeep(this.$store.getters.getItemByCode(item.Code));
            if (this.controlStock) {
                var itemInCar = this.$store.getters.getItemCar.filter(function (x) {
                    return x.id == item.Code;
                })[0];
                var maxQty = this.getMaxStockByCode(item.Code);
                if (itemInCar) {
                    if (parseInt(itemInCar.cant) + parseInt(item.carQyt) > maxQty) {
                        this.alertShowMessage(["The article qty can't be bigger than {{$1}}", maxQty]);
                        return;
                    }
                } else {
                    if (parseInt(item.carQyt) > maxQty) {
                        this.alertShowMessage(["The article qty can't be bigger than {{$1}}", maxQty]);
                        return;
                    }
                }
            }

            if (reloadCard) this.$store.dispatch('ItemComponentAddToCar', storeItem);else this.$store.commit('updateItemToCar', storeItem);
        }
    }, {
        key: "getMaxStockByCode",
        value: function getMaxStockByCode(itemCode) {
            var giftCardItem = this.$store.getters.getGiftCardItem;
            if (this.$store.getters.getSetting.ControlStockForSales && !(giftCardItem && giftCardItem.fields.Code == itemCode)) {
                var itemInStore = this.$store.getters.getItemByCode(itemCode);
                var qtyInCar = this.$store.getters.getItemAmountInCar(itemCode);
                if (itemInStore.Reserved) return itemInStore.Qty - itemInStore.Reserved - qtyInCar;
                return itemInStore.Qty - qtyInCar;
            }
            return this.$store.getters.getMaxQtyItem - this.$store.getters.getItemQtyCar(itemCode);
        }
    }, {
        key: "updateQty",
        value: function updateQty(event, item) {
            var target = event.target;

            var position = this.currentfavOrder[1].findIndex(function (x) {
                return x[0] === item.Code;
            });
            if (position !== -1) this.currentfavOrder[1][position][1] = target.value;
        }
    }, {
        key: "sendOrdertoCar",
        value: function sendOrdertoCar() {
            var _this2 = this;

            var items = Array.from(this.FavOrder.Items);
            if (items.length > 1) items.slice(0, -1).forEach(function (x) {
                return _this2.addItemToCar(x);
            });
            if (items.length > 0) items.slice(-1).forEach(function (x) {
                return _this2.addItemToCar(x, true);
            });
        }
    }, {
        key: "getItemName",
        value: function getItemName(ArtCode) {
            var item = this.$store.getters.getItemByCode(ArtCode);
            if (item) return item.Name;
            return "ITEM NOT FOUND";
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return "<div class=\"modal fade item-detail-modal\" id=\"favOrderDetailModal\" tabindex=\"-1\" role=\"dialog\">\n                  <div class=\"modal-dialog modal-lg\" role=\"document\">\n                      <div class=\"modal-content\">\n                          <div class=\"modal-header\">\n                              <h5 class=\"modal-title\">{{tr(\"Favorite Order Items\")}}</h5>\n                              <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                  <span aria-hidden=\"true\">&times;</span>\n                              </button>\n                          </div>\n                          <div class=\"modal-body\" v-if=\"FavOrder\">\n                            <h5 class=\"title\">\n                                <span class=\"center\">{{tr('Favorite Order')}}</span>\n                                <input type=\"text\" class=\"form-control\" v-model=\"FavOrder.Name\" >\n                            </h5>\n                            <div v-if=\"message\" class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\n                              <strong>{{tr('Information')}}:</strong> {{tr(message)}}\n                              <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                              </button>\n                            </div>\n                            <table class=\"table table-striped\">\n                                <thead>\n                                  <tr>\n                                    <th>{{tr('Code')}}</th>\n                                    <th>{{tr('Products')}}</th>\n                                    <th>{{tr(\"Qty\")}}</th>\n                                  </tr>\n                                </thead>\n                                <tbody>\n                                  <tr v-for=\"item of FavOrder.Items\">\n                                    <td>{{item.Code}}</td>\n                                    <td>{{item.Name}}</td>\n                                    <td>\n                                        <input :id=\"'fav_ord_'+item.Code\" type=\"number\" class=\"form-control\" min=\"1\"  :max=\"getMaxStockByCode(item.Code)\" :value=\"item.carQty\" readonly>\n                                    </td>\n                                  </tr>\n                                </tbody>\n                            </table>\n                            <div class=\"text-right\">\n                               <button class=\"btn secondary-btn\" data-dismiss=\"modal\" @click=\"sendOrdertoCar\"><i class=\"icon fas fa-cart-plus\"></i>{{tr('Load to Cart')}}</button>\n                               <button class=\"btn secondary-btn\" data-dismiss=\"modal\" @click=\"$store.commit('clearCurrentFavOrder')\"><i class=\"icon fas fa-save\"></i>{{tr('Close')}}</button>\n                            </div>\n                          </div>\n                      </div>\n                  </div>\n              </div>";
        }
    }], [{
        key: "name",
        value: function name() {
            return "favouriteOrderDetailModalComponent";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "favouriteOrderDetailModalComponent";
        }
    }]);

    return favouriteOrderDetailModalComponent;
}(Component);

favouriteOrderDetailModalComponent.registerComponent();
//# sourceMappingURL=favouriteOrderDetailModalComponent.js.map
