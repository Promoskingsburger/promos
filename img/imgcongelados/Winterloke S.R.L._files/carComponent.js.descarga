"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var carComponent = function (_Component) {
    _inherits(carComponent, _Component);

    function carComponent() {
        _classCallCheck(this, carComponent);

        return _possibleConstructorReturn(this, (carComponent.__proto__ || Object.getPrototypeOf(carComponent)).apply(this, arguments));
    }

    _createClass(carComponent, [{
        key: "getProps",
        value: function getProps() {
            return ['is_side_nav'];
        }
    }, {
        key: "getComputed",
        value: function getComputed() {
            return {
                status: function status() {
                    return this.$store.getters.getCarStatus;
                },

                itemsSelected: function itemsSelected() {
                    return this.$store.getters.getItemCar;
                },
                totalAmount: function totalAmount() {
                    return this.$store.getters.getCarAmount.toFixed(2);
                },
                checkoutEnabled: function checkoutEnabled() {
                    if (this.$store.getters.getSession == null) return false;
                    return true;
                }
            };
        }
    }, {
        key: "getMethods",
        value: function getMethods() {
            return {
                itemQtyIncrement: this.itemQtyIncrement,
                itemQtyDecrement: this.itemQtyDecrement,
                deleteItemFromCar: this.deleteItemFromCar,
                showItemPrice: this.showItemPrice,
                showPriceLabel: this.showPriceLabel
            };
        }
    }, {
        key: "itemQtyIncrement",
        value: function itemQtyIncrement(itemCode) {
            this.$store.dispatch('changeCartQty', { itemCode: itemCode.id, action: 'up' });
        }
    }, {
        key: "itemQtyDecrement",
        value: function itemQtyDecrement(itemCode) {
            this.$store.dispatch('changeCartQty', { itemCode: itemCode.id, action: 'down' });
        }
    }, {
        key: "deleteItemFromCar",
        value: function deleteItemFromCar(itemCode) {
            this.$store.dispatch('changeCartQty', { itemCode: itemCode.id, action: 'delete' });
        }
    }, {
        key: "showItemPrice",
        value: function showItemPrice(item) {
            var price = item.Price;
            if (this.$store.getters.getPriceToShow) price = item.RowTotal;else {
                if (item.RowNet) price = item.RowNet;
            }
            return parseFloat(Math.round(price * 100) / 100).toFixed(2);
        }
    }, {
        key: "showPriceLabel",
        value: function showPriceLabel() {
            if (this.$store.getters.getPriceToShow) return '(IVA INC)';else {
                return '(IVA EXC)';
            }
        }
    }, {
        key: "getTemplate",
        value: function getTemplate() {
            return "<div class=\"card\">\n                 <div class=\"card-content\">\n                      <div class=\"card-panel cart-items-section row\">\n                            <div class-=\"col m12\">\n                                <span class=\"btn clear-basket col m12 s12\" @click=\"$store.dispatch('clearItemToCar','view')\">{{tr(\"Clear Basket\")}}</span>\n                           </div>\n                            <template  v-for=\"item in itemsSelected\">\n                                <div class=\"row produktliste cart-items-list\" :title=\"'Precio Unitario '+parseFloat(Math.round(item.item.Price * 100) / 100).toFixed(2)\">\n                                    <div class=\"col m12 s12 item-title\">\n                                        <span class=\"truncate\" :title=\"item.item.Name\">{{item.item.Name}}</span>\n                                    </div>\n                                    <div class=\"col m12 s12 item-qty-section\">\n                                       <div class=\"row carControl\">\t\t    \n                                            <span @click=\"itemQtyIncrement(item)\" class=\"basket-icons col s2\"><i class=\"fas fa-angle-up waves-effect\" ></i></span>\n                                            <input class=\"input-item-amount col s5\" type=\"text\" readonly :value=\"item.cant\" placeholder=\"0\" >\n                                            <span @click=\"itemQtyDecrement(item)\" class=\"basket-icons col s2\"><i class=\"fas fa-angle-down waves-effect\" ></i></span>\n                                            <span @click=\"deleteItemFromCar(item)\" class=\"col s1\"><i class=\"far fa-trash-alt\" ></i></span>\n                                        </div>                                              \n                                    </div>\n                                </div>\n                            </template>\n                            <div class=\"row produktliste total-amount\">\n                               <div class=\"col s12\">\n                                    <strong>TOTAL {{showPriceLabel()}}</strong>\n                               </div>\n                               <div class=\"col s12 right-align\">\n                                    <strong>$ {{totalAmount}} </strong>\n                                </div>\n                            </div>\n                            <div class=\"row produktliste\" v-if=\"checkoutEnabled\">\n                                <div>\n                                    <a class=\"btn checkout-btn col m12 s12\" @click=\"$router.push('/badges');\">{{tr(\"Checkout\")}}</a>\n                                </div> \n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>";
        }
    }], [{
        key: "name",
        value: function name() {
            return "carComponent";
        }
    }, {
        key: "componentName",
        value: function componentName() {
            return "carComponent";
        }
    }]);

    return carComponent;
}(Component);

carComponent.registerComponent();
//# sourceMappingURL=carComponent.js.map
